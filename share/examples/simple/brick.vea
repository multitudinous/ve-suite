<?xml version="1.0" encoding="ISO-8859-1" standalone="no" ?>
<!-- Taken from 3Dlabs.com example brick shader-->
<Program>
   <name>Brick</name>
   <vertexShader>
      <type>Vertex</type>
      <uniform>
         <name>LightPosition</name>
         <type>Float</type>
         <size>3</size>
         <value>10.0</value>
         <value>10.0</value>
         <value>10.0</value>
      </uniform>
      <shaderCode>
        uniform vec3 LightPosition;
        const float SpecularContribution = 0.3;
        const float DiffuseContribution  = 1.0 - SpecularContribution;

        varying float LightIntensity;
        varying vec2  MCposition;

        void main(void)
        {
            vec3 ecPosition = vec3 (gl_ModelViewMatrix * gl_Vertex);
            vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);
            vec3 lightVec   = normalize(LightPosition - ecPosition);
            vec3 reflectVec = reflect(-lightVec, tnorm);
            vec3 viewVec    = normalize(-ecPosition);
            float diffuse   = max(dot(lightVec, tnorm), 0.0);
            float spec      = 0.0;

            if (diffuse > 0.0)
            {
                spec = max(dot(reflectVec, viewVec), 0.0);
                spec = pow(spec, 16.0);
            }

            LightIntensity  = DiffuseContribution * diffuse +
                              SpecularContribution * spec;

            MCposition      = gl_Vertex.xy;
            gl_Position     = ftransform();
        }
      </shaderCode>
   </vertexShader>
   <fragmentShader>
      <type>Fragment</type>
     <uniform>
        <name>BrickPct</name>
        <type>Float</type>
        <size>2</size>
        <textureUnit>0</textureUnit>
        <value>0.90</value>
        <value>0.85</value>
     </uniform>
     <uniform>
        <name>BrickSize</name>
        <type>Float</type>
        <size>2</size>
        <textureUnit>0</textureUnit>
        <value>0.30</value>
        <value>0.15</value>
     </uniform>
     <uniform>
        <name>MortarColor</name>
        <type>Float</type>
        <size>3</size>
        <textureUnit>0</textureUnit>
        <value>0.85</value>
        <value>0.86</value>
        <value>0.84</value>
     </uniform>
     <uniform>
        <name>BrickColor</name>
        <type>Float</type>
        <size>3</size>
        <textureUnit>0</textureUnit>
        <value>1.0</value>
        <value>0.3</value>
        <value>0.2</value>
     </uniform>
     <shaderCode>
        uniform vec3  BrickColor, MortarColor;
        uniform vec2  BrickSize;
        uniform vec2  BrickPct;

        varying vec2  MCposition;
        varying float LightIntensity;

        void main(void)
        {
            vec3  color;
            vec2  position, useBrick;

            position = MCposition / BrickSize;

            if (fract(position.y * 0.5) > 0.5)
                position.x += 0.5;

            position = fract(position);

            useBrick = step(position, BrickPct);

            color  = mix(MortarColor, BrickColor, useBrick.x * useBrick.y);
            color *= LightIntensity;
            gl_FragColor = vec4 (color, 1.0);
        }
     </shaderCode>
  </fragmentShader>
</Program>
