##Builds Warranty Tool Graphical Plugin
import os, sys, string
import SConsAddons.Util as sca_util
import distutils.util
pj = os.path.join

host_type = distutils.util.get_platform()

Import( 'baseEnv ves_pkg buildDir RootDir gmtl_options vrjuggler_options osg_options poco_options' )
Import( 'osgal_options xerces_options vtk_options GetPlatform tao_options osgworks_options' )
Import('switchwire_options')

openDir = os.path.abspath( pj( RootDir, 'share', 'examples', 'dynamic_vehicle_sim_tool', 'GraphicalPlugin' ) )
sources = sca_util.getSourcesRecursive( openDir )
headers = sca_util.getHeadersRecursive( openDir )

lib_env = ves_pkg.getEnv().Clone()
lib_env.Append( LIBS = [ 'ves_open_xml',
                         'ves_xplorer',
                         'ves_xplorer_scenegraph',
                         'ves_xplorer_communication' ] )
lib_env.Append( LIBPATH = [ pj( '#', buildDir, 'src', 'ves', 'open', 'xml' ),
                            pj( '#', buildDir, 'src', 'ves', 'xplorer' ),
                            pj( '#', buildDir, 'src', 'ves', 'xplorer', 'scenegraph' ),
                            pj( '#', buildDir, 'src', 'ves', 'xplorer', 'communication' ) ] )
lib_env.Append( CPPPATH = [ pj( RootDir,'external','osgEphemeris','include' ) ] )
lib_env.Append( CPPDEFINES = [ 'VE_USER_PLUGIN_LIBRARY' ] )

gmtl_options.apply( lib_env )
vrjuggler_options.apply( lib_env )
osg_options.apply( lib_env )
xerces_options.apply( lib_env )
vtk_options.apply( lib_env )
poco_options.apply( lib_env )
tao_options.apply( lib_env )
osgworks_options.apply( lib_env )
if osgal_options.isAvailable():
   osgal_options.apply( lib_env )
   lib_env.Append( CPPDEFINES = [ 'VE_SOUND' ] )
switchwire_options.apply( lib_env )

if GetPlatform() == 'win32':
   lib_env['no_import_lib'] = 1
   lib_env['WINDOWS_INSERT_MANIFEST'] = False

lib = ves_pkg.createLoadableModule( 'DynamicVehicleSimToolGP', lib_env,
    installPrefix = pj( 'share', 'vesuite', 'examples', 'dynamic_vehicle_sim_tool', 'Plugins', 'GE', host_type ) )  

lib.addSources( sources )
lib.build()
