##Builds VE-PSI
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR xerces_options tao_options RootDir vpr_options buildDir GetPlatform')

srcs = Split("""
   VEPSI_i.cxx
   AspenPlus.cxx
   AspenDynamics.cxx
   DynSim.cxx
   CorbaUnitManager.cxx
   VE_PSI.cxx
   VE_PSIDlg.cxx
   AspenPlusLUT.cxx
   AspenDynamicsLUT.cxx
   AspenIconData.cxx
""")

headers = Split("""
   VEPSI_i.h
   AspenPlus.h
   AspenDynamics.h
   DynSim.h
   CorbaUnitManager.h
   VE_PSI.h
   VE_PSIDlg.h
   AspenPlusLUT.h
   AspenDynamicsLUT.h
   AspenIconData.h
""")

env = ves_pkg.getEnv().Clone()
env['MSVS_USE_MFC_DIRS'] = 1
#to get an mfc to work correctly it appears we need to remove
#optimization from the compile line
list = env.Dictionary( 'CCFLAGS' )

for item in list:
    if item == ['/O2']:
        list.remove( ['/O2'] )
    if item == ['/fp:fast']:
        list.remove( ['/fp:fast'] )
    if item == ['/O1']:
        list.remove( ['/O1'] )

env.Replace( CPPFLAGS = list )

env.Clone(WINDOWS_INSERT_DEF = 1)
env.Append( CPPDEFINES = ['WIN32'])
env.Append( CPPDEFINES = ['_WINDOWS'])
env.Append( CPPDEFINES = ['_AFXDLL'])
#env.Append( CPPDEFINES = ['_MBCS'])

#env.Append( CPPFLAGS = ['/Gy'])
#env.Append( CPPFLAGS = ['/GS'])
#env.Append( CPPFLAGS = ['/G7'])

env.Append( CPPPATH = [pj('#', 'src')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib','aspenplus_2006.5')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','AspenDynamicsInterface')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','DynSimUnit')] )
env.Append( CPPPATH = [pj('#', buildDir, 'src', 'ves', 'open')] )

env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','CASIlib')])
env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','AspenDynamicsInterface')])
env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open')])
env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open','xml')])
env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'ce', 'unitwrapper')])

env.Append(LIBS = ['CASIlib'])
env.Append(LIBS = ['AspenDynamicsInterface'])
env.Append(LIBS = ['ves_open_module'])
env.Append(LIBS = ['ves_open_xml'])
env.Append(LIBS = ['ves_ce_unitwrapper'])
env.Append(LIBS = ['gdiplus'])
env.Append(LIBS = ['odbc32.lib'])
env.Append(LIBS = ['odbccp32.lib'])

env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

#env.Append( RCFLAGS = ['/L 0x409'])

env.Depends('VE_PSI.rc','res/VE_PSI.ico')
ves_res=env.RES('VE_PSI.rc')
for res in ves_res:
  srcs.append(res)
  
xerces_options.apply( env )
tao_options.apply( env )
vpr_options.apply( env )

prog = ves_pkg.createProgram('ve_psi' + env["PROGSUFFIX"], env, 'bin')
prog.addSources( srcs )
prog.addHeaders( headers )
prog.build()
