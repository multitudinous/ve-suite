// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: happ.tlb

[
  uuid(8E567520-F9BA-11CF-90B2-0000C0A810C4),
  version(4.0),
  helpstring("Aspen Plus GUI 20.0 Type Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663657),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1142541512),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0361 at Thu Mar 16 15:38:31 2006"
)

]
library Happ
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IHNode;
    interface IHapp;
    interface IHSelection;
    interface IHAPEngine;
    interface IStream;
    interface ISequentialStream;
    interface IParentAdviseSink;
    interface IHAPLibRef;
    interface IEnumAModelLibrary;
    interface IHNodeCol;
    interface IScrollAreaInfo;
    interface IHPlotVal;
    interface IAPPDF;
    interface IHAPHandle;
    interface IAPropData;
    interface IAPPasteItems;
    interface IAPPasteItem;
    interface IHSelectionCallback;
    dispinterface IAPHappEvents;
    interface IHComposite;
    interface IHWizardPlot;
    interface IPersistStream;
    interface IPersist;
    interface IHAdhocPlot;
    interface IMMControlVerb;
    interface IHappServiceProvider;
    interface IAPConflict;
    interface IAPConflicts;
    interface IAPGroup;
    interface IAPPasteParam;
    interface IAPPasteParams;
    interface IAPPasteBuffer;
    interface IHNodeSelection;
    interface IHappConnectInfo;

	typedef enum {
        IAP_MOVETO_BLOCK = 0,
        IAP_MOVETO_CONVERGENCE = 1,
        IAP_MOVETO_SENSITIVITY = 2,
        IAP_MOVETO_CALCULATOR = 3,
        IAP_MOVETO_TRANSFER = 4,
        IAP_MOVETO_EQUIPMENT = 5,
        IAP_MOVETO_ECONOMIC = 6,
        IAP_MOVETO_UTILITY = 7,
        IAP_MOVETO_PRESRELIEF = 8,
        IAP_MOVETO_REGRESSION = 9,
        IAP_MOVETO_BALANCE = 10,
        IAP_MOVETO_START = 11,
        IAP_MOVETO_MEASUREMENT = 20
    } IAP_MOVETO_TYPE;

    typedef enum {
        IAP_PP1A = 0,
        IAP_PP1B = 1,
        IAP_PP2A = 2,
        IAP_PP2B = 3,
        IAP_PP2C = 4,
        IAP_INSERTLIB = 5,
        IAP_COST = 6,
        IAP_STREAMLIB = 7,
        IAP_RUNDEF = 8,
        IAP_LINKEROPT = 9
    } IAP_ENGINEFILES;

    typedef enum {
        IAP_RUN_EXPRESS = 0,
        IAP_RUN_INTERTACTIVE = 1,
        IAP_RUN_MUSTBECOMPLETE = 2,
        IAP_RUN_COPY_DRS_PCES = 3,
        IAP_RUN_COPY_DRS = 4,
        IAP_RUN_COPY_PCES = 5,
        IAP_RUN_COPY_RETRIEVED = 6
    } IAP_RUN_OPTION;

    typedef enum {
        IAP_STOPPOINT_BLOCK = 1,
        IAP_STOPPOINT_CONVERGENCE = 2,
        IAP_STOPPOINT_SENSITIVITY = 3,
        IAP_STOPPOINT_CALCULATOR = 4,
        IAP_STOPPOINT_TRANSFER = 5,
        IAP_STOPPOINT_EQUIPMENT = 6,
        IAP_STOPPOINT_ECONOMIC = 7,
        IAP_STOPPOINT_UTILITY = 8,
        IAP_STOPPOINT_PRESRELIEF = 9,
        IAP_STOPPOINT_REGRESSION = 10,
        IAP_STOPPOINT_BALANCE = 11
    } IAP_STOPPOINT_TYPE;

    typedef enum {
        IAP_REINIT_SIMULATION = 4,
        IAP_REINIT_BLOCK = 1,
        IAP_REINIT_CONVERGENCE = 2,
        IAP_REINIT_STREAM = 3
    } IAP_REINIT_TYPE;

    typedef enum {
        HAP_REPORT_INTERACTIVE = 0,
        HAP_REPORT_BLOCK = 1,
        HAP_REPORT_CONVERGENCE = 2,
        HAP_REPORT_COST = 3,
        HAP_REPORT_ECONOMIC = 4,
        HAP_REPORT_SENSITIVITY = 5,
        HAP_REPORT_TRANSFER = 6,
        HAP_REPORT_CALCULATOR = 7,
        HAP_REPORT_UTILITY = 8,
        HAP_REPORT_STREAMS = 9,
        HAP_REPORT_BALANCE = 10,
        HAP_REPORT_PRES_RELIEF = 11,
        HAP_REPORT_REGRESSION = 12,
        HAP_REPORT_REPORT = 13,
        HAP_REPORT_TOC = 14,
        HAP_REPORT_FLOWSHEET_BALANCE = 15,
        HAP_REPORT_PROP_TABLE = 16,
        HAP_REPORT_DESIGN_SPEC = 17,
        HAP_REPORT_CONNECTING_STREAMS = 18,
        HAP_REPORT_CONSTRAINT = 19,
        HAP_REPORT_OPTIMIZATION = 20
    } HAPReportType;

	typedef enum {
        HAP_VALUE = 0,
        HAP_RESERVED1 = 1,
        HAP_UNITROW = 2,
        HAP_UNITCOL = 3,
        HAP_RESERVED2 = 4,
        HAP_OPTIONLIST = 5,
        HAP_RECORDTYPE = 6,
        HAP_ENTERABLE = 7,
        HAP_UPPERLIMIT = 8,
        HAP_LOWERLIMIT = 9,
        HAP_VALUEDEFAULT = 10,
        HAP_USERENTERED = 11,
        HAP_COMPSTATUS = 12,
        HAP_BASIS = 13,
        HAP_INOUT = 14,
        HAP_PORTSEX = 15,
        HAP_MULTIPORT = 16,
        HAP_PORTTYPE = 17,
        HAP_OUTVAR = 18,
        HAP_PROMPT = 19,
        HAP_PRETENDNOTENTERED = 20,
        HAP_HELPFILENAME = 21,
        HAP_HELPID = 22,
        HAP_FIRSTPAIR = 23,
        HAP_NODENAME = 24,
        HAP_METHOD = 25,
        HAP_MARKED = 26,
        HAP_VOLATILE = 27,
        HAP_SECTION = 28,
        HAP_DEFNAME = 29,
        HAP_CANADD = 30,
        HAP_CANDELETE = 31,
        HAP_CANRENAME = 32,
        HAP_CANHIDE = 33,
        HAP_CANREVEAL = 34,
        HAP_CANCLEAR = 35,
        HAP_CANCOPY = 36,
        HAP_CANPASTE = 37,
        HAP_HASCHILDREN = 38,
        HAP_PLOTLABEL = 39,
        HAP_BIRDCAGE = 40,
        HAP_STREAMCLASS = 42,
        HAP_HASCOMMENTS = 43,
        HAP_CANHAVECOMMENTS = 44,
        HAP_UNDERLYINGPATH = 45,
        HAP_ISHIDDEN = 47,
        HAP_HIDEVIEW = 48,
        HAP_ANALYSISFLAG = 49,
        HAP_SPECSTREAM = 50,
        HAP_REORDER = 51,
        HAP_ISREALSYMBOL = 52,
        HAP_CANEXPORT = 58,
        HAP_BASETYPE = 59,
        HAP_HIERARCHYFLAG = 63,
        HAP_HIERPATH = 64,
        HAP_FULLNAME = 65,
        HAP_CANTEMPLAPPEND = 66,
        HAP_ACTIVATESTATE = 67,
        HAP_CANIMPORT = 68,
        HAP_HASEOMSG = 69,
        HAP_SHOWEOMSG = 70,
        HAP_EOEXPORT = 72,
        HAP_EOIMPORT = 73,
        HAP_NAVPATH = 74,
        HAP_HIERNAME = 76,
        HAP_REVEALLIST = 77,
        HAP_DEFRECONCILE = 78,
        HAP_EONODENAME = 79,
        HAP_UOM = 81,
        HAP_UOMSET = 82
    } HAPAttributeNumber;

    typedef enum {
        HAP_RESULTS_SUCCESS = 1,
        HAP_NORESULTS = 2,
        HAP_RESULTS_WARNINGS = 4,
        HAP_RESULTS_INACCESS = 8,
        HAP_RESULTS_INCOMPAT = 16,
        HAP_RESULTS_ERRORS = 32,
        HAP_INPUT_INCOMPLETE = 64,
        HAP_INPUT_COMPLETE = 128,
        HAP_INPUT_INACCESS = 256,
        HAP_INPUT_NEUTRAL = 512,
        HAP_UNRECONCILED = 1024,
        HAP_RECONCILED = 2048,
        HAP_DISABLED = 4096,
        HAP_ENABLED = 8192,
        HAP_EOSYNC = 16384,
        HAP_EODISABLE = 32768,
        HAP_EOFAIL = 0x00010000,
        HAP_EOERROR = 0x00020000
    } HAPCompStatusCode;

    typedef enum {
        HAP_SPECIAL_ANALYSIS = 0,
        HAP_SPECIAL_PURE = 1,
        HAP_SPECIAL_UNIGROUP = 2,
        HAP_SPECIAL_PSD = 3,
        HAP_SPECIAL_SUBOBJECT = 4,
        HAP_SPECIAL_STREAM = 5
    } HAPSpecialNodeType;
    
	    typedef enum {
        HAPEXP_USRDEF = 0,
        HAPEXP_BACKUP = 1,
        HAPEXP_REPORT = 2,
        HAPEXP_SUMMARY = 3,
        HAPEXP_INPUT = 4,
        HAPEXP_INPUT_GRAPHICS = 5,
        HAPEXP_RUNMSG = 6,
        HAPEXP_REPORT_INPUT = 7,
        HAPEXP_REPORT_SUMMARY = 8,
        HAPEXP_FLOWDYN = 9,
        HAPEXP_PDYN = 10,
        HAPEXP_DXF = 11,
        HAPEXP_SUMXML = 12,
        HAPEXP_HISTORY = 13,
        HAPEXP_PFS = 14,
        HAPEXP_PDF = 15,
        HAPEXP_EOATSLV = 16,
        HAPEXP_EOATACT = 17
    } HAPEXPType;

		typedef struct tagLARGE_INTEGER {
                
int64 QuadPart;
    } LARGE_INTEGER;

    typedef struct tagULARGE_INTEGER {
                
uint64 QuadPart;
    } ULARGE_INTEGER;
	
	

    typedef struct tagFILETIME {
                
unsigned long dwLowDateTime;
                
unsigned long dwHighDateTime;
    } FILETIME;

	typedef [uuid(24B82EB0-4A1F-11D1-8A70-0000C0237DF9), helpstring("Anotation Text for the plot.")]
    struct tagPLOTTEXT {
                
double x;
                
double y;
                
BSTR text;
                
long color;
                
BSTR fontname;
                
short alignment;
                
short size;
                
short style;
                
short pad;
    } PLOTTEXT;

	[
      odl,
      uuid(8E567522-F9BA-11CF-90B2-0000C0A810C4),
      helpstring("Node object for the Aspen Plus GUI data."),
      dual,
      oleautomation
    ]
    interface IHNode : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application of the object.")]
        HRESULT Application([out, retval] IHapp** retval);
        [id(0x60020001), propget, helpstring("Returns the creator of the object.")]
        HRESULT Parent([out, retval] IHapp** retval);
        [id(0x60020002), propget, helpstring("Returns the name of the object (force argument is unused).")]
        HRESULT Name(
                        [in, optional] VARIANT force, 
                        [out, retval] BSTR* Name);
        [id(0x60020002), propput, helpstring("Returns the name of the object (force argument is unused).")]
        HRESULT Name(
                        [in, optional] VARIANT force, 
                        [in] BSTR Name);
        [id(0x60020004), propget, helpstring("Return the number of dimensions in the directory (0 for scalar).")]
        HRESULT Dimension([out, retval] long* Dimension);
        [id(0x60020005), propget, helpstring("Get type of value attribute (0=not defined, 1=int, 2=real, 3=string, 4=node, 5=memory block).")]
        HRESULT ValueType([out, retval] short* type);
        [id(0x60020006), propget, helpstring("Get the value attribute of the object.")]
        HRESULT Value(
                        [in, optional] VARIANT force, 
                        [out, retval] VARIANT* Value);
        [id(0x60020006), propput, helpstring("Get the value attribute of the object.")]
        HRESULT Value(
                        [in, optional] VARIANT force, 
                        [in] VARIANT Value);
        [id(0x60020008), helpstring("Store the value attribute and the UOM attribute of the object simultaneously.")]
        HRESULT SetValueAndUnit(
                        [in] VARIANT Value, 
                        [in] short unitcol, 
                        [in, optional] VARIANT force);
        [id(0x60020009), helpstring("Store the value attribute, the UOM attribute, and the basis for the object simultaneously.")]
        HRESULT SetValueUnitAndBasis(
                        [in] VARIANT Value, 
                        [in] short unitcol, 
                        [in] BSTR basis, 
                        [in, optional] VARIANT force);
        [id(0x6002000a), propget, helpstring("Checks whether attribute is defined for attrnum (see HAPAttributeNumber for possible values).")]
        HRESULT HasAttribute(
                        [in] short attrnumber, 
                        [out, retval] VARIANT_BOOL* hasattr);
        [id(0x6002000b), propget, helpstring("Get type of attribute (0=not defined, 1=long integer, 2=real, 3=string, 4=node, 5=memory block) for attrnum (see HAPAttributeNumber for possible values).")]
        HRESULT AttributeType(
                        [in] short attrnumber, 
                        [out, retval] short* type);
        [id(0x6002000c), propget, helpstring("Get the value of the attribute for attrnum(see HAPAttributeNumber for possible values).")]
        HRESULT AttributeValue(
                        [in] short attrnumber, 
                        [in, optional] VARIANT force, 
                        [out, retval] VARIANT* Value);
        [id(0x6002000c), propput, helpstring("Get the value of the attribute for attrnum(see HAPAttributeNumber for possible values).")]
        HRESULT AttributeValue(
                        [in] short attrnumber, 
                        [in, optional] VARIANT force, 
                        [in] VARIANT Value);
        [id(0x6002000e), propget, helpstring("Checks existence of class attribute.")]
        HRESULT HasClassAttribute(
                        [in] BSTR classid, 
                        [out, retval] VARIANT_BOOL* hasattr);
        [id(0x6002000f), propget, helpstring("Get type of class attribute (0=not defined, 1=int, 2=real, 3=string, 4=node, 5=memory block).")]
        HRESULT ClassAttributeType(
                        [in] BSTR classid, 
                        [out, retval] short* type);
        [id(0x60020010), propget, helpstring("Get the value of the class attribute.")]
        HRESULT ClassAttributeValue(
                        [in] BSTR classid, 
                        [in, optional] VARIANT force, 
                        [out, retval] VARIANT* Value);
        [id(0x60020010), propput, helpstring("Get the value of the class attribute.")]
        HRESULT ClassAttributeValue(
                        [in] BSTR classid, 
                        [in, optional] VARIANT force, 
                        [in] VARIANT Value);
        [id(0x60020012), propget, helpstring("Return elements collection.")]
        HRESULT Elements([out, retval] IHNodeCol** retval);
        [id(0x60020013), propget, restricted, helpstring("Returns a process identifier for the application containing the node.")]
        HRESULT Process([out, retval] long* lpid);
        [id(0x60020014), helpstring("Delete element.")]
        HRESULT Delete();
        [id(0x60020015), helpstring("Remove all elements.")]
        HRESULT RemoveAll();
        [id(0x60020016), helpstring("Add a new class attribute of specified type (1=int, 2=real, 3=string, 4=node, 5=memory block).")]
        HRESULT AddClassAttribute(
                        [in] BSTR classid, 
                        [in] short type);
        [id(0x60020017), helpstring("Delete a class attribute for the object.")]
        HRESULT DeleteClassAttribute([in] BSTR classid);
        [id(0x60020018), restricted, helpstring("Place value on clipboard. Obsolete!!!")]
        HRESULT Copy();
        [id(0x60020019), restricted, helpstring("Place value with customized format on clipboard. Obsolete!!!")]
        HRESULT CopyWithFormat();
        [id(0x6002001a), helpstring("Print information about the node to a file. The append = 0 creates a new file, append = 1 appends to an existing file.")]
        HRESULT PrintUseful(
                        [in] short append, 
                        [in] BSTR filename);
        [id(0x6002001b), helpstring("Navigate to a different node.")]
        HRESULT FindNode(
                        [in] BSTR path, 
                        [out, retval] IHNode** retval);
        [id(0x6002001c), restricted, helpstring("Paste clipboard contents into node. Obsolete!!!")]
        HRESULT Paste([out, retval] VARIANT_BOOL* succeeded);
        [id(0x6002001d), restricted, helpstring("Paste clipboard contents into node in special format. Obsolete!!!")]
        HRESULT PasteSpecial([out, retval] VARIANT_BOOL* succeeded);
        [id(0x6002001e), restricted, helpstring("Is the node linked to an external data source? Obsolete!!!")]
        HRESULT IsLinked([out, retval] VARIANT_BOOL* IsLinked);
        [id(0x6002001f), restricted, helpstring("Remove link to external data source on node. Obsolete!!!")]
        HRESULT RemoveLink();
        [id(0x60020020), helpstring("Return the path to the next node that is not complete.")]
        HRESULT NextIncomplete(
                        [out, optional] VARIANT* code, 
                        [out, retval] BSTR* path);
        [id(0x60020021), helpstring("Return the path to the next node with data of interest, direction: 0 = forward, 1 = back, io 0 = input data, 1 = results data.")]
        HRESULT BrowseNext(
                        [in] short direction, 
                        [in] short io, 
                        [out, retval] BSTR* path);
        [id(0x60020022), restricted]
        HRESULT Dummy(
                        [in] HAPAttributeNumber __MIDL_0010, 
                        [in] HAPCompStatusCode __MIDL_0011);
        [id(0x60020023), helpstring("Hide the specified child node.")]
        HRESULT Hide([in] BSTR Name);
        [id(0x60020024), helpstring("Reveal hidden children of the node.")]
        HRESULT Reveal([in, optional, defaultvalue("")] BSTR Name);
        [id(0x60020025), helpstring("Clear contents of the node.")]
        HRESULT Clear();
        [id(0x60020026), restricted, helpstring("Notify node that a step has been completed.")]
        HRESULT NotifyRunStep();
        [id(0x60020027), hidden, helpstring("Delay notification for a series of related put attribute values.")]
        HRESULT HoldNotifies([in] VARIANT_BOOL hold);
        [id(0x60020028), hidden, helpstring("Does the node hold a valid connection to the data?")]
        HRESULT IsValid([out, retval] VARIANT_BOOL* valid);
        [id(0x60020029), helpstring("Create new child of the node via dialog box.")]
        HRESULT NewChild([in, out] BSTR* Name);
        [id(0x6002002a), helpstring("Rename child of the node via dialog box.")]
        HRESULT RenameChild([in, out] BSTR* Name);
        [id(0x6002002b), restricted, helpstring("Test whether the node is a specific node type.")]
        HRESULT IsSpecialType(
                        [in] HAPSpecialNodeType type, 
                        [out, retval] VARIANT_BOOL* istype);
        [id(0x6002002c), restricted, helpstring("Attempt to reaquire a valid connection to the data.")]
        HRESULT Reaquire();
        [id(0x6002002d), propget, helpstring("Returns the unit of the object.")]
        HRESULT UnitString([out, retval] BSTR* unit);
        [id(0x6002002e), propget, helpstring("Get the value attribute of the object in specified unit.")]
        HRESULT ValueForUnit(
                        [in] short unitrow, 
                        [in] short unitcol, 
                        [out, retval] VARIANT* Value);
        [id(0x6002002f), hidden, helpstring("If node is a block or stream, add the model to the current selection in the active PFS view.")]
        HRESULT PFSSelectModel();
        [id(0x60020030), hidden, helpstring("Deselect the currently selected model(s) in the active PFS view.")]
        HRESULT PFSClearSelection();
        [id(0x60020031), helpstring("Reconcile inputs with results (see HAPP_RECONCILE_CODE for flags for code). for which variables to reconcile for streams.")]
        HRESULT Reconcile([in] long code);
        [id(0x60020032), helpstring("Create new ID of the node via dialog box.")]
        HRESULT NewID([in, out] BSTR* Name);
        [id(0x60020033), helpstring("Export contents of node to file in backup format.")]
        HRESULT Export([in, optional, defaultvalue("")] BSTR filename);
        [id(0x60020034), hidden, helpstring("Do verb action for an ole object that is associated with the node.")]
        HRESULT DoObjectVerb(
                        [in] long oleverb, 
                        [out, retval] short* succeeded);
        [id(0x60020035), restricted, helpstring("Append node to existing multiblock template.")]
        HRESULT AppendTemplate(
                        [in] IUnknown* pUnkTempl, 
                        [in, optional] VARIANT flag);
        [id(0x60020036), hidden, helpstring("Load file in backup format into a node.")]
        HRESULT Import([in, optional, defaultvalue("")] BSTR filename);
    };

    [
      odl,
      uuid(8E567521-F9BA-11CF-90B2-0000C0A810C4),
      helpstring("Application object for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHapp : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application of the object.")]
        HRESULT Application([out, retval] IHapp** retval);
        [id(0x60020001), propget, helpstring("Returns the creator of the object.")]
        HRESULT Parent([out, retval] IHapp** retval);
        [id(0x60020002), propget, helpstring("Returns the full name of the application.")]
        HRESULT FullName([out, retval] BSTR* retval);
        [id(00000000), propget, helpstring("Returns the name of the application.")]
        HRESULT Name([out, retval] BSTR* retval);
        [id(0x60020004), propget, helpstring("Returns the visible state of the application.")]
        HRESULT Visible([out, retval] VARIANT_BOOL* retval);
        [id(0x60020004), propput, helpstring("Returns the visible state of the application.")]
        HRESULT Visible([in] VARIANT_BOOL retval);
        [id(0x60020006), propget, hidden, helpstring("Deprecated, use New3.")]
        HRESULT New(
                        [in, optional] VARIANT filename, 
                        [out, retval] IHapp** retval);
        [id(0x60020007), hidden, helpstring("Deprecated, use Restore2")]
        HRESULT Restore([in] BSTR filename);
        [id(0x60020008), hidden, helpstring("Deprecated, use InitNew2.")]
        HRESULT InitNew(
                        [in, optional] VARIANT filename, 
                        [in, optional] VARIANT overwrite);
        [id(0x60020009), hidden, helpstring("Deprecated, use InitFromFile2.")]
        HRESULT InitFromFile(
                        [in] BSTR* filename, 
                        [in, optional] VARIANT readonly);
        [id(0x6002000a), hidden, helpstring("Deprecated, use InitFromArchive2.")]
        HRESULT InitFromArchive([in] BSTR* filename);
        [id(0x6002000b), propget, helpstring("Get top node of file.")]
        HRESULT Tree([out, retval] IHNode** retval);
        [id(0x6002000c), helpstring("Saves current file.")]
        HRESULT Save();
        [id(0x6002000d), helpstring("Saves current file under new name.")]
        HRESULT SaveAs(
                        [in] BSTR* filename, 
                        [in, optional] VARIANT overwrite);
        [id(0x6002000e), hidden, helpstring("Deprecated, use WriteArchive2.")]
        HRESULT WriteArchive([in] BSTR* filename);
        [id(0x6002000f), hidden, helpstring("Deprecated, use Run2.")]
        HRESULT Run();
        [id(0x60020010), helpstring("Closes the in-process automation server and releases resources. Do not use for LocalServer.")]
        HRESULT Close([in, optional] VARIANT reserved);
        [id(0x60020011), propget, helpstring("Select node visually.")]
        HRESULT Choose(
                        [in, out] short* flag, 
                        [out, retval] IHNode** retval);
        [id(0x60020012), helpstring("Create and return a new selection buffer.")]
        HRESULT NewSelection(
                        [in] BSTR Key, 
                        [out, retval] IHSelection** buffer);
        [id(0x60020013), propget, helpstring("Retrieve a selection buffer.")]
        HRESULT Selection(
                        [in] BSTR Key, 
                        [out, retval] IHSelection** buffer);
        [id(0x60020014), helpstring("Delete a selection buffer.")]
        HRESULT DeleteSelection([in] BSTR Key);
        [id(0x60020015), helpstring("Save a selection buffer.")]
        HRESULT SaveSelection([in] BSTR Key);
        [id(0x60020016), helpstring("Reinitialize the simulation case.")]
        HRESULT Reinit();
        [id(0x60020017), hidden, helpstring("Deprecated, use InitFromTemplate2.")]
        HRESULT InitFromTemplate([in] BSTR* filename);
        [id(0x60020018), helpstring("Creates a Route-Tree")]
        HRESULT CreateRouteTree(
                        [in] BSTR* propname, 
                        [in] BSTR* routeid, 
                        [in] BSTR* opsetid, 
                        [in] short flag, 
                        [out, retval] IHNode** retval);
        [id(0x60020019), propget, restricted, helpstring("Creates a new (separate process) application with an asynchronous load.")]
        HRESULT NewAsync(
                        [in, optional] VARIANT filename, 
                        [out, retval] IHapp** retval);
        [id(0x6002001a), restricted, helpstring("Sets asyncronous creation.")]
        HRESULT SetAsync();
        [id(0x6002001b), propget, helpstring("Return the interface to the simulation engine.")]
        HRESULT Engine([out, retval] IHAPEngine** retval);
        [id(0x6002001c), helpstring("Save OLE links to the stream, format 0 - apw, 1 - bkp")]
        HRESULT SaveLink(
                        [in] IStream* pStrm, 
                        [in] long format);
        [id(0x6002001d), helpstring("Load OLE links from the stream, format 0 - apw, 1 - bkp")]
        HRESULT LoadLink(
                        [in] IStream* pStrm, 
                        [in] long format);
        [id(0x6002001e), restricted, helpstring("Refresh results for exported links.")]
        HRESULT RefreshExportedLinks();
        [id(0x6002001f), helpstring("Activate the application.")]
        HRESULT Activate();
        [id(0x60020020), helpstring("Sets the application compatability flag")]
        HRESULT SetCompat([in] int flag);
        [id(0x00000001), helpstring("method Reconcile")]
        HRESULT Reconcile([in] long code);
        [id(0x60020022), helpstring("method AdviseParent")]
        HRESULT AdviseParent(
                        long dAdviseType, 
                        long lParam);
        [id(0x60020023), propget, restricted, helpstring("Creates a new (separate process) application, synchronous or asynchronous.")]
        HRESULT New2(
                        [in, optional] VARIANT filename, 
                        [in, optional, defaultvalue(0)] long bSync, 
                        [out, retval] IHapp** retval);
        [id(0x60020024), helpstring("Generates an Input Summary")]
        HRESULT Generate(
                        [in] BSTR filename, 
                        [in, optional, defaultvalue(0)] int mode);
        [id(0x60020025), helpstring("Reads results from a summary file")]
        HRESULT Readback(
                        [in] BSTR filename, 
                        [in, optional, defaultvalue(0)] int mode);
        [id(0x60020026), helpstring("Sets the parent of the object")]
        HRESULT SetParent(
                        [in] IParentAdviseSink* pParentAdviseSink, 
                        [in] long dwCookie);
        [id(0x60020027), helpstring("Exports a archive file.")]
        HRESULT WriteArchive2(
                        [in] BSTR* filename, 
                        [in] long bSaveChildren);
        [id(0x60020028), propget, helpstring("Creates a new (separate process) application.")]
        HRESULT New3(
                        [in, optional] VARIANT filename, 
                        [in, optional] VARIANT host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [in, optional] VARIANT failmode, 
                        [out, retval] IHapp** retval);
        [id(0x60020029), propget, helpstring("Restores, or merges, an archive file into the current problem.")]
        HRESULT Restore2(
                        [in] BSTR filename, 
                        [out, retval] VARIANT* vRes);
        [id(0x6002002a), helpstring("Initializes a new, untitled tree.")]
        HRESULT InitNew2(
                        [in, optional] VARIANT notused, 
                        [in, optional] VARIANT notused2, 
                        [in, optional] VARIANT host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [in, optional] VARIANT failmode);
        [id(0x6002002b), helpstring("Opens a file and initializes.")]
        HRESULT InitFromFile2(
                        [in] BSTR* filename, 
                        [in, optional] VARIANT readonly, 
                        [in, optional] VARIANT host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [in, optional] VARIANT failmode);
        [id(0x6002002c), helpstring("Opens an archive and initializes.")]
        HRESULT InitFromArchive2(
                        [in] BSTR* filename, 
                        [in, optional] VARIANT host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [in, optional] VARIANT failmode);
        [id(0x6002002d), helpstring("Run the simulation case. If async = TRUE run asynchronously (default is FALSE)")]
        HRESULT Run2([in, optional] VARIANT async);
        [id(0x6002002e), helpstring("Opens an template and initializes.")]
        HRESULT InitFromTemplate2(
                        [in] BSTR* filename, 
                        [in, optional] VARIANT host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [in, optional] VARIANT failmode);
        [id(0x6002002f), propget, helpstring("Get the Library References Interface")]
        HRESULT LibRef([out, retval] IHAPLibRef** LibRef);
        [id(0x60020030), propget, helpstring("When set causes message boxes and dialogs to not be shown and a default choide selected. Use the OnDialogSuppressed event for notification.")]
        HRESULT SuppressDialogs([out, retval] long* bSuppress);
        [id(0x60020030), propput, helpstring("When set causes message boxes and dialogs to not be shown and a default choide selected. Use the OnDialogSuppressed event for notification.")]
        HRESULT SuppressDialogs([in] long bSuppress);
        [id(0x60020032), helpstring("Exports file(s) of specified type(s).")]
        HRESULT Export(
                        [in] HAPEXPType reptype, 
                        [in] BSTR filename);
        [id(0x60020033), helpstring("Disable UI menu item, where key is Menu/Item.  Example: File/Save")]
        HRESULT UIDisable([in] BSTR Key);
        [id(0x60020034), propget, helpstring("Return the interface to the engine's IASCSimulation object.")]
        HRESULT EngineSimulation([out, retval] IUnknown** retval);
        [id(0x60020035), propget, helpstring("Return the interface to the engine's IAPServer object.")]
        HRESULT EngineServer([out, retval] IUnknown** retval);
        [id(0x60020036), helpstring("Initializes a from an XML string passed in as the only argument.")]
        HRESULT InitFromXML([in] BSTR argument);
    };

    [
      odl,
      uuid(71F9FD70-9ED4-11D0-9475-0000C07972E4),
      helpstring("Selection buffer for ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHSelection : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application of the object.")]
        HRESULT Application([out, retval] IHapp** retval);
        [id(0x60020001), propget, helpstring("Returns the creator of the object.")]
        HRESULT Parent([out, retval] IHapp** retval);
        [id(0x60020002), propget, helpstring("Returns total number of objects in collection.")]
        HRESULT Count([out, retval] long* len);
        [id(00000000), propget, helpstring("Retrieve the element of the selection buffer at name or location.")]
        HRESULT Item(
                        [in] VARIANT loc_or_name, 
                        [out, retval] VARIANT* Item);
        [id(0x60020004), propget, helpstring("Retrieve the type: 0 = ihnode, 1 = selection buffer, of the item at name or location.")]
        HRESULT ItemType(
                        [in] VARIANT loc_or_name, 
                        [out, retval] short* type);
        [id(0x60020005), propget, helpstring("Returns the key (uuid) as a string for the selection buffer.")]
        HRESULT Key([out, retval] BSTR* keystring);
        [id(0x60020006), propget, helpstring("Returns the label, or name, for a specific location.")]
        HRESULT Label(
                        [in] long location, 
                        [out, retval] BSTR* Label);
        [id(0x60020006), propput, helpstring("Returns the label, or name, for a specific location.")]
        HRESULT Label(
                        [in] long location, 
                        [in] BSTR Label);
        [id(0x60020008), helpstring("Add an item of type: 0 = ihnode, 1 = selection buffer, to buffer at name or location. A location of -1 appends the item.")]
        HRESULT Add(
                        [in] VARIANT loc_or_name, 
                        [in] short type, 
                        [in] VARIANT Item, 
                        [in] IDispatch* owner, 
                        [in, optional] VARIANT scrollarea, 
                        [in, optional] VARIANT row, 
                        [in, optional] VARIANT col, 
                        [in, optional] VARIANT index, 
                        [in, optional] VARIANT xtwip, 
                        [in, optional] VARIANT ytwip);
        [id(0x60020009), helpstring("Clear the selection buffer.")]
        HRESULT Clear();
        [id(0x6002000a), helpstring("Removes the element at location or name.")]
        HRESULT Remove([in] VARIANT loc_or_name);
        [id(0x6002000b), helpstring("Returns whether an object is in the selection buffer.")]
        HRESULT Find(
                        [in] VARIANT object, 
                        [out, retval] VARIANT_BOOL* retval);
        [id(0x6002000c), helpstring("Place value on clipboard.")]
        HRESULT Copy();
        [id(0x6002000d), helpstring("Place value with customized format on clipboard.")]
        HRESULT CopyWithFormat();
        [id(0x6002000e), helpstring("Paste contents of clipboard into contents of selection buffer.")]
        HRESULT Paste([out, retval] VARIANT_BOOL* succeeded);
        [id(0x6002000f), helpstring("Do a Paste Special into contents of selection buffer.")]
        HRESULT PasteSpecial(
                        [in, optional] VARIANT format, 
                        [in, optional] VARIANT link, 
                        [out, retval] VARIANT_BOOL* succeeded);
        [id(0x60020010), helpstring("Lock the selection buffer (disables Add, Removem and Clear).")]
        HRESULT Lock([in] VARIANT_BOOL fLock);
        [id(0x60020011), helpstring("Removes elements that owned by the specified object.")]
        HRESULT ClearOwned([in] IDispatch* owner);
        [id(0x60020012), helpstring("Check if the selection buffer is printable")]
        HRESULT CanPrint([out, retval] VARIANT_BOOL* print);
        [id(0x60020013), helpstring("Prepare for printing")]
        HRESULT PreparePrinting([out, retval] VARIANT* hglb);
    };

    [
      odl,
      uuid(472C18A0-2603-11D1-9B33-0000C07EE8F2),
      helpstring("Interface to ASPEN PLUS simulation engine."),
      dual,
      oleautomation
    ]
    interface IHAPEngine : IDispatch {
        [id(0x60020000), propget, helpstring("Is Run Control visible?")]
        HRESULT RunControl([out, retval] VARIANT_BOOL* retval);
        [id(0x60020000), propput, helpstring("Is Run Control visible?")]
        HRESULT RunControl([in] VARIANT_BOOL retval);
        [id(0x60020002), propget, helpstring("Is control panel visible?")]
        HRESULT ControlPanel([out, retval] VARIANT_BOOL* retval);
        [id(0x60020002), propput, helpstring("Is control panel visible?")]
        HRESULT ControlPanel([in] VARIANT_BOOL retval);
        [id(0x60020004), propget, helpstring("Is current problem ready to run?")]
        HRESULT Ready([out, retval] VARIANT_BOOL* retval);
        [id(0x60020005), hidden, helpstring("Deprecated, use Run2.")]
        HRESULT Run();
        [id(0x60020006), helpstring("Perform single simulation step.")]
        HRESULT Step();
        [id(0x60020007), helpstring("Stop simulation run.")]
        HRESULT Stop();
        [id(0x60020008), helpstring("Reinitialize all or portion of simulation (if object_type is used it must be an IAP_REINIT_TYPE.)")]
        HRESULT Reinit(
                        [in, optional] VARIANT object_type, 
                        [in, optional] VARIANT object_id);
        [id(0x60020009), helpstring("Move current simulation step to object or beginning of sequence.")]
        HRESULT MoveTo(
                        [in] IAP_MOVETO_TYPE object_type, 
                        [in, optional] VARIANT object_id);
        [id(0x6002000a), helpstring("Show the Connection dialog.")]
        HRESULT ConnectionDialog();
        [id(0x6002000b), helpstring("Connect to host specified by host_type (0-based index of available host types).")]
        HRESULT Host(
                        [in] int host_type, 
                        [in, optional] VARIANT node, 
                        [in, optional] VARIANT username, 
                        [in, optional] VARIANT password, 
                        [in, optional] VARIANT working_directory, 
                        [out, retval] VARIANT_BOOL* succeeded);
        [id(0x6002000c), propget, helpstring("Returns the number of host types available to connect to.")]
        HRESULT HostCount([out, retval] int* Count);
        [id(0x6002000d), helpstring("Returns a description for the host type specified by the host_type index (0-based).")]
        HRESULT HostDescription(
                        [in] int host_type, 
                        [out, retval] BSTR* description);
        [id(0x6002000e), helpstring("Show the Run Settings dialog.")]
        HRESULT RunSettings();
        [id(0x6002000f), propget, helpstring("Retrieve setting for engine files.")]
        HRESULT EngineFilesSettings(
                        [in] IAP_ENGINEFILES file, 
                        [out, retval] BSTR* filename);
        [id(0x6002000f), propput, helpstring("Retrieve setting for engine files.")]
        HRESULT EngineFilesSettings(
                        [in] IAP_ENGINEFILES file, 
                        [in] BSTR filename);
        [id(0x60020011), propget, helpstring("Retrieve setting for simulation run options.")]
        HRESULT OptionSettings(
                        [in] IAP_RUN_OPTION type, 
                        [out, retval] VARIANT_BOOL* retval);
        [id(0x60020011), propput, helpstring("Retrieve setting for simulation run options.")]
        HRESULT OptionSettings(
                        [in] IAP_RUN_OPTION type, 
                        [in] VARIANT_BOOL retval);
        [id(0x60020013), helpstring("Show the Stop Points dialog.")]
        HRESULT StopPoints();
        [id(0x60020014), propget, helpstring("How many stop points are set?")]
        HRESULT StopPointCount([out, retval] long* Count);
        [id(0x60020015), helpstring("Retrieve information about a stop point, index: 1-based index of stop point before_or_after: 1 = before , 2 = after.")]
        HRESULT GetStopPoint(
                        [in] long index, 
                        [out] IAP_STOPPOINT_TYPE* type, 
                        [out] BSTR* object_id, 
                        [out] int* before_or_after);
        [id(0x60020016), helpstring("Add a stop point, before_or_after: 1 = before , 2 = after.")]
        HRESULT AddStopPoint(
                        [in] IAP_STOPPOINT_TYPE type, 
                        [in] BSTR object_id, 
                        [in] int before_or_after);
        [id(0x60020017), helpstring("Delete stop point based on 1-based index.")]
        HRESULT DeleteStopPoint([in] long index);
        [id(0x60020018), helpstring("Clear all stop points.")]
        HRESULT ClearStopPoints();
        [id(0x60020019), restricted]
        HRESULT Dummy([in] IAP_REINIT_TYPE rtype);
        [id(0x6002001a), propget, helpstring("Is the simulation problem run currently executing on the calculation engine?")]
        HRESULT IsRunning([out, retval] VARIANT_BOOL* bRunning);
        [id(0x6002001b), helpstring("Run simulation problem. If async = TRUE run asynchronously (default is FALSE)")]
        HRESULT Run2([in, optional] VARIANT async);
        [id(0x6002001c), hidden, helpstring("Process simulation problem.")]
        HRESULT ProcessInput();
        [id(0x6002001d), helpstring("Export a report file.")]
        HRESULT ExportReport(
                        [in] BSTR filename, 
                        [in] HAPReportType contents, 
                        [in, optional] VARIANT object_id);
        [id(0x6002001e), helpstring("Synchronizes EO problem with SM problem.")]
        HRESULT SynchronizeEO([in, optional] VARIANT reserved);
        [id(0x6002001f), helpstring("Reinitializes the EO problem.")]
        HRESULT ReinitializeEO([in, optional] VARIANT reserved);
    };
	
	
    

    [
      odl,
      uuid(503FD631-F63E-11D1-8D3E-0000C033EAF2),
      helpstring("Parent Advise Sink interface."),
      oleautomation
    ]
    interface IParentAdviseSink : IUnknown {
        HRESULT _stdcall OnDataChange(
                        [in] long dwCookie, 
                        [in] long nSeverity);
    };

    [
      odl,
      uuid(8E567525-F9BA-11CF-90B2-0000C0A810C4),
      helpstring("Set/Query library references interfaces for AspenPlus."),
      dual,
      oleautomation
    ]
    interface IHAPLibRef : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the number of referenced libraries")]
        HRESULT CountLibs([out, retval] short* Count);
        [id(0x60020001), propget, helpstring("Returns the library name of the nth library (0-based)")]
        HRESULT LibraryName(
                        [in] short index, 
                        [out, retval] BSTR* libname);
        [id(0x60020002), propget, helpstring("Returns the full path and filename of the nth library (0-based)")]
        HRESULT LibraryPath(
                        [in] short index, 
                        [out, retval] BSTR* libpath);
        [id(0x60020003), helpstring("Inserts a library at specified location (0-based) in reference list")]
        HRESULT InsertLibrary(
                        [in] BSTR path, 
                        [in] short location, 
                        [out, retval] BSTR* displayname);
        [id(0x60020004), helpstring("Removes a library at given location (0-based) from reference list")]
        HRESULT RemoveLibrary([in] short location);
        [id(0x60020005), helpstring("Moves a library in search path")]
        HRESULT MoveLibrary(
                        [in] short fromloc, 
                        [in] short toloc);
        [id(0x60020006), propget, helpstring("Returns the name of the nth category (0-based)")]
        HRESULT CategoryName(
                        [in] short index, 
                        [out, retval] BSTR* libname);
        [id(0x60020007), propget, helpstring("Returns the state (selected or not) of the category")]
        HRESULT CategorySelected(
                        [in] BSTR Name, 
                        [out, retval] short* selected);
        [id(0x60020007), propput, helpstring("Returns the state (selected or not) of the category")]
        HRESULT CategorySelected(
                        [in] BSTR Name, 
                        [in] short selected);
        [id(0x60020009), propget, helpstring("Returns the state (selected or not) of the nth category (0-based)")]
        HRESULT CategoryLocSelected(
                        [in] short index, 
                        [out, retval] short* selected);
        [id(0x60020009), propput, helpstring("Returns the state (selected or not) of the nth category (0-based)")]
        HRESULT CategoryLocSelected(
                        [in] short index, 
                        [in] short selected);
        [id(0x6002000b), helpstring("Moves a category in the category list")]
        HRESULT MoveCategory(
                        [in] short fromloc, 
                        [in] short toloc);
        [id(0x6002000c), restricted, helpstring("Returns an interface enumerator for the referenced model libraries")]
        HRESULT Enum([out] IEnumAModelLibrary** ppEnum);
        [id(0x6002000d), helpstring("Sets the activate state of the Built-in or CAPE-OPEN libraries.")]
        HRESULT SetLibraryActive([in] BSTR displayname);
    };

    [
      odl,
      uuid(8AD467D8-0C32-11D2-9B42-0000C07EE8F2),
      version(11.1),
      helpstring("Enumerate model libraries"),
      oleautomation,
      restricted
    ]
    interface IEnumAModelLibrary : IUnknown {
        HRESULT _stdcall Next(
                        [in] unsigned long uCount, 
                        [out] IUnknown** ppModel, 
                        [out] unsigned long* pnumFetched);
        HRESULT _stdcall Skip([in] unsigned long uCount);
        HRESULT _stdcall Reset();
        HRESULT _stdcall Clone([out] IEnumAModelLibrary** ppEnum);
    };
    [
      odl,
      uuid(89E81F60-019A-11D0-9BE7-0000C05375D5),
      helpstring("Node collection for the ASPEN PLUS GUI data."),
      dual,
      oleautomation
    ]
    interface IHNodeCol : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the application of the object.")]
        HRESULT Application([out, retval] IHapp** retval);
        [id(0x60020001), propget, helpstring("Returns the creator of the object.")]
        HRESULT Parent([out, retval] IHapp** retval);
        [id(0x60020002), propget, helpstring("Returns total number of objects in collection.")]
        HRESULT Count([out, retval] long* len);
        [id(0x60020003), propget, helpstring("Returns the number of elements in the dimension.")]
        HRESULT RowCount(
                        [in] long Dimension, 
                        [out, retval] long* len);
        [id(0x60020004), propget, helpstring("Returns the number of dimensions in the directory.")]
        HRESULT Dimension([out, retval] long* Dimension);
        [id(0x60020005), propget, helpstring("Returns whether the rows for this dimension of the collection are named.")]
        HRESULT IsNamedDimension(
                        [in, optional] VARIANT Dimension, 
                        [out, retval] VARIANT_BOOL* is_named);
        [id(00000000), propget, helpstring("Given a set of indices or names, returns a element in the collection")]
        HRESULT Item(
                        [in] VARIANT loc_or_name, 
                        [in, optional] VARIANT loc_or_name2, 
                        [in, optional] VARIANT loc_or_name3, 
                        [in, optional] VARIANT loc_or_name4, 
                        [in, optional] VARIANT loc_or_name5, 
                        [out, retval] IHNode** retval);
        [id(0x60020007), propget, helpstring("Returns name or row name for element at location (force argument is unused).")]
        HRESULT ItemName(
                        [in] long location, 
                        [in, optional] VARIANT Dimension, 
                        [in, optional] VARIANT force, 
                        [out, retval] BSTR* item_name);
        [id(0x60020007), propput, helpstring("Returns name or row name for element at location (force argument is unused).")]
        HRESULT ItemName(
                        [in] long location, 
                        [in, optional] VARIANT Dimension, 
                        [in, optional] VARIANT force, 
                        [in] BSTR item_name);
        [id(0x60020009), propget, helpstring("Returns the row label for the specified row location in the specified dimension (force argument is unused).")]
        HRESULT Label(
                        [in] long Dimension, 
                        [in] long location, 
                        [in, optional] VARIANT force, 
                        [out, retval] BSTR* Label);
        [id(0x60020009), propput, helpstring("Returns the row label for the specified row location in the specified dimension (force argument is unused).")]
        HRESULT Label(
                        [in] long Dimension, 
                        [in] long location, 
                        [in, optional] VARIANT force, 
                        [in] BSTR Label);
        [id(0x6002000b), propget, helpstring("Returns a node for manipulating the label.")]
        HRESULT LabelNode(
                        [in] long Dimension, 
                        [in] long location, 
                        [out, optional] VARIANT* Label, 
                        [out, retval] IHNode** retval);
        [id(0x6002000c), propget, helpstring("Returns the location, or row number, of the label along the dimension.")]
        HRESULT LabelLocation(
                        [in] BSTR Label, 
                        [in] long Dimension, 
                        [out, retval] long* location);
        [id(0x6002000d), propget, helpstring("Returns the value of an attribute for the label in the row, location, along the dimension for attrnum (see HAPAttributeNumber for possible values), (force argument is unused).")]
        HRESULT LabelAttribute(
                        [in] long Dimension, 
                        [in] long location, 
                        [in] short attrnum, 
                        [in, optional] VARIANT force, 
                        [out, retval] VARIANT* retval);
        [id(0x6002000d), propput, helpstring("Returns the value of an attribute for the label in the row, location, along the dimension for attrnum (see HAPAttributeNumber for possible values), (force argument is unused).")]
        HRESULT LabelAttribute(
                        [in] long Dimension, 
                        [in] long location, 
                        [in] short attrnum, 
                        [in, optional] VARIANT force, 
                        [in] VARIANT retval);
        [id(0x6002000f), propget, helpstring("Returns the type of an attribute for the label in the row, location, along the dimension for attrnum (see HAPAttributeNumber for possible values).")]
        HRESULT LabelAttributeType(
                        [in] long Dimension, 
                        [in] long location, 
                        [in] short attrnum, 
                        [out, retval] short* type);
        [id(0xfffffffc), propget, restricted]
        HRESULT _NewEnum([out, retval] IUnknown** retval);
        [id(0x60020011), helpstring("Creates and adds a child of type: 1 = scalar, 4 = list, 5 = named list, with value type of: 0=not defined, 1=int, 2=real,3=string, 4=node, 5=memory block.")]
        HRESULT Add(
                        [in, optional] VARIANT loc_or_name, 
                        [in, optional] VARIANT loc_or_name2, 
                        [in, optional] VARIANT loc_or_name3, 
                        [in, optional] VARIANT loc_or_name4, 
                        [in, optional] VARIANT loc_or_name5, 
                        [out, retval] IHNode** retval);
        [id(0x60020012), helpstring("Inserts a element into collection.")]
        HRESULT Insert(
                        [in] IHNode* element, 
                        [in, optional] VARIANT loc_or_name, 
                        [in, optional] VARIANT loc_or_name2, 
                        [in, optional] VARIANT loc_or_name3, 
                        [in, optional] VARIANT loc_or_name4, 
                        [in, optional] VARIANT loc_or_name5);
        [id(0x60020013), helpstring("Removes an element.")]
        HRESULT Remove(
                        [in] VARIANT loc_or_name, 
                        [in, optional] VARIANT loc_or_name2, 
                        [in, optional] VARIANT loc_or_name3, 
                        [in, optional] VARIANT loc_or_name4, 
                        [in, optional] VARIANT loc_or_name5, 
                        [out, retval] IHNode** retval);
        [id(0x60020014), helpstring("Inserts a new row at location in the specified dimension.")]
        HRESULT InsertRow(
                        [in] long Dimension, 
                        [in] long location);
        [id(0x60020015), helpstring("Removes a row at location in the specified dimension.")]
        HRESULT RemoveRow(
                        [in] long Dimension, 
                        [in] long location);
        [id(0x60020016), propget, helpstring("Gets a display name for the given dimension for variable or table.")]
        HRESULT DimensionName(
                        [in] long Dimension, 
                        [out, retval] BSTR* dim_name);
        [id(0x60020017), helpstring("Reorder element location: 0 = dialog, -1 = up, 1 = down")]
        HRESULT Reorder(
                        [in] VARIANT loc_or_name, 
                        [in] short dir);
    };

    

    [
      odl,
      uuid(657E4330-ED8D-11D0-A991-0000C0237DF9),
      helpstring("Information about nodes in ScrollArea controls."),
      dual,
      oleautomation
    ]
    interface IScrollAreaInfo : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the node for the specified control in the specified cell")]
        HRESULT NodeAt(
                        [in] long row, 
                        [in] long col, 
                        [in] short index, 
                        [out, retval] IHNode** ppnode);
        [id(0x60020001), helpstring("Get the maximum row/col information.")]
        HRESULT GetMaximum(
                        [in, out] long* pRow, 
                        [in, out] short* pRowExt, 
                        [in, out] long* pCol, 
                        [in, out] short* pColExt);
    };

    [
      odl,
      uuid(11677780-B72B-11D0-A943-0000C0A118DB),
      helpstring("PlotVal automation interface for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHPlotVal : IDispatch {
        [id(0x60020000), propput, helpstring("Sets the HNode context.")]
        HRESULT Context([in] IHNode* pContext);
        [id(0x60020000), propget, helpstring("Sets the HNode context.")]
        HRESULT Context([out, retval] IHNode** pContext);
        [id(0x60020002), propget, helpstring("Returns the plot title.")]
        HRESULT Title([out, retval] BSTR* Title);
        [id(0x60020003), propget, helpstring("Returns the interpreted plot title.")]
        HRESULT TitleInt([out, retval] BSTR* Title);
        [id(0x60020002), propput, helpstring("Returns the plot title.")]
        HRESULT Title([in] BSTR Title);
        [id(0x60020005), propget, helpstring("Returns the X-Axis title of the plot.")]
        HRESULT XAxisTitle([out, retval] BSTR* xtitle);
        [id(0x60020006), propget, helpstring("Returns the interpreted X-Axis title of the plot.")]
        HRESULT XAxisTitleInt([out, retval] BSTR* xtitle);
        [id(0x60020005), propput, helpstring("Returns the X-Axis title of the plot.")]
        HRESULT XAxisTitle([in] BSTR xtitle);
        [id(0x60020008), propget, helpstring("Returns the Y-Axis title of the plot.")]
        HRESULT YAxisTitle(
                        [in, optional] VARIANT nAxis, 
                        [out, retval] BSTR* ytitle);
        [id(0x60020009), propget, helpstring("Returns the interpreted Y-Axis title of the plot.")]
        HRESULT YAxisTitleInt(
                        [in, optional] VARIANT nAxis, 
                        [out, retval] BSTR* ytitle);
        [id(0x60020008), propput, helpstring("Returns the Y-Axis title of the plot.")]
        HRESULT YAxisTitle(
                        [in, optional] VARIANT nAxis, 
                        [in] BSTR ytitle);
        [id(0x6002000b), propget, helpstring("Returns the label of the curve in the plot.")]
        HRESULT Label(
                        [in] long index, 
                        [out, retval] BSTR* Label);
        [id(0x6002000c), propget, helpstring("Returns the label of the curve in the plot.")]
        HRESULT LabelInt(
                        [in] long index, 
                        [out, retval] BSTR* Label);
        [id(0x6002000b), propput, helpstring("Returns the label of the curve in the plot.")]
        HRESULT Label(
                        [in] long index, 
                        [in] BSTR Label);
        [id(0x6002000e), propget, helpstring("Returns the number of points in the plot.")]
        HRESULT NPoints([out, retval] long* NPoints);
        [id(0x6002000e), propput, helpstring("Returns the number of points in the plot.")]
        HRESULT NPoints([in] long NPoints);
        [id(0x60020010), propget, helpstring("Returns the number of variables on Y-Axis.")]
        HRESULT NVariables([out, retval] long* nvar);
        [id(0x60020010), propput, helpstring("Returns the number of variables on Y-Axis.")]
        HRESULT NVariables([in] long nvar);
        [id(0x60020012), propget, helpstring("Returns the number of variables on X-Axis.")]
        HRESULT NXVariables([out, retval] long* nvar);
        [id(0x60020012), propput, helpstring("Returns the number of variables on X-Axis.")]
        HRESULT NXVariables([in] long nvar);
        [id(0x60020014), propget, helpstring("Returns the X-Axis data value.")]
        HRESULT XDataValue(
                        [in] long index, 
                        [in] long datano, 
                        [out, retval] double* Value);
        [id(0x60020015), propput, helpstring("Sets the X-Axis data.")]
        HRESULT XData(
                        [in] long index, 
                        [in] long datano, 
                        [in] short attr, 
                        [in] VARIANT rhs);
        [id(0x60020016), propget, helpstring("Returns the Y-Axis data value.")]
        HRESULT YDataValue(
                        [in] long index, 
                        [in] long datano, 
                        [out, retval] double* Value);
        [id(0x60020017), propput, helpstring("Sets the Y-Axis data. attr, 0 - Value, 1 - HNode, 2 - HNode label")]
        HRESULT YData(
                        [in] long index, 
                        [in] long datano, 
                        [in] short attr, 
                        [in] VARIANT rhs);
        [id(0x60020018), helpstring("Returns the X-Axis data.")]
        HRESULT GetXData(
                        [in] long index, 
                        [in] long datano, 
                        [out] short* attr, 
                        [out] VARIANT* Value);
        [id(0x60020019), helpstring("Returns the Y-Axis data.")]
        HRESULT GetYData(
                        [in] long index, 
                        [in] long datano, 
                        [out] short* attr, 
                        [out] VARIANT* Value);
        [id(0x6002001a), helpstring("Removes all the variables and reset the titles.")]
        HRESULT Clear();
        [id(0x6002001b), propget, helpstring("Returns whether the axises are swapped.")]
        HRESULT SwapAxises([out, retval] VARIANT_BOOL* pbSwap);
        [id(0x6002001b), propput, helpstring("Returns whether the axises are swapped.")]
        HRESULT SwapAxises([in] VARIANT_BOOL pbSwap);
        [id(0x6002001d), propget, helpstring("Returns whether the X-Axis is reversed.")]
        HRESULT ReverseXAxis([out, retval] VARIANT_BOOL* pbReverse);
        [id(0x6002001d), propput, helpstring("Returns whether the X-Axis is reversed.")]
        HRESULT ReverseXAxis([in] VARIANT_BOOL pbReverse);
        [id(0x6002001f), propget, helpstring("Returns whether adding time stamp to the plot.")]
        HRESULT AddTimeStamp([out, retval] VARIANT_BOOL* pbTimeStamp);
        [id(0x6002001f), propput, helpstring("Returns whether adding time stamp to the plot.")]
        HRESULT AddTimeStamp([in] VARIANT_BOOL pbTimeStamp);
        [id(0x60020021), propget, helpstring("Returns whether showing legend on the plot.")]
        HRESULT ShowLegend([out, retval] VARIANT_BOOL* pbLegend);
        [id(0x60020021), propput, helpstring("Returns whether showing legend on the plot.")]
        HRESULT ShowLegend([in] VARIANT_BOOL pbLegend);
        [id(0x60020023), propget, helpstring("Returns the plot type: 0 - line, 1 - bar, 2 - triangular.")]
        HRESULT PlotType([out, retval] long* pPlotType);
        [id(0x60020023), propput, helpstring("Returns the plot type: 0 - line, 1 - bar, 2 - triangular.")]
        HRESULT PlotType([in] long pPlotType);
        [id(0x60020025), propget, helpstring("Returns whether the plot is a parametric plot.")]
        HRESULT Parametric([out, retval] VARIANT_BOOL* pbParametric);
        [id(0x60020025), propput, helpstring("Returns whether the plot is a parametric plot.")]
        HRESULT Parametric([in] VARIANT_BOOL pbParametric);
        [id(0x60020027), propget, helpstring("Returns the Z-Axis title of the plot.")]
        HRESULT ZAxisTitle([out, retval] BSTR* ztitle);
        [id(0x60020028), propget, helpstring("Returns the interpreted Z-Axis title of the plot.")]
        HRESULT ZAxisTitleInt([out, retval] BSTR* ztitle);
        [id(0x60020027), propput, helpstring("Returns the Z-Axis title of the plot.")]
        HRESULT ZAxisTitle([in] BSTR ztitle);
        [id(0x6002002a), propget, helpstring("Returns whether the plot is a live plot or not.")]
        HRESULT Live([out, retval] VARIANT_BOOL* pbLive);
        [id(0x6002002a), propput, helpstring("Returns whether the plot is a live plot or not.")]
        HRESULT Live([in] VARIANT_BOOL pbLive);
        [id(0x6002002c), helpstring("Adds anotation text to the plot.")]
        HRESULT AddAnnotationText([in] PLOTTEXT* text);
        [id(0x6002002d), propget, helpstring("Gets annotation text of the plot.")]
        HRESULT AnnotationCount([out, retval] long* Count);
        [id(0x6002002e), propget, helpstring("Gets annotation text of the plot.")]
        HRESULT AnnotationText(
                        [in] long index, 
                        [out, retval] PLOTTEXT* text);
        [id(0x6002002f), propget, helpstring("Returns the grid type for the plot. 0 - No grid, 1 - Vertical, 2 - Horizontal, 3 - Mesh")]
        HRESULT GridType([out, retval] short* grid);
        [id(0x6002002f), propput, helpstring("Returns the grid type for the plot. 0 - No grid, 1 - Vertical, 2 - Horizontal, 3 - Mesh")]
        HRESULT GridType([in] short grid);
        [id(0x60020031), propget, helpstring("Returns the marker size for the plot.")]
        HRESULT MarkerSize([out, retval] short* marker);
        [id(0x60020031), propput, helpstring("Returns the marker size for the plot.")]
        HRESULT MarkerSize([in] short marker);
        [id(0x60020033), propget, helpstring("Returns whether showing diagonal line on the plot.")]
        HRESULT ShowDiagonalLine([out, retval] VARIANT_BOOL* pbDiagonal);
        [id(0x60020033), propput, helpstring("Returns whether showing diagonal line on the plot.")]
        HRESULT ShowDiagonalLine([in] VARIANT_BOOL pbDiagonal);
        [id(0x60020035), propget, helpstring("Returns the line style for the plot. 0 - Lines, 1 - Markers, 2 - Lines & Markers")]
        HRESULT LineStyle([out, retval] short* line);
        [id(0x60020035), propput, helpstring("Returns the line style for the plot. 0 - Lines, 1 - Markers, 2 - Lines & Markers")]
        HRESULT LineStyle([in] short line);
        [id(0x60020037), propget, helpstring("Returns whether the X-Axis data are integers.")]
        HRESULT XDataInteger(
                        [in] long index, 
                        [out, retval] VARIANT_BOOL* pbInteger);
        [id(0x60020038), propget, helpstring("Returns whether showing zero line on the plot.")]
        HRESULT ShowZeroLine([out, retval] VARIANT_BOOL* pbZero);
        [id(0x60020038), propput, helpstring("Returns whether showing zero line on the plot.")]
        HRESULT ShowZeroLine([in] VARIANT_BOOL pbZero);
        [id(0x6002003a), propget, helpstring("Returns which axis the curve is mapped to.")]
        HRESULT AxisMap(
                        [in] long index, 
                        [out, retval] long* pAxis);
        [id(0x6002003a), propput, helpstring("Returns which axis the curve is mapped to.")]
        HRESULT AxisMap(
                        [in] long index, 
                        [in] long pAxis);
        [id(0x6002003c), propget, helpstring("Returns the style for the specified curve.")]
        HRESULT CurveStyle(
                        [in] long index, 
                        [out, retval] long* pStyle);
        [id(0x6002003c), propput, helpstring("Returns the style for the specified curve.")]
        HRESULT CurveStyle(
                        [in] long index, 
                        [in] long pStyle);
        [id(0x6002003e), helpstring("Removes all anotation text in the plot.")]
        HRESULT RemoveAnnotationText();
        [id(0x6002003f), propget, helpstring("Returns whether the plot is a square plot.")]
        HRESULT SquarePlot([out, retval] VARIANT_BOOL* pbSquare);
        [id(0x6002003f), propput, helpstring("Returns whether the plot is a square plot.")]
        HRESULT SquarePlot([in] VARIANT_BOOL pbSquare);
        [id(0x60020041), propget, helpstring("Returns whether the plot can be live plot.")]
        HRESULT CanLive([out, retval] VARIANT_BOOL* pbCanLive);
        [id(0x60020041), propput, helpstring("Returns whether the plot can be live plot.")]
        HRESULT CanLive([in] VARIANT_BOOL pbCanLive);
        [id(0x60020043), propget, helpstring("Returns the scale for a curve in the plot.")]
        HRESULT AxisScale(
                        [in] long VarNo, 
                        [out, retval] long* pScale);
        [id(0x60020043), propput, helpstring("Returns the scale for a curve in the plot.")]
        HRESULT AxisScale(
                        [in] long VarNo, 
                        [in] long pScale);
    };

    

    [
      odl,
      uuid(D6FECDE0-BA92-11D1-9B3F-0000C07EE8F2),
      helpstring("Aspen Plus PDF automation interface."),
      dual,
      oleautomation
    ]
    interface IAPPDF : IDispatch {
        [id(0x60020000), helpstring("Get a copy of the current ASPEN PLUS APPDF file")]
        HRESULT GetAPPDF(
                        [in] BSTR filename, 
                        [in] long flags);
    };

    [
      odl,
      uuid(ADBB8C5B-2BC3-4320-80E9-1173394ED542),
      helpstring("Aspen Plus GUI HANDLE interface"),
      hidden,
      dual,
      oleautomation
    ]
    interface IHAPHandle : IDispatch {
        [id(0x60020000), propget, helpstring("Get main window handle")]
        HRESULT MainHWnd([out, retval] long* lphWnd);
        [id(0x60020001), propget, helpstring("Get main window handle")]
        HRESULT ProcessHandle([out, retval] long* lphproc);
    };

    [
      odl,
      uuid(0B61E982-00B4-4308-994E-66C15D8F5CAC),
      helpstring("Aspen Plus physical properties data automation interface."),
      dual,
      oleautomation
    ]
    interface IAPropData : IDispatch {
        [id(0x60020000), helpstring("Get the available databanks in the record definition file")]
        HRESULT GetAvailableDatabanks(
                        [out] long* plNumDatabanks, 
                        [out] VARIANT* pvtDatabankArray);
        [id(0x60020001), helpstring("Get the default databanks in the record definition file")]
        HRESULT GetDefaultDatabanks(
                        [out] long* plNumDatabanks, 
                        [out] VARIANT* pvtDatabankArray);
        [id(0x60020002), helpstring("Set query for components, BPUnit options are K,C,R,F")]
        HRESULT SetQueryForComponents(
                        [in] VARIANT vtDatabanksArray, 
                        [in] BSTR bstrMatchNameAlias, 
                        [in] long bMatchAlternate, 
                        [in] long bMatchStringBeginOnly, 
                        [in] BSTR bstrCompClass, 
                        [in] BSTR bstrCASRN, 
                        [in] double dblMWfrom, 
                        [in] double dblMWto, 
                        [in] double dblBPfrom, 
                        [in] double dblBPto, 
                        [in] BSTR bstrBPUnit);
        [id(0x60020003), helpstring("Fetch next component after calling SetQueryForComponents")]
        HRESULT FetchNextComponent(
                        [in] long bInit, 
                        [out] BSTR* bstrAlias, 
                        [out] BSTR* bstrName, 
                        [out] double* dblBP, 
                        [out] double* dblMW, 
                        [out] BSTR* bstrDatabank, 
                        [out] BSTR* bstrCASRN, 
                        [out] BSTR* bstrCompClass, 
                        [out] BSTR* bstrSynonym);
    };

    [
      odl,
      uuid(681C2534-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPPasteItems : IDispatch {
        [id(00000000), propget]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] IAPPasteItem** pItem);
        [id(0xfffffffc), propget]
        HRESULT Enum([out, retval] IUnknown** retval);
        [id(0x60020002), propget]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(681C2533-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPPasteItem : IDispatch {
        [id(0x60020000), propget]
        HRESULT displayname([out, retval] BSTR* Name);
        [id(0x60020001), propput]
        HRESULT ID([in] BSTR Name);
        [id(0x60020001), propget]
        HRESULT ID([out, retval] BSTR* Name);
        [id(0x60020003), propput]
        HRESULT Deleted([in] VARIANT_BOOL retval);
        [id(0x60020003), propget]
        HRESULT Deleted([out, retval] VARIANT_BOOL* retval);
        [id(0x60020005), propget]
        HRESULT PathLen([out, retval] long* Value);
        [id(0x60020006), propget]
        HRESULT path(
                        [in] long index, 
                        [out, retval] BSTR* Name);
        [id(0x60020007), propget]
        HRESULT HasChildren([out, retval] VARIANT_BOOL* retval);
        [id(0x60020008), propget]
        HRESULT Items([out, retval] IAPPasteItems** retval);
    };

    typedef enum {
        HAPP_RECONCILE_INPUT = 1,
        HAPP_RECONCILE_ONLY = 2,
        HAPP_RECONCILE_TP = 4,
        HAPP_RECONCILE_TV = 8,
        HAPP_RECONCILE_PV = 16,
        HAPP_RECONCILE_CF = 32,
        HAPP_RECONCILE_TF = 64,
        HAPP_RECONCILE_MICFMOLE = 128,
        HAPP_RECONCILE_MICFMASS = 256,
        HAPP_RECONCILE_MICFSTDVOL = 512,
        HAPP_RECONCILE_MITFMOLE = 1024,
        HAPP_RECONCILE_MITFMASS = 2048,
        HAPP_RECONCILE_MITFSTDVOL = 4096,
        HAPP_RECONCILE_CICFMOLE = 16384,
        HAPP_RECONCILE_CICFMASS = 32768,
        HAPP_RECONCILE_CITFMOLE = 0x00010000,
        HAPP_RECONCILE_CITFMASS = 0x00020000,
        HAPP_RECONCILE_QUIET = 0x00100000,
        HAPP_RECONCILE_DONTASKWARN = 0x00200000,
        HAPP_RECONCILE_ONLYSTREAMS = 0x01000000,
        HAPP_RECONCILE_NOSTREAMS = 0x02000000,
        HAPP_RECONCILE_TEARSTREAMS = 0x04000000
    } HAPP_RECONCILE_CODE;

    typedef enum {
        HAPP_ENABLE_DEACTIVATE = 0,
        HAPP_ENABLE_ACTIVATE = 1,
        HAPP_ENABLE_NOT_APPLICABLE = 2
    } HAPP_ENABLE_CODE;

    typedef enum {
        HASEL_UNDEFINED = 0xffffffff,
        HASEL_CHNODE = 0,
        HASEL_SELECTION = 1,
        HASEL_LABEL = 2,
        HASEL_LABELNODE = 3,
        HASEL_VOLATILECHNODE = 4,
        HASEL_HEADERLABEL = 90,
        HASEL_LBTU_UNITS = 96,
        HASEL_LBTU_BASIS = 97,
        HASEL_LBTU_UNITS_BASIS = 98,
        HASEL_UNDERLYINGNODE = 99,
        HASEL_SELECT_INDIRECT = 100
    } HASELTYPE;

    [
      odl,
      uuid(3E9D8E11-DBF3-4A5E-8922-5D9A7A4A6EBD),
      helpstring("IHSelection delay loading interface"),
      hidden
    ]
    interface IHSelectionCallback : IUnknown {
        [propget]
        HRESULT _stdcall Count([out, retval] int* pCount);
        [helpstring("IHSelection delay loading mechanism")]
        HRESULT _stdcall LoadSelection([in] IHSelection* arg1);
        [propget]
        HRESULT _stdcall EditsAllowed([out, retval] int* Value);
    };

    [
      uuid(503FD632-F63E-11D1-8D3E-0000C033EAF2),
      helpstring("Notification of a warning or informational message.")
    ]
    dispinterface IAPHappEvents {
        properties:
        methods:
            [id(0x00000064), helpstring("Fired when the automation default for a message box or dialog is used.")]
            void OnDialogSuppressed(
                            [in] BSTR msg, 
                            [in] BSTR result);
            [id(0x00000065), helpstring("Fired when the a control panel message is displayed")]
            void OnControlPanelMessage(
                            [in] long Clear, 
                            [in] BSTR msg);
            [id(0x00000066), helpstring("Fired when GUI is closed")]
            void OnGUIClosing();
            [id(0x00000067), helpstring("Fired when the application starts to close.")]
            void OnInClosing(
                            [in] long Clear, 
                            [in] BSTR msg);
            [id(0x00000068), helpstring("Fired when input data is modified.")]
            void OnDataChanged([in] IDispatch* pObj);
            [id(0x00000069), helpstring("Fired when an update event occurs.")]
            void OnUpdateMessage(
                            [in] long msg_code, 
                            [in] BSTR msg_hint, 
                            [in] IDispatch* msg_object, 
                            [in] long source_handle);
            [id(0x0000006a), helpstring("Fired when a threaded call to the caculation engine completes.")]
            void OnEngineCommandCompleted();
            [id(0x0000006b), helpstring("Fired before a call to the calculation engine begins.")]
            void OnBeforeCalculate(
                            [in] VARIANT_BOOL IsStep, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000006c), helpstring("Fired before a call to save a problem begins.")]
            void OnBeforeSave(
                            [in] BSTR filename, 
                            [in] VARIANT_BOOL* Cancel);
            [id(0x0000006d), helpstring("Fired after a call to the calculation engine completes.")]
            void OnCalculationCompleted();
            [id(0x0000006e), helpstring("Fired after a call to the calculation engine stops before completion.")]
            void OnCalculationStopped();
    };

    [
      uuid(7F3E8C3A-96FD-4D69-9700-35CF1CCF67AD),
      helpstring("Aspen Plus 20.0 GUI Automation Server"),
      appobject
    ]
    coclass HappLS {
        [default] interface IHapp;
        interface IDispatch;
        interface IParentAdviseSink;
        interface IHAPHandle;
        [default, source] dispinterface IAPHappEvents;
    };

    [
      uuid(0AB77320-8EA0-4239-B3CB-72C07BA3AC44),
      helpstring("Aspen Plus 20.0 GUI In Process Automation Server"),
      appobject
    ]
    coclass HappIP {
        [default] interface IHapp;
        interface IDispatch;
        interface IParentAdviseSink;
        interface IHAPHandle;
        [default, source] dispinterface IAPHappEvents;
    };

    [
      odl,
      uuid(72F9FD70-9ED4-11D0-9475-0000C07972E4),
      helpstring("Composite Node for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHComposite : IDispatch {
        [id(0x60020000), helpstring("Add Node to collection.")]
        HRESULT AddChild(
                        [in] BSTR Name, 
                        [in] IHNode* child);
        [id(0x60020001), helpstring("Remove Node from collection.")]
        HRESULT RemoveChild([in] BSTR Name);
        [id(0x60020002), helpstring("Get Node by index from collection.")]
        HRESULT GetChild(
                        [in] int index, 
                        [out, retval] IHNode** retval);
        [id(0x60020003), helpstring("Get name by index from collection.")]
        HRESULT GetChildName(
                        [in] int index, 
                        [out, retval] BSTR* Name);
        [id(0x60020004), propget, helpstring("Returns the number of childs in the composite.")]
        HRESULT ChildCount([out, retval] long* Count);
        [id(0x60020005), helpstring("Dump the composite to database.")]
        HRESULT DumpToDataBase(
                        [in] BSTR filename, 
                        [in] BSTR tablename, 
                        [in] int create);
    };

    [
      uuid(E6CD1353-46DE-472E-8E32-874EA8ED08BC),
      helpstring("ReadOnly Composition Class"),
      appobject
    ]
    coclass CHReadOnlyCompositeNode {
        [default] interface IHComposite;
        interface IDispatch;
    };

    [
      uuid(7FE5B442-69EC-4B4E-BB54-73FCE4762F74),
      helpstring("ReadWrite Composition Class"),
      appobject
    ]
    coclass CHReadWriteCompositeNode {
        [default] interface IHComposite;
        interface IDispatch;
    };

    [
      uuid(3B963518-C826-4A23-8C07-FD6DE77764DC),
      helpstring("PlotVal Class"),
      appobject
    ]
    coclass CHPlotVal {
        [default] interface IHPlotVal;
        interface IDispatch;
    };

    [
      odl,
      uuid(8008C730-1A3E-11D1-8A4D-0000C0237DF9),
      helpstring("Plot Wizard automation interface for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHWizardPlot : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the PlotVal interface")]
        HRESULT PlotVal([out, retval] IHPlotVal** pPlotVal);
        [id(0x60020001), propget, helpstring("Returns the basis for the Y-Axis data. (0 - none, 1 - mole, 2 - mass, 3 - stdvol)")]
        HRESULT basis([out, retval] long* basis);
        [id(0x60020001), propput, helpstring("Returns the basis for the Y-Axis data. (0 - none, 1 - mole, 2 - mass, 3 - stdvol)")]
        HRESULT basis([in] long basis);
        [id(0x60020003), propget, helpstring("Returns the unit row for the Y-Axis data.")]
        HRESULT unitrow(
                        [in, optional] VARIANT curve, 
                        [out, retval] long* unitrow);
        [id(0x60020003), propput, helpstring("Returns the unit row for the Y-Axis data.")]
        HRESULT unitrow(
                        [in, optional] VARIANT curve, 
                        [in] long unitrow);
        [id(0x60020005), propget, helpstring("Returns the unit column for the Y-Axis data.")]
        HRESULT unitcol(
                        [in, optional] VARIANT curve, 
                        [out, retval] long* unitcol);
        [id(0x60020005), propput, helpstring("Returns the unit column for the Y-Axis data.")]
        HRESULT unitcol(
                        [in, optional] VARIANT curve, 
                        [in] long unitcol);
        [id(0x60020007), helpstring("Sets the independent variable.")]
        HRESULT SetIndependentVariable(
                        [in] IHNode* pContext, 
                        [in] BSTR indepvar);
        [id(0x60020008), helpstring("Adds more dependent variable.")]
        HRESULT AddDependentVariable(
                        [in] IHNode* pContext, 
                        [in] BSTR depvar);
        [id(0x60020009), helpstring("Removes this dependent variable.")]
        HRESULT RemoveDependentVariable(
                        [in] IHNode* pContext, 
                        [in] BSTR depvar);
        [id(0x6002000a), helpstring("Removes all the dependent variables.")]
        HRESULT RemoveAllDependentVariable();
        [id(0x6002000b), propget, helpstring("Returns whether the plot has this dependent variable.")]
        HRESULT HasDependentVariable(
                        [in] IHNode* pContext, 
                        [in] BSTR depvar, 
                        [out, retval] VARIANT_BOOL* pbVal);
        [id(0x6002000c), helpstring("Adds independent/dependent variable pair.")]
        HRESULT AddVariablePair(
                        [in] IHNode* pContext, 
                        [in] BSTR indepvar, 
                        [in] BSTR depvar, 
                        [in] short sort);
        [id(0x6002000d), propget, helpstring("Returns the plot wizard setting.")]
        HRESULT WizardData(
                        [in] long Step, 
                        [out, retval] IDispatch** ppData);
        [id(0x6002000d), propput, helpstring("Returns the plot wizard setting.")]
        HRESULT WizardData(
                        [in] long Step, 
                        [in] IDispatch* ppData);
        [id(0x6002000f), helpstring("Removes all the variables and reset the titles.")]
        HRESULT Clear();
        [id(0x60020010), propget, helpstring("Returns Index of the first error screen")]
        HRESULT ErrorNumber([out, retval] long* pIndex);
        [id(0x60020011), propput, helpstring("Sets the index of the error screen")]
        HRESULT ErrorStatus(
                        [in] long index, 
                        [in] VARIANT_BOOL rhs);
        [id(0x60020012), propput, helpstring("Sets the callback object for live plot.")]
        HRESULT RefreshCallBack([in] BSTR Name);
        [id(0x60020012), propget, helpstring("Sets the callback object for live plot.")]
        HRESULT RefreshCallBack([out, retval] BSTR* Name);
        [id(0x60020014), helpstring("Gets the independent variable name")]
        HRESULT GetIndependentVariable([out] BSTR* indepvar);
        [id(0x60020015), helpstring("Gets the dependent variable names")]
        HRESULT GetDependentVariable([in, out] SAFEARRAY(BSTR)* depvar);
        [id(0x60020016), helpstring("Gets the available plots")]
        HRESULT GetPlotList([in, out] SAFEARRAY(IHPlotVal*)* plots);
        [id(0x60020017), propput, helpstring("Sets the plot that the current plot is added to.")]
        HRESULT AddToPlot([in] IHPlotVal* ppPlot);
        [id(0x60020017), propget, helpstring("Sets the plot that the current plot is added to.")]
        HRESULT AddToPlot([out, retval] IHPlotVal** ppPlot);
        [id(0x60020019), propget, helpstring("Returns the unit row for the X-Axis data.")]
        HRESULT XUnitRow([out, retval] long* unitrow);
        [id(0x6002001a), propget, helpstring("Returns the unit column for the X-Axis data.")]
        HRESULT XUnitCol([out, retval] long* unitcol);
        [id(0x6002001a), propput, helpstring("Returns the unit column for the X-Axis data.")]
        HRESULT XUnitCol([in] long unitcol);
    };

    [
      uuid(A5760FEF-BE21-4B17-AEB9-22C15523DAE3),
      helpstring("Aspen Plus 20.0 WizardPlot Class"),
      appobject
    ]
    coclass CHWizardPlot {
        [default] interface IHWizardPlot;
        interface IDispatch;
        interface IPersistStream;
    };

  
    [
      odl,
      uuid(623A7830-34F0-11D1-8A58-0000C0237DF9),
      helpstring("Adhoc Plot automation interface for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IHAdhocPlot : IDispatch {
        [id(0x60020000), propget, helpstring("Returns the PlotVal interface")]
        HRESULT PlotVal([out, retval] IHPlotVal** pPlotVal);
        [id(0x60020001), helpstring("Test whether we are ready to generate a plot.")]
        HRESULT ReadyToPlot();
        [id(0x60020002), helpstring("Load the independent variable from selection buffer.")]
        HRESULT SetIndependentVariable();
        [id(0x60020003), helpstring("Load the dependent variable from selection buffer.")]
        HRESULT SetDependentVariable();
        [id(0x60020004), helpstring("Load the parametric variable from selection buffer.")]
        HRESULT SetParametricVariable();
        [id(0x60020005), helpstring("Refresh the plot data.")]
        HRESULT Refresh();
    };

    [
      uuid(A92A2B32-5148-483A-BC04-000E36EB4BBC),
      helpstring("Aspen Plus 20.0 AdhocPlot Class"),
      appobject
    ]
    coclass CHAdhocPlot {
        [default] interface IHAdhocPlot;
        interface IDispatch;
        interface IPersistStream;
    };

    [
      odl,
      uuid(F9688B90-65A9-11D1-8A9D-0000C0237DF9),
      helpstring("MMControl DoVerb automation interface for the ASPEN PLUS GUI."),
      dual,
      oleautomation
    ]
    interface IMMControlVerb : IDispatch {
        [id(0x60020000), helpstring("Return the OLE Verb enumerator.")]
        HRESULT EnumVerbs([in, out] VARIANT* pEnumOleVerb);
        [id(0x60020001), helpstring("Execute the specified OLE Verb.")]
        HRESULT DoVerb([in] long iVerb);
    };

    [
      uuid(F9EA180A-0B39-4336-8328-C708EB1CEDE3),
      helpstring("Aspen Properties 20.0 GUI Automation Server"),
      appobject
    ]
    coclass HappAProp {
        [default] interface IHapp;
        interface IDispatch;
        interface IParentAdviseSink;
        interface IHAPHandle;
        [default, source] dispinterface IAPHappEvents;
    };

    [
      uuid(F4D3B396-7650-4853-97E8-20ACE9A45CA9),
      helpstring("Aspen Properties 20.0 GUI In Process Automation Server"),
      appobject
    ]
    coclass HappAPropIP {
        [default] interface IHapp;
        interface IDispatch;
        interface IParentAdviseSink;
        interface IHAPHandle;
        [default, source] dispinterface IAPHappEvents;
    };

    [
      uuid(653262B7-E643-4D4B-84B2-86C8E6A2EDB2),
      helpstring("Aspen Properties 20.0 AdhocPlot Class"),
      appobject
    ]
    coclass CHAdhocPlotAProp {
        [default] interface IHAdhocPlot;
        interface IDispatch;
        interface IPersistStream;
    };

    [
      uuid(5764E7E4-600F-44C6-B439-60B09F5E4F7F),
      helpstring("Aspen Properties 20.0 WizardPlot Class"),
      appobject
    ]
    coclass CHWizardPlotAProp {
        [default] interface IHWizardPlot;
        interface IDispatch;
        interface IPersistStream;
    };

    [
      odl,
      uuid(F98A1533-D1C7-4222-903C-87E3D47589AA),
      helpstring("Acts as the factory method for any services exposed through an implementation of IServiceProvider."),
      dual,
      oleautomation
    ]
    interface IHappServiceProvider : IDispatch {
        [id(0x60020000), helpstring("Access to special services on an interface")]
        HRESULT GetService(
                        [in] BSTR bService, 
                        [out, retval] IUnknown** ppUnk);
    };

    typedef enum {
        IAP_CONF_UNKNOWN = 0xffffffff,
        IAP_CONF_NOACTION = 0,
        IAP_CONF_REPLACE = 2,
        IAP_CONF_MERGE = 3,
        IAP_CONF_HIDE = 4
    } IAP_CONFLICT_OPTION;

    [
      odl,
      uuid(681C2530-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPConflict : IDispatch {
        [id(0x60020000), propget]
        HRESULT displayname([out, retval] BSTR* Name);
        [id(0x60020001), propput]
        HRESULT ID([in] BSTR Name);
        [id(0x60020001), propget]
        HRESULT ID([out, retval] BSTR* Name);
        [id(0x60020003), propput]
        HRESULT Merge([in] VARIANT_BOOL retval);
        [id(0x60020003), propget]
        HRESULT Merge([out, retval] VARIANT_BOOL* retval);
        [id(0x60020005), propput]
        HRESULT Action([in] IAP_CONFLICT_OPTION retval);
        [id(0x60020005), propget]
        HRESULT Action([out, retval] IAP_CONFLICT_OPTION* retval);
    };

    [
      odl,
      uuid(681C2531-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPConflicts : IDispatch {
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] IAPConflict** ppConflict);
        [id(0xfffffffc), propget]
        HRESULT Enum([out, retval] IUnknown** retval);
        [id(0x60020002)]
        HRESULT Clear();
        [id(0x60020003), propget]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(681C2532-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPGroup : IDispatch {
        [id(0x60020000)]
        HRESULT Clear();
        [id(0x60020001)]
        HRESULT Add([in] VARIANT Item);
        [id(0x60020002)]
        HRESULT Remove([in] VARIANT Item);
        [id(00000000)]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] VARIANT* pName);
        [id(0xfffffffc), propget]
        HRESULT _NewEnum([out, retval] IUnknown** retval);
        [id(0x60020005), propget]
        HRESULT Count([out, retval] long* pCount);
        [id(0x60020006), propget]
        HRESULT DataObject([out, retval] IUnknown** pDataObject);
        [id(0x60020007)]
        HRESULT Export([in, optional, defaultvalue("")] BSTR filename);
        [id(0x60020008)]
        HRESULT CopyToClipboard();
    };

    [
      odl,
      uuid(681C2535-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPPasteParam : IDispatch {
        [id(0x60020000), propget]
        HRESULT ID([out, retval] BSTR* Name);
        [id(0x60020001), propput]
        HRESULT Label([in] BSTR Name);
        [id(0x60020001), propget]
        HRESULT Label([out, retval] BSTR* Name);
        [id(0x60020003), propput]
        HRESULT Value([in] BSTR Name);
        [id(0x60020003), propget]
        HRESULT Value([out, retval] BSTR* Name);
    };

    [
      odl,
      uuid(681C2536-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPPasteParams : IDispatch {
        [id(00000000), propget]
        HRESULT Item(
                        [in] VARIANT index, 
                        [out, retval] IAPPasteParam** pParam);
        [id(0xfffffffc), propget]
        HRESULT Enum([out, retval] IUnknown** retval);
        [id(0x60020002), propget]
        HRESULT Count([out, retval] long* pCount);
    };

    [
      odl,
      uuid(681C2537-74A1-4094-9939-73276031FCB4),
      helpstring("Marking interface."),
      dual,
      oleautomation
    ]
    interface IAPPasteBuffer : IDispatch {
        [id(0x60020000), propget]
        HRESULT Items([out, retval] IAPPasteItems** retval);
        [id(0x60020001), propget]
        HRESULT Params([out, retval] IAPPasteParams** retval);
        [id(0x60020002), propget]
        HRESULT Conflicts([out, retval] IAPConflicts** retval);
        [id(0x60020003), propput]
        HRESULT Context([in] VARIANT rhs);
        [id(0x60020004)]
        HRESULT Import([in, optional, defaultvalue("")] BSTR filename);
        [id(0x60020005)]
        HRESULT Export([in, optional, defaultvalue("")] BSTR filename);
        [id(0x60020006)]
        HRESULT Commit(
                        [in, optional] VARIANT force, 
                        [in, optional] VARIANT errorLog);
    };

    [
      odl,
      uuid(D5DFF720-922A-40BD-8A2C-229913792D9C),
      helpstring("Functions for accessing large amounts of data from an IHNode or collection of IHNodes"),
      dual,
      oleautomation
    ]
    interface IHNodeSelection : IDispatch {
        [id(0x60020000), helpstring("Create an IHSelection object from the child nodes given in nodePath")]
        HRESULT Select(
                        [in] BSTR nodePath, 
                        [out, retval] IHSelection** Selection);
        [id(0x60020001), helpstring("Returns an array of IHNode objects that are the children of the given node in nodePath.")]
        HRESULT SelectNodes(
                        [in] BSTR nodePath, 
                        [out, retval] VARIANT* nodes);
        [id(0x60020002), helpstring("Returns an array of the value that are the children of the node given in nodePath.")]
        HRESULT SelectValues(
                        [in] BSTR nodePath, 
                        [out, retval] VARIANT* values);
        [id(0x60020003), helpstring("Returns an array of the specified attributes that are the children of the node given in nodePath. The attributes may be strings or HAPAttributeNumbers.")]
        HRESULT SelectAttributes(
                        [in] BSTR nodePath, 
                        [in] VARIANT attributes, 
                        [out, retval] VARIANT* values);
        [id(0x60020004), helpstring("Returns an array of the label attributes that are the children of the given in nodePath. The attributes may be strings or HAPAttributeNumbers.")]
        HRESULT SelectLabelAttributes(
                        [in] BSTR nodePath, 
                        [in] long Dimension, 
                        [in] VARIANT attributes, 
                        [out, retval] VARIANT* values);
        [id(0x60020005), helpstring("Returns an array of the specified attributes for the node given in nodePath. The attributes may be strings or HAPAttributeNumbers.")]
        HRESULT SelectSingleNodeAttributes(
                        [in] BSTR nodePath, 
                        [in] VARIANT attributes, 
                        [out, retval] VARIANT* values);
        [id(0x60020006), helpstring("Returns an array of the specified attributes for the nodes given in nodePath. The attributes may be strings or HAPAttributeNumbers.")]
        HRESULT SelectAttributesOnNodes(
                        [in] VARIANT nodePathArray, 
                        [in] VARIANT attributes, 
                        [out, retval] VARIANT* values);
    };

    [
      odl,
      uuid(35F04526-F10A-4D0D-9C6D-193E8CCD3A5F),
      helpstring("Connection information service.  Obtained using IHappServiceProvider::GetService('HappConnectInfo'). Cast IHapp to IHappServiceProvider to get the service provider object."),
      oleautomation
    ]
    interface IHappConnectInfo : IDispatch {
        [propget, helpstring("Product version string")]
        HRESULT _stdcall Version([out, retval] BSTR* Version);
        [propget, helpstring("Filename of current simulation.")]
        HRESULT _stdcall filename([out, retval] BSTR* Name);
        [propget, helpstring("Engine Run ID")]
        HRESULT _stdcall RunID([out, retval] BSTR* RunID);
        [propget, helpstring("Client working directory ")]
        HRESULT _stdcall ClientDirectory([out, retval] BSTR* path);
        [propget, helpstring("Is Local or Remote?")]
        HRESULT _stdcall IsRemote([out, retval] VARIANT_BOOL* remote);
        [propget, helpstring("User name")]
        HRESULT _stdcall username([out, retval] BSTR* user);
        [propget, helpstring("Server name")]
        HRESULT _stdcall Server([out, retval] BSTR* Server);
        [propget, helpstring("Server working directory ")]
        HRESULT _stdcall ServerDirectory([out, retval] BSTR* path);
    };
};
