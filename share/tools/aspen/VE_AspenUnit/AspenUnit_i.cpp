// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1063

#include "stdafx.h"
#include "AspenUnit_i.h"
#include "VE_AspenUnit.h"
#include "VE_Open/XML/Model/Network.h"
#include "VE_Open/XML/Model/Link.h"
#include "VE_Open/XML/Model/Model.h"
#include "VE_Open/XML/DataValuePair.h"
#include "VE_Open/XML/XMLReaderWriter.h"
#include "VE_Open/XML/Model/Point.h"
#include "VE_Open/XML/Model/Port.h"
#include "VE_Open/XML/Command.h"
#include "VE_Open/XML/XMLObjectFactory.h"
#include "VE_Open/XML/XMLCreator.h"
#include "VE_Open/XML/Shader/ShaderCreator.h"
#include "VE_Open/XML/Model/ModelCreator.h"
#include "VE_Open/XML/CAD/CADCreator.h"
#include <fstream>
#include <iostream>

// Implementation skeleton constructor
Body_Unit_i::Body_Unit_i( Body::Executive_ptr exec, std::string name, /*BKPParser* parser,*/ CVE_AspenUnitDlg * dialog, CorbaUnitManager * parent)
  : executive_(Body::Executive::_duplicate(exec))
{
  VE_XML::XMLObjectFactory::Instance()->RegisterObjectCreator( "XML",new VE_XML::XMLCreator() );
  VE_XML::XMLObjectFactory::Instance()->RegisterObjectCreator( "Shader",new VE_XML::VE_Shader::ShaderCreator() );
  VE_XML::XMLObjectFactory::Instance()->RegisterObjectCreator( "Model",new VE_XML::VE_Model::ModelCreator() );
  VE_XML::XMLObjectFactory::Instance()->RegisterObjectCreator( "CAD",new VE_XML::VE_CAD::CADCreator() );
  UnitName_=name;
  return_state = 0;
  //bkp = parser;
  bkp = new BKPParser();
  //theParent->CreateParser();
  //bkp = theParent->CreateParser();
  theDialog = dialog;
  theParent = parent;
  AspenLog = reinterpret_cast<CEdit *>(theDialog->GetDlgItem(IDC_EDIT1));
}

// Implementation skeleton destructor
Body_Unit_i::~Body_Unit_i (void)
{
}

void Body_Unit_i::ShowAspen()
{
	bkp->showAspen(true);
}

void Body_Unit_i::HideAspen()
{
	bkp->showAspen(false);
}

void Body_Unit_i::CloseAspen()
{
	bkp->closeFile();
}

void Body_Unit_i::SaveAspen()
{
	bkp->saveFile();
}

void Body_Unit_i::StepSim()
{
	bkp->step();
}

void Body_Unit_i::StartCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	executive_->SetModuleMessage(cur_id_,"Simulation running...\n");
	bkp->aspendoc->runSolver(false);
	executive_->SetModuleMessage(cur_id_,"Simulation completed.\n");
	return_state=0;
}

void Body_Unit_i::StopCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(cur_id_,msg.c_str());

}

void Body_Unit_i::PauseCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(cur_id_,msg.c_str());
}

void Body_Unit_i::Resume (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(cur_id_,msg.c_str());
}

char * Body_Unit_i::GetStatusMessage (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	VE_XML::Command returnState;

	returnState.SetCommandName("statusmessage");
	VE_XML::DataValuePairWeakPtr data=returnState.GetDataValuePair(-1);
	data->SetDataName("RETURN_STATE");
	data->SetDataType("UNSIGNED INT");
	data->SetDataValue(return_state);
	
	std::vector< std::pair< VE_XML::XMLObject*, std::string > > nodes;

	nodes.push_back( 
                  std::pair< VE_XML::XMLObject*, std::string >( &returnState, "Command" ) 
                     );
	VE_XML::XMLReaderWriter commandWriter;
	std::string status="returnString";
	commandWriter.UseStandaloneDOMDocumentManager();
	commandWriter.WriteXMLDocument( nodes, status, "vecommand" );
    return CORBA::string_dup(status.c_str());
}

char * Body_Unit_i::GetUserData (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	char * result;
	return result;
}

void Body_Unit_i::SetID (
    ::CORBA::Long id
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
  // no need to implement this
}

void Body_Unit_i::SetCurID (
    ::CORBA::Long id
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
  // no need to implement this
}


::Types::ArrayLong* Body_Unit_i::GetID (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
	return &ids_;
}

CORBA::Long Body_Unit_i::GetCurID (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
    return cur_id_;
}

void Body_Unit_i::DeleteModuleInstance(CORBA::Long id) 
ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
	return; //do nothing;
}

void Body_Unit_i::SetName (
    const char * name
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	UnitName_ = std::string(name);
}

char * Body_Unit_i::GetName (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
    return CORBA::string_dup(UnitName_.c_str());
}

char * Body_Unit_i::Query ( const char * query_str
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
	VE_XML::XMLReaderWriter networkWriter;
	networkWriter.UseStandaloneDOMDocumentManager();
	networkWriter.ReadFromString();
	networkWriter.ReadXMLData( query_str, "Command", "vecommand" );
	std::vector< VE_XML::XMLObject* > objectVector = networkWriter.GetLoadedXMLObjects();

	VE_XML::Command* cmd;	
	std::string cmdname;
	
	cmd = dynamic_cast< VE_XML::Command* >( objectVector.at( 0 ) );
	cmdname = cmd->GetCommandName();
	AspenLog->SetSel(-1, -1);
	AspenLog->ReplaceSel(("Command: "+cmdname+"\r\n").c_str());
	char * returnValue = "empty";

	if (cmdname=="getNetwork")
	{
		//bkp = theParent->CreateParser();
		//theParent->CreateParser();
		//bkp = new BKPParser();
		returnValue = handleGetNetwork(cmd);
		return returnValue;
	}
	else if(cmdname=="openSimulation")
	{
		returnValue = handleOpenSimulation(cmd);
		return returnValue;
	}
	else if (cmdname=="runNetwork")
	{
		StartCalc();
		return CORBA::string_dup("networkRun");
	}
	else if (cmdname=="stepNetwork")
	{
		StepSim();
		return CORBA::string_dup("networkRun");
	}
	else if (cmdname=="showSimulation")
	{
		ShowAspen();
		return CORBA::string_dup("Simulation Shown.");
	}
	else if (cmdname=="hideSimulation")
	{
		HideAspen();
		return CORBA::string_dup("Simulation hidden.");
	}
	else if (cmdname=="closeSimulation")
	{
		AspenLog->SetSel(-1, -1);
		AspenLog->ReplaceSel("closing...\r\n");
		CloseAspen();
		AspenLog->SetSel(-1, -1);
		AspenLog->ReplaceSel("closed.\r\n");
		return CORBA::string_dup("Simulation closed.");
	}
	else if (cmdname=="saveSimulation")
	{
		AspenLog->SetSel(-1, -1);
		AspenLog->ReplaceSel("saving...\r\n");
		try
		{
			SaveAspen();
		    AspenLog->SetSel(-1, -1);
		    AspenLog->ReplaceSel("saved.\r\n");
		}
		catch(...)
		{
			AspenLog->SetSel(-1, -1);
			AspenLog->ReplaceSel("messed up save.\r\n");
		}
		return CORBA::string_dup("Simulation Saved.");
	}
	else if (cmdname=="saveAsSimulation")
	{
		returnValue = handleSaveAs(cmd);
		return returnValue;
	}

	//Blocks
	else if (cmdname=="getInputModuleParamList")
	{
		executive_->SetModuleMessage(cur_id_,"Querying inputs...\n");
		returnValue = handleGetInputModuleParamList(cmd);
		executive_->SetModuleMessage(cur_id_,"Querying completed.\n");
		return returnValue;
	}
	else if (cmdname=="getInputModuleProperties")
	{
		returnValue = handleGetInputModuleProperties(cmd);
		return returnValue;
	}
	else if (cmdname=="getOutputModuleParamList")
	{
		executive_->SetModuleMessage(cur_id_,"Querying outputs...\n");
		returnValue = handleGetOutputModuleParamList(cmd);
		executive_->SetModuleMessage(cur_id_,"Querying completed.\n");
		return returnValue;
	}
	else if (cmdname=="getOutputModuleProperties")
	{
		returnValue = handleGetOutputModuleProperties(cmd);
		return returnValue;
	}
	
	//Streams
	else if (cmdname=="getStreamInputModuleParamList")
	{
		executive_->SetModuleMessage(cur_id_,"Querying link inputs...\n");
		returnValue = handleGetStreamInputModuleParamList(cmd);
		executive_->SetModuleMessage(cur_id_,"Querying link completed.\n");
		return returnValue;
	}
	else if (cmdname=="getStreamInputModuleProperties")
	{
		returnValue = handleGetStreamInputModuleProperties(cmd);
		return returnValue;
	}
	else if (cmdname=="getStreamOutputModuleParamList")
	{
		executive_->SetModuleMessage(cur_id_,"Querying link outputs...\n");
		returnValue = handleGetStreamOutputModuleParamList(cmd);
		executive_->SetModuleMessage(cur_id_,"Querying link completed.\n");
		return returnValue;
	}
	else if (cmdname=="getStreamOutputModuleProperties")
	{
		returnValue = handleGetStreamOutputModuleProperties(cmd);
		return returnValue;
	}

	//Params
	else if (cmdname=="setParam")
	{
		SetParam(cmd);
		return CORBA::string_dup("Param Set");
	}
	else
		return CORBA::string_dup("NULL");
}

char* Body_Unit_i::handleGetNetwork(VE_XML::Command* cmd)
{
    CEdit *Display;
    Display = reinterpret_cast<CEdit *>(theDialog->GetDlgItem(IDC_EDIT2));

	//this command has no params
	bool firsttime=true;

	std::string filename = cmd->GetDataValuePair(1)->GetDataString();
	if (firsttime)
	{
		Display->SetWindowText(filename.c_str());
		bkp->openFile(filename.c_str());
		firsttime=false;
	}
	   
    //Display->SetWindowText(filename.c_str());

	std::string network = bkp->CreateNetwork();
	std::ofstream output("returnString.txt");
	output<<"Return String"<<std::endl;
	output<<network<<std::endl;
	output.close();   
	
	//Display = reinterpret_cast<CEdit *>(theDialog->GetDlgItem(IDC_EDIT1));
    //Display->set->SetWindowText(network.c_str());

		//AspenLog->SetSel(-1, -1);
		//AspenLog->ReplaceSel(network.c_str());
	return CORBA::string_dup(network.c_str());
}

char* Body_Unit_i::handleOpenSimulation(VE_XML::Command* cmd)
{
    CEdit *Display;
    Display = reinterpret_cast<CEdit *>(theDialog->GetDlgItem(IDC_EDIT2));

	//this command has no params
	std::string filename = cmd->GetDataValuePair(1)->GetDataString();
	Display->SetWindowText(filename.c_str());
	bkp->openFile(filename.c_str());
	return CORBA::string_dup("Simulation Opened.");
}

char* Body_Unit_i::handleSaveAs(VE_XML::Command* cmd)
{
	AspenLog->SetSel(-1, -1);
	AspenLog->ReplaceSel("saving...\r\n");
	std::string filename = cmd->GetDataValuePair(1)->GetDataString();
	bkp->saveAs(filename.c_str());
	AspenLog->SetSel(-1, -1);
	AspenLog->ReplaceSel("saved.\r\n");
	return CORBA::string_dup("Simulation Saved.");
}

//BLOCKS
char* Body_Unit_i::handleGetInputModuleParamList(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="ModuleId")
			curPair->GetData(modId);
	}

	//There shouldn't be two intances of an Aspen framework. so discard the moduleId
	//the returned string will be a well formated XML within "vecommand" element
	std::string netPak = bkp->GetInputModuleParams(modname);
	return CORBA::string_dup(netPak.c_str());
}

char* Body_Unit_i::handleGetInputModuleProperties(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname,paramName;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="moduleId")
			curPair->GetData(modId); //modId is discarded because of the same reason as before
		else if (curPair->GetDataName()=="ParamName")
			paramName=curPair->GetDataString();
	}
	std::string netPak = bkp->GetInputModuleParamProperties(modname, paramName);
	return CORBA::string_dup(netPak.c_str());

}

char* Body_Unit_i::handleGetOutputModuleParamList(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="ModuleId")
			curPair->GetData(modId);
	}

	//There shouldn't be two intances of an Aspen framework. so discard the moduleId
	//the returned string will be a well formated XML within "vecommand" element
	std::string netPak = bkp->GetOutputModuleParams(modname);
	return CORBA::string_dup(netPak.c_str());
}

char* Body_Unit_i::handleGetOutputModuleProperties(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname,paramName;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="moduleId")
			curPair->GetData(modId); //modId is discarded because of the same reason as before
		else if (curPair->GetDataName()=="ParamName")
			paramName=curPair->GetDataString();
	}
	std::string netPak = bkp->GetOutputModuleParamProperties(modname, paramName);
	return CORBA::string_dup(netPak.c_str());

}

//Streams
char* Body_Unit_i::handleGetStreamInputModuleParamList(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="ModuleId")
			curPair->GetData(modId);
	}

	//There shouldn't be two intances of an Aspen framework. so discard the moduleId
	//the returned string will be a well formated XML within "vecommand" element
	std::string netPak = bkp->GetStreamInputModuleParams(modname);
	return CORBA::string_dup(netPak.c_str());
}

char* Body_Unit_i::handleGetStreamInputModuleProperties(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname,paramName;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="moduleId")
			curPair->GetData(modId); //modId is discarded because of the same reason as before
		else if (curPair->GetDataName()=="ParamName")
			paramName=curPair->GetDataString();
	}
	std::string netPak = bkp->GetStreamInputModuleParamProperties(modname, paramName);
	return CORBA::string_dup(netPak.c_str());

}

char* Body_Unit_i::handleGetStreamOutputModuleParamList(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="ModuleId")
			curPair->GetData(modId);
	}

	//There shouldn't be two intances of an Aspen framework. so discard the moduleId
	//the returned string will be a well formated XML within "vecommand" element
	std::string netPak = bkp->GetStreamOutputModuleParams(modname);
	return CORBA::string_dup(netPak.c_str());
}

char* Body_Unit_i::handleGetStreamOutputModuleProperties(VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname,paramName;
	unsigned int modId;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="moduleId")
			curPair->GetData(modId); //modId is discarded because of the same reason as before
		else if (curPair->GetDataName()=="ParamName")
			paramName=curPair->GetDataString();
	}
	std::string netPak = bkp->GetStreamOutputModuleParamProperties(modname, paramName);
	return CORBA::string_dup(netPak.c_str());

}

//PARAMS
void Body_Unit_i::SetParams (CORBA::Long id,
    const char * param)
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
   //discard the id, it is not used;
   unsigned int i,j;
   VE_XML::XMLReaderWriter networkWriter;
   networkWriter.UseStandaloneDOMDocumentManager();
   networkWriter.ReadFromString();
   networkWriter.ReadXMLData( param, "Command", "vecommand" );
   std::vector< VE_XML::XMLObject* > objectVector = networkWriter.GetLoadedXMLObjects();
  
   //this part would need rewrite later
   for (i=0; i<objectVector.size(); i++)
   {
		VE_XML::Command* param = dynamic_cast< VE_XML::Command* >( objectVector.at( i ) );
		std::string paramName = param->GetCommandName();
		
		unsigned int num = param->GetNumberOfDataValuePairs();
		for (j=0; j<num; j++)
		{
			VE_XML::DataValuePairWeakPtr curPair= param->GetDataValuePair("NodePath");
			CString nodepath = curPair->GetDataString().c_str();
			curPair = param->GetDataValuePair("Value");
			CString nodevalue = curPair->GetDataString().c_str();

			CASI::Variable cur_var=bkp->aspendoc->getVarByNodePath(nodepath);
			cur_var.setValue(nodevalue);
			
		}
   }
}
void Body_Unit_i::SetParam (VE_XML::Command* cmd)
{
	unsigned int num = cmd->GetNumberOfDataValuePairs();
	std::string modname,paramName, paramValue;
	int i;

	for (i=0; i < (int)num; i++)
	{
		VE_XML::DataValuePairWeakPtr curPair= cmd->GetDataValuePair(i);
		if (curPair->GetDataName()=="ModuleName")
			modname=curPair->GetDataString();
		else if (curPair->GetDataName()=="ParamName")
			paramName=curPair->GetDataString();
		else if (curPair->GetDataName()=="ParamValue")
			paramValue=curPair->GetDataString();
	}
	
	CASI::CASIObj cur_block = bkp->aspendoc->getBlockByName(modname.c_str());
	CASI::Variable tempvar = cur_block.getInputVarByName(paramName.c_str());
	CASI::Variable cur_var = bkp->aspendoc->getVarByNodePath(tempvar.getNodePath());
	CString newValue;
	newValue = paramValue.c_str();
	bool success = cur_var.setValue(newValue);
}
