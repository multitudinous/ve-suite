##Builds AspenUnit
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR xerces_options tao_options RootDir buildDir GetPlatform')

srcs = Split("""
   AspenUnit_i.cxx
   BKPParser.cxx
   DynParser.cxx
   CorbaUnitManager.cxx
   VE_AspenUnit.cxx
   VE_AspenUnitDlg.cxx
   AspenPlusLUT.cxx
   AspenDynamicsLUT.cxx
   AspenIconData.cxx
""")

headers = Split("""
   AspenUnit_i.h
   BKPParser.h
   DynParser.h
   CorbaUnitManager.h
   VE_AspenUnit.h
   VE_AspenUnitDlg.h
   AspenPlusLUT.h
   AspenDynamicsLUT.h
   AspenIconData.h
""")

env = ves_pkg.getEnv().Copy()
#env['MSVS_IGNORE_IDE_PATHS'] = 1
env['MSVS_USE_MFC_DIRS'] = 1

env.Clone(WINDOWS_INSERT_DEF = 1)
env.Append( CPPDEFINES = ['WIN32'])
env.Append( CPPDEFINES = ['_WINDOWS'])
env.Append( CPPDEFINES = ['_AFXDLL'])

#env.Append( CPPFLAGS = ['/Gy'])
#env.Append( CPPFLAGS = ['/GS'])
#env.Append( CPPFLAGS = ['/G7'])

env.Append( CPPPATH = [pj('#', 'src')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib','aspenplus_2006.5')] )
env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','AspenDynamicsInterface')] )
env.Append( CPPPATH = [pj('#', buildDir, 'src', 'ves', 'open')] )

env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','CASIlib')])
env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','AspenDynamicsInterface')])
env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open')])
env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open','xml')])

env.Append(LIBS = ['CASIlib'])
env.Append(LIBS = ['AspenDynamicsInterface'])
env.Append(LIBS = ['ves_open_module'])
env.Append(LIBS = ['ves_open_xml'])
env.Append(LIBS = ['ves_open_xml'])
env.Append(LIBS = ['gdiplus'])
env.Append(LIBS = ['odbc32.lib'])
env.Append(LIBS = ['odbccp32.lib'])

env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

#env.Append( RCFLAGS = ['/L 0x409'])

ves_res=env.RES('VE_AspenUnit.rc')
for res in ves_res:
  srcs.append(res)

#srcs.append('VE_AspenUnit_d.exe.embed.manifest.res')
  
xerces_options.apply( env )
tao_options.apply( env )

prog = ves_pkg.createProgram('AspenUnit' + env["PROGSUFFIX"], env, 'bin')
prog.addSources( srcs )
prog.addHeaders( headers )
prog.build()
