// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1001

#ifndef MODULEI_H_
#define MODULEI_H_
#include "bkpparser.h"
#include <ves/open/moduleS.h>
#include <ves/open/xml/Command.h>
#include "VE_AspenUnit.h"
#include "VE_AspenUnitDlg.h"
#include "CorbaUnitManager.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
#pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


class  Body_Unit_i
  : public virtual POA_Body::Unit
{
public:
  // Constructor 
   Body_Unit_i (Body::Executive_ptr exec, std::string name, /*BKPParser* parser,*/ CVE_AspenUnitDlg * dialog, CorbaUnitManager * parent);
  //Body_Unit_i() {};
  //Destructor 
  virtual ~Body_Unit_i (void);
  
  std::string UnitName_;
  Types::ArrayLong ids_;
  ::CORBA::Long cur_id_;

  std::string status_;
  std::string data_;

 protected:
  Body::Executive_var executive_;
  unsigned int return_state;
  CVE_AspenUnitDlg * theDialog;
  CorbaUnitManager * theParent;
  CEdit * AspenLog;

public:
  BKPParser* bkp;
  
  void ShowAspen ();  
  void HideAspen ();  
  void CloseAspen ();
  void SaveAspen ();
  void StepSim ();
  
  virtual
  void StartCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void StopCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void PauseCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void Resume (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetStatusMessage (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetUserData (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
	  void SetParams (CORBA::Long id,
      const char * param
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void SetID (
      ::CORBA::Long id
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));

  virtual
  void SetCurID (
      ::CORBA::Long id
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
	  ::Types::ArrayLong* GetID (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
	  ::CORBA::Long GetCurID (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));

  virtual void Body_Unit_i::DeleteModuleInstance(CORBA::Long id) 
	ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ));

  virtual
  void SetName (
      const char * name
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetName (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * Query (const char* commands
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));

  char* handleGetNetwork(ves::open::xml::Command* cmd);
  char* handleOpenSimulation(ves::open::xml::Command* cmd);
  char* handleSaveAs(ves::open::xml::Command* cmd);
  char* handleGetInputModuleParamList(ves::open::xml::Command* cmd);
  char* handleGetInputModuleProperties(ves::open::xml::Command* cmd);
  char* handleGetOutputModuleParamList(ves::open::xml::Command* cmd);
  char* handleGetOutputModuleProperties(ves::open::xml::Command* cmd);
  char* handleGetStreamInputModuleParamList(ves::open::xml::Command* cmd);
  char* handleGetStreamInputModuleProperties(ves::open::xml::Command* cmd);
  char* handleGetStreamOutputModuleParamList(ves::open::xml::Command* cmd);
  char* handleGetStreamOutputModuleProperties(ves::open::xml::Command* cmd);
  void SetParam(ves::open::xml::Command* cmd);
};


#endif /* MODULEI_H_  */

