/*************** <auto-copyright.rb BEGIN do not edit this line> **************
 *
 * VE-Suite is (C) Copyright 1998-2011 by Iowa State University
 *
 * Original Development Team:
 *   - ISU's Thermal Systems Virtual Engineering Group,
 *     Headed by Kenneth Mark Bryden, Ph.D., www.vrac.iastate.edu/~kmbryden
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------
 * Date modified: $Date$
 * Version:       $Rev$
 * Author:        $Author$
 * Id:            $Id$
 * -----------------------------------------------------------------
 *
 *************** <auto-copyright.rb END do not edit this line> ***************/
// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1001

#ifndef MODULEI_H_
#define MODULEI_H_
//#include "BKPParser.h"
//#include "DynParser.h"
#include "DynSimParser.h"
#include <ves/open/moduleS.h>
#include <ves/open/xml/CommandPtr.h>
#include "DynSimUnit.h"
#include "DynSimUnitDlg.h"
#include "CorbaUnitManager.h"
#include <vpr/Thread/Thread.h>

#include <set>

class  AspenUnit_i : public virtual POA_Body::Unit
{
public:
    // Constructor 
    AspenUnit_i (std::string name, CDynSimUnitDlg * dialog,
        CorbaUnitManager * parent, std::string dir );
    //AspenUnit_i() {};
    //Destructor 
    virtual ~AspenUnit_i (void);

    std::string UnitName_;
    Types::ArrayLong ids_;
    ::CORBA::Long cur_id_;

    std::string status_;
    std::string data_;

protected:
    //Body::Executive_var executive_;
    unsigned int return_state;
    CDynSimUnitDlg * theDialog;
    CorbaUnitManager * theParent;
    CEdit * AspenLog;
    std::set< std::string > mQueryCommandNames;
    std::string mWorkingDir;
    std::string mFileName;
    ACE_Thread_Mutex _mutex;
    bool mQuerying;

public:
    DynSimParser* dynsim;
  
  virtual
  void StartCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void StopCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void PauseCalc (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void Resume (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetStatusMessage (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetUserData (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
      void SetParams (CORBA::Long id,
      const char * param
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  void SetID (
      ::CORBA::Long id
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));

  virtual
  void SetCurID (
      ::CORBA::Long id
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
      ::Types::ArrayLong* GetID (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
      ::CORBA::Long GetCurID (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));

  virtual void AspenUnit_i::DeleteModuleInstance(CORBA::Long id) 
    ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ));

  virtual
  void SetName (
      const char * name
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * GetName (
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  
  virtual
  char * Query (const char* commands
      
    )
    ACE_THROW_SPEC ((
      ::CORBA::SystemException,
      ::Error::EUnknown
    ));
  char* handleGetNetwork(ves::open::xml::CommandPtr cmd);
  //char* getOPCValue( ves::open::xml::CommandPtr cmd );
  char* getOPCValues( ves::open::xml::CommandPtr cmd );
  char* setOPCValues( ves::open::xml::CommandPtr cmd );
  //void monitorValues( ves::open::xml::CommandPtr cmd );
  void connectWithList( ves::open::xml::CommandPtr cmd );
  void connectToOPC( ves::open::xml::CommandPtr cmd );
  void addVariable( ves::open::xml::CommandPtr cmd );
  char* getAllOPCVariables( ves::open::xml::CommandPtr cmd );
  void UpdateVars( );
  void Monitor( );
  bool connected;

  
    vpr::Thread* m_thread;
    //CWinThread *m_Thread;

private:
  //bool bkpFlag;
  //bool dynFlag;
  //bool xmlFlag;
};


#endif /* MODULEI_H_  */

