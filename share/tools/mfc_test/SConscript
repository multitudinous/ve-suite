##Builds mfc test dlg
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('baseEnv ves_pkg LIBDIR xerces_options tao_options RootDir vpr_options buildDir GetPlatform')

openDir = os.path.abspath( pj( RootDir, 'share', 'tools', 'mfc_test' ) )
sources = sca_util.getSourcesRecursive( openDir )
headers = sca_util.getHeadersRecursive( openDir )

env = ves_pkg.getEnv().Clone()

#to get an mfc to work correctly it appears we need to remove
#optimization from the compile line
list = env.Dictionary( 'CCFLAGS' )

for item in list:
    if item == ['/O2']:
        list.remove( ['/O2'] )
    if item == ['/fp:fast']:
        list.remove( ['/fp:fast'] )
    if item == ['/O1']:
        list.remove( ['/O1'] )

env.Replace( CPPFLAGS = list )

env.Clone(WINDOWS_INSERT_DEF = 1)
env.Append( CPPDEFINES = ['WIN32'])
env.Append( CPPDEFINES = ['_WINDOWS'])
env.Append( CPPDEFINES = ['_AFXDLL'])

#env.Append( CPPFLAGS = ['/Gy'])
#env.Append( CPPFLAGS = ['/GS'])
#env.Append( CPPFLAGS = ['/G7'])

#env.Append( CPPPATH = [pj('#', 'src')] )
#env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib')] )
#env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','CASIlib','aspenplus_2006.5')] )
#env.Append( CPPPATH = [pj('#', 'share', 'tools', 'aspen','AspenDynamicsInterface')] )
#env.Append( CPPPATH = [pj('#', buildDir, 'src', 'ves', 'open')] )

#env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','CASIlib')])
#env.Append(LIBPATH = [pj('#', buildDir, 'share','tools','aspen','AspenDynamicsInterface')])
#env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open')])
#env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open','xml')])

#env.Append(LIBS = ['CASIlib'])
#env.Append(LIBS = ['AspenDynamicsInterface'])
#env.Append(LIBS = ['ves_open_module'])
#env.Append(LIBS = ['ves_open_xml'])
#env.Append(LIBS = ['ves_open_xml'])
#env.Append(LIBS = ['gdiplus'])
#env.Append(LIBS = ['odbc32.lib'])
#env.Append(LIBS = ['odbccp32.lib'])

env.Append(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])

#env.Append( RCFLAGS = ['/L 0x409'])

ves_res=env.RES('mfctestdlg/test.rc')
for res in ves_res:
  sources.append(res)
  
#xerces_options.apply( env )
#tao_options.apply( env )
#vpr_options.apply( env )

prog = ves_pkg.createProgram('mfctestdlg' + env["PROGSUFFIX"], env, 'bin')
prog.addSources( sources )
#prog.addHeaders( headers )
prog.build()
