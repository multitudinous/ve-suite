"""Constructs the docbook documentation for VE-Suite.

Programs used:
xmllint
xalan OR saxon
"""
##Builds docs
import os, sys, string
pj = os.path.join
##sys.path.append(pj(os.getcwd(), '..', '..', 'Tools', 'scons-addons', 'src'))
##sys.path.append(pj(os.getcwd(), '..', '..', 'Tools', 'scons-addons', 'templates'))
##from SConsAddons.EnvironmentBuilder import EnvironmentBuilder

Import('ves_pkg')

# Pull in SConsAddons from the source directory if necessary.
##try:
##   import SConsAddons
##except:
##   sys.path.append(pj(os.getcwd(), '..', '..', 'Tools', 'scons-addons', 'src'))
##   sys.path.append(pj(os.getcwd(), '..', '..', 'Tools', 'scons-addons', 'templates'))
##   import SConsAddons

foTool = "FOP"
fopVersion = "0.20.5"
xsltTool = "Saxon" ##NOTE: Xalan.sh missing from VRAC intranet.
imgPath = "../"
chunkDirectory = "$SOURCE-multipage" ##Doublecheck later.
passedEnvVars = "DOCBOOK_XSL=$XSL_DIR DOCBOOK_ROOT=$DOCBOOK_ROOT" + \
                " SAXON_DIR=$SAXON_DIR XALAN_DIR=$XALAN_DIR" + \
                " DOCBOOK_XSL_VERSION=$DOCBOOK_XSL_VERSION" + \
                " SAXON_VERSION=$SAXON_VERSION"

##Set parameters for the foTool.
if foTool == "FOP":
    if fopVersion == "0.20.5":
        fopScript = "fop.sh"
        fopExtension = "fop.extensions"
    else:
        fopScript = "fop"
        fopExtension = "fop1.extensions"
    foParams = {fopExtension: "1",
                "alignment": "start"}
elif foTool == "Xep":
    foParams = {"xep.extensions": "1"}
elif foTool == "Passive Tex":
    foParams = {"passivetex.extensions": "1",
                "tex.math.in.alt": "latex"}
else:
    ##Put error about unsupported FoTool type here later.
    foParams = {}

##NOTE: Try removing unnecessary vars from this list later.
baseVariables = {"DOCBOOK_XSL_VERSION": "1.67.2",
		 "XALAN_VERSION": "2_5_2",
                 "SAXON_VERSION": "6.5.2",
                 "FOP_VERSION": "0.20.5",
                 "BATIK_VERSION": "1.5.1",
                 "DOCBOOK_ROOT": "/home/vr/Juggler/docbook",
		 "SGML_ROOT": "/usr/share/sgml/docbook"}

derivedVariables = {"BATIK_ROOT": "$DOCBOOK_ROOT/batik-$BATIK_VERSION",
                    "TEX_DIR": "$DOCBOOK_ROOT/TeX",
		    "TEX_BINDIR": "$TEX_DIR/bin/i386-linux",
		    "DB_SGML_DTD": "$DOCBOOK_ROOT/docbook-sgml-4.1.dtd", ##Need these?
		    "DSSSL_DIR": "$DOCBOOK_ROOT/docbook-dsssl-1.76",
                    "XSL_DIR": "$DOCBOOK_ROOT/docbook-xsl-$DOCBOOK_XSL_VERSION"}

appPaths = {"FOP": "sh $DOCBOOK_ROOT/fop-$FOP_VERSION/%s" %(fopScript),
            "HTML2TXT": "html2text",
            "HTML2TXTOPTS": "-ascii -nobs -style pretty -width 76 -rcfile html2text.rc",
            "HTML2TXTFILE": "file:$SOURCE", ##NEED?
            "JADE": "openjade -V tex-backend",
            "JADEPROC": "$DOCBOOK_ROOT/jadeproc.pl",
            "JADETEX": "$TEX_BINDIR/jadetex",
	    "JAVA_HOME": "/usr/java/j2sdk1.4.2_03",
            "PDFJADETEX": "$TEX_BINDIR/pdfjadetex",
            "PDFLATEX": "$TEX_BINDIR/pdflatex",
            "PDFTEX": "$TEX_BINDIR/pdftex",
            "PDFXMLTEX": "$TEX_BINDIR/pdfxmltex",
            "SAXON_DIR": "$DOCBOOK_ROOT/saxon-$SAXON_VERSION",
            "SAXON": "$SAXON_DIR/saxon.sh",
            "TEX_ENV": "PATH=$TEX_BINDIR:$PATH VARTEXMF=$TEX_DIR/texmf-var",
            "XALAN_DIR": "$DOCBOOK_ROOT/xalan-j_$XALAN_VERSION",
            "XALAN": "$XALAN_DIR/bin/xalan.sh",
            "XEP": "sh $DOCBOOK_ROOT/XEP/run.sh",
            "XSLTPROC":	"/usr/bin/xsltproc", ##Need ones after this?
	    "FO_TOOL": "FOP",
	    "XSLT_TOOL": "Saxon"}

xslPaths = {"DOCBOOK_XSL": "$DOCBOOK_ROOT/docbook-xsl-$DOCBOOK_XSL_VERSION",
            "HTML_XSL": "$DOCBOOK_XSL/html/docbook.xsl",
            "CHUNK_HTML_XSL": "$DOCBOOK_XSL/html/chunk.xsl",
	    "FO_XSL": "$DOCBOOK_XSL/fo/docbook.xsl"}


##HTML parameters.
htmlParams = {"html.stylesheet": "base_style.css",
              "img.src.path": imgPath}
htmlChunkParams = {"base.dir": "${TARGET.dir}/"}

##Text parameters. Currently not used.
##if xsltTool == "Xalan":
##    txtParams = {"page.margin.bottom": "0in",
##                 "page.margin.inner": "0in",
##                 "page.margin.outer": "0in",
##                 "page.margin.top": "0in",
##                 "paper.type": "A5"}
##else:
##    txtParams = {}

##Helper methods.
def extraParamsCall(paramType, executable = xsltTool):
    """Returns a $VAR call for grabbing extra user-defined parameters.
    Base form: $EXTRA_(executable)_(paramType)_PARAMS."""
    return "$EXTRA_%s_%s_PARAMS" % (executable.upper(), paramType.upper())

def writeParams(paramDict, executable = xsltTool):
    """Returns a string of {paramDict} for input into {executable}."""
    params = ""
    if executable == "Xalan":
        for member in paramDict:
            params += ' -PARAM %s "%s"' % (member, paramDict[member])
    elif executable == "Saxon":
        for member in paramDict:
            params += ' %s=%s' % (member, paramDict[member])
    else:
        print "Error: %s not supported." % executable ##IMPROVE Error handling
    return params

def fillEnv(env, variable, defaultValue = "None"):
    """If [variable] in [env] is empty, fill it with [defaultValue]."""
    if not env.has_key(variable):
        env[variable] = defaultValue
    ##print variable, env[variable] ##TESTER
    ##env[variable] = env.subst('$%s' % variable)
    ##print variable, env[variable] ##TESTER
    return env

def fillEnvMany(env, dictionary):
    """Calls fillEnv on every variable: value in [dictionary]."""
    for key in dictionary:
        env = fillEnv(env, key, dictionary[key])
    return env ##IMPROVE performance?

##Temporary, until this is changed to SConscript, not SConstruct.
##base_bldr = EnvironmentBuilder()
##env = base_bldr.buildEnvironment()
##env['ENV'] = os.environ

env = ves_pkg.getEnv().Copy()

fillEnvMany(env, baseVariables)
fillEnvMany(env, derivedVariables)
fillEnvMany(env, appPaths)
fillEnvMany(env, xslPaths)

##Import('ves_pkg PREFIX buildDir')

##NOTE: Do NOT put the suffixes of the filenames.
srcs = Split("""
   vesuite
""")

##Build resolveSrcs & foSrcs lists, then rebuild srcs list.
baseDir = pj('#', 'share', 'docs')
resolvedSrcs = map(lambda s: pj(baseDir, "%s.tmp" %(s)), srcs)
foedSrcs = map(lambda s: pj(baseDir, "%s.fo" %(s)), srcs)
htmlTargets = map(lambda s: pj(baseDir, "%s/%s.html" %(s,s)), srcs)
htmlChunkTargets = map(lambda s: pj(baseDir, "%s-multipage/index.html" %(s)), srcs)
textTargets = map(lambda s: pj(baseDir, "%s/%s.txt" %(s,s)), srcs)
pdfTargets = map(lambda s: pj(baseDir, "%s/%s.pdf" %(s,s)), srcs)
srcs = map(lambda s: pj(baseDir, "%s.xml" %(s)), srcs)

##NOTE: Build automated modifier instead of an if/else?
if xsltTool == "Xalan":
    toolCall = "$XALAN"
    inArg = "-in"
    outArg = "-out"
else: ##Saxon
    toolCall = "$SAXON"
    inArg = "-i"
    outArg = "-o"


##Builder for making *.xml into the resolved *.tmp.
##(Replaces reference links with the docs linked.)
xmlAction = 'xmllint --xinclude $SOURCE > $TARGET'
xmlResolveBuilder = Builder(action = xmlAction, single_source = True,
                            suffix = ".tmp")

##foAction = '$(ENV) $(XALAN) -in $SOURCE -xsl $(FO_XSL) -out $*/$TARGET -foParams -extraFoParams'
foAction = '%s %s %s $SOURCE -xsl $FO_XSL %s $TARGET %s %s' % (passedEnvVars, toolCall, inArg, outArg, writeParams(foParams), extraParamsCall("FO"))
foBuilder = Builder(action = foAction, single_source = True, suffix = ".fo")

htmlAction = '%s %s %s $SOURCE -xsl $HTML_XSL %s $TARGET %s %s' % (passedEnvVars, toolCall, inArg, outArg, writeParams(htmlParams), extraParamsCall("HTML"))
htmlBuilder = Builder(action = htmlAction, single_source = True, suffix = ".html")

htmlChunkAction = '%s %s %s $SOURCE -xsl $CHUNK_HTML_XSL %s $TARGET %s %s %s' % (passedEnvVars, toolCall, inArg, outArg, writeParams(htmlParams), extraParamsCall("HTML"), writeParams(htmlChunkParams))
htmlChunkBuilder = Builder(action = htmlChunkAction, single_source = True, suffix = ".html")

##FOP only
textAction = '$HTML2TXT $HTML2TXTOPTS $EXTRA_HTML2TXTOPTS file:$SOURCE > $TARGET'
textBuilder = Builder(action = textAction, single_source = True, suffix = ".txt")

##FOP only
pdfAction = '$FOP $SOURCE $TARGET'
pdfBuilder = Builder(action = pdfAction, single_source = True, suffix = ".pdf")

env.Append(BUILDERS = {'xmlResolve': xmlResolveBuilder,
                       'fo': foBuilder,
                       'html': htmlBuilder,
		       'htmlChunk': htmlChunkBuilder,
		       'text': textBuilder,
		       'pdf': pdfBuilder})

##Resolve the xml files.
env.xmlResolve(srcs)
env.fo(resolvedSrcs)

##Build the docs.

env.html(target = htmlTargets, source = resolvedSrcs)
env.htmlChunk(target = htmlChunkTargets, source = resolvedSrcs)
env.text(target = textTargets, source = htmlTargets)
env.pdf(target = pdfTargets, source = foedSrcs)


















##txtBuild = Builder(action = )
##pdfBuild = Builder(action = )

##htmlAction = '
##htmlBuild = Builder(action = htmlAction)
##multiHtmlBuild = Builder(action = )

##env.Append( LIBPATH = [pj('#', buildDir, 'VE_Xplorer','Utilities')],
##            LIBS = ['VE_UtilLib'])
##env.ParseConfig('flagpoll Boost.Filesystem --libs --cflags')
##vtk_options.apply( env )
##
##prog = ves_pkg.createProgram('preprocessor', env, 'bin')
##prog.addSources( srcs )
##prog.build()

##targetModule = [pj('#','VE_Open','skel','moduleS.h'), 
##          pj('#','VE_Open','skel','moduleC.h')]
##targetVjObs = [pj('#','VE_Open','skel','VjObsS.h'), 
##               pj('#','VE_Open','skel','VjObsC.h')]
##taoPrefix=os.popen('flagpoll TAO --variable=prefix').read().strip()
##env.PrependENVPath( 'LD_LIBRARY_PATH',pj( taoPrefix,'lib'))
##env.PrependENVPath( 'PATH',pj( taoPrefix,'bin'))
##tao_idl ='tao_idl'
##idlCmd = tao_idl + ' -o ./VE_Open/skel -in -GC -GI  -I./VE_Open/idl -Wb,export_macro=VE_OPEN_MODULE_EXPORTS -##Wb,export_include=VE_Installer/include/VEConfig.h ${SOURCES}'
##srcs = [pj('#',buildDir,'VE_Open','idl','module.idl'), 
##        pj('#',buildDir,'VE_Open','idl','VjObs.idl')]
##bld = Builder(action = idlCmd)
##env.Append(BUILDERS = {'tao_idl': bld})
##env.tao_idl(targetModule, pj('#',buildDir,'VE_Open','idl','module.idl'))
##env.tao_idl(targetVjObs, pj('#',buildDir,'VE_Open','idl','VjObs.idl'))
