<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Dependencies</title>

  <para>The following is a list of links for the VE-Suite dependencies .
  Dependencies can be downloaded and built by the user from the following
  links or the pre-compiled binaries can be installed from the download
  page.</para>

  <para>&lt;OpenSceneGraph image&gt;</para>

  <para><ulink url="http://www.openscenegraph.org/">OpenSceneGraph
  (OSG)</ulink> can be used to manage the scenegraph instead of OpenGL
  Performer.</para>

  <para>&lt;VTK image&gt;</para>

  <para><ulink url="http://vtk.org/get-software.php#interim">VTK</ulink> is
  used to render the visualization objects.</para>

  <para>&lt;CMake image&gt;</para>

  <para><ulink url="http://www.cmake.org/HTML/Index.html">CMake</ulink> is
  needed to build the VTK.</para>

  <para>&lt;VRJuggler image&gt;</para>

  <para><ulink
  url="http://sourceforge.net/project/showfiles.php?group_id=8041">VRJuggler</ulink>
  is used for management of the virtual environment.</para>

  <para><ulink
  url="http://sourceforge.net/project/showfiles.php?group_id=8041">VRJuggler
  dependencies zip file</ulink></para>

  <para><ulink url="http://java.sun.com/j2se/1.4.2/download.html">Java 2
  SDK</ulink> is needed for Juggler's java-based VRJconfig program.</para>

  <para>&lt;wxWidgets image&gt;</para>

  <para><ulink url="http://www.wxwidgets.org/">wxWidgets</ulink> is used to
  compile and run the gui. (Click "download" on the left side menu to get to
  the files.)</para>

  <para><ulink
  url="http://xml.apache.org/xerces-c/download.cgi">Xerces</ulink> is used to
  read and write XML. (Download <ulink
  url="http://xml.apache.org/xerces-c/download.cgi">xerces-c-current</ulink>)</para>

  <para>&lt;ACE/TAO image&gt;</para>

  <para><ulink url="http://deuce.doc.wustl.edu/Download.html">ACE/TAO</ulink>
  is used for cross-platform communications.</para>

  <para>&lt;python image&gt;</para>

  <para>VE-Launcher was coded using <ulink
  url="http://www.python.org/">Python</ulink>. It can run in Python2.3 or
  higher. If you are running it from Python, you need to install these
  extensions for Python as well:</para>

  <para>Windows: VE-Launcher requires these <ulink
  url="https://sourceforge.net/project/showfiles.php?group_id=78018">Win32
  extensions</ulink> if you're running it in Python for Windows.</para>

  <para>&lt;wxPython image&gt;</para>

  <para>VE-Launcher requires <ulink
  url="http://wxpython.org/">wxPython</ulink> 2.6.3.3 if you're running it in
  Python.</para>

  <section id="building_dependencies_on_windows">
    <title>Building Dependencies on Windows</title>

    <para>It is best to read the specific installation/build instructions for
    each dependency before attempting to build. The information provided is
    for specific details to allow VE-Suite to build/run correctly.</para>

    <para>VE-Suite and its dependencies are currently built and tested using
    Visual Studio 7.1(2003).</para>

    <para><emphasis role="bold">Notes on installation of
    dependencies</emphasis></para>

    <itemizedlist>
      <listitem>
        <para><ulink url="http://tortoisesvn.tigris.org/">TortoiseSVN</ulink>
        - Used to check out and update VE-Suite from ISU's code
        repository.</para>
      </listitem>

      <listitem>
        <para>After TortoiseSVN is installed, you can check out the code if
        you have an account registered with ISU's repository. Create a
        VE-Suite folder. Right-click on the VE-Suite folder and choose
        "Checkout...". For URL, enter <ulink
        url="https://subversion.vrac.iastate.edu/svn/TSVEG/VE_Suite">https://subversion.vrac.iastate.edu/svn/TSVEG/VE_Suite</ulink>.</para>
      </listitem>

      <listitem>
        <para>Alternately, if you get the VE-Suite source code as a compressed
        tarball, some unzip utilities may not maintain the correct directory
        structure. This can be fixed by unzipping the files on a Unix-based
        system and then moving the files to the Windows machine.</para>
      </listitem>

      <listitem>
        <para>While the default locations for installations will work, we
        recommend creating a directory in the root (C:) directory to minimize
        the path lengths and the accompanying potential for typos when
        configuring environment settings.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">vtk-specific notes</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>After downloading the compressed vtk source code and the CMake
        installer, unzip the vtk source to C:VTK-4.4-LatestRelease and run the
        CMake setup program (e.g., CMSetup205.exe) to install
        CMakeSetup.</para>
      </listitem>

      <listitem>
        <para>Go to C:VTK-4.4-LatestRelease. You will have a "VTK" folder
        containing the vtk source code. Create two additional folders: "build"
        and "install".</para>
      </listitem>

      <listitem>
        <para>Run CMakeSetup, and enter C:VTK-4.4-LatestReleaseVTK as source
        code location and C:VTK-4.4-LatestReleasebuild as the place to build
        the binaries. Check the box "Show Advanced Values" and press
        <guibutton>Configure</guibutton>.</para>
      </listitem>

      <listitem>
        <para>Change some options from their default values:</para>

        <orderedlist>
          <listitem>
            <para>BUILD_SHARED_LIBS to ON</para>
          </listitem>

          <listitem>
            <para>BUILD_TESTING to OFF</para>
          </listitem>

          <listitem>
            <para>CMAKE_INSTALL_PREFIX to
            C:VTK-4.4-LatestReleaseinstall</para>
          </listitem>

          <listitem>
            <para>VTK_USE_HYBRID to ON</para>
          </listitem>

          <listitem>
            <para>VTK_USE_PARALLEL to ON</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Press <emphasis role="bold">Configure</emphasis> (you may need
        to do it twice), then <guibutton>OK</guibutton>.</para>
      </listitem>

      <listitem>
        <para>Go to C:VTK-4.4-LatestReleasebuild. Double click on
        "VTK.sln".</para>
      </listitem>

      <listitem>
        <para>Left-click on ALL_BUILD, then right-click and select
        "Build".</para>
      </listitem>

      <listitem>
        <para>When the build is finished, go to
        C:VTK-4.4-LatestReleasebuildCMakedebug and move the .dll files up one
        level.</para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">When building ACE and TAO</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>You need to create a file called "config.h" in the
        ACE_wrappersace directory, with the line '#include
        "ace/config-win32.h"' in the file.</para>
      </listitem>

      <listitem>
        <para>The workspace file ACE_wrappersTAOTAOACE.dsw will need to be
        converted to solution (.sln) files.</para>
      </listitem>

      <listitem>
        <para>ACE_ROOT and TAO_ROOT must be established and ACE_ROOTbin placed
        in your $PATH before building ACE and TAO. This can be done using a
        batch file (.BAT) with these lines:</para>

        <para><code> set ACE_ROOT=C:ACE_wrappers </code></para>

        <para><code> set TAO_ROOT=%ACE_ROOT%TAO </code></para>

        <para><code> set Path=%Path%;%ACE_ROOT%bin </code></para>

        <para><code> "C:Program FilesMicrosoft Visual Studio .NET
        2003Common7IDEdevenv.exe" ./TAOACE.sln</code></para>
      </listitem>
    </itemizedlist>

    <para><emphasis role="bold">Other dependency notes</emphasis></para>

    <para>For wxWidgets, load the .dsw file build/msw/wx_dll.dsw and build
    using the DLL Debug configuration.</para>

    <para><emphasis role="bold">NOTE:</emphasis> For openGL support change
    this flag, wxUSE_GLCANVAS, to 1 in the file include/wx/msw/setup.h. For
    Xerces, the .sln file is
    Projects/Win32/VC7.1/xerces-all/xerces-all.sln.</para>

    <para><emphasis role="bold">NOTE:</emphasis> Xerces 2.7 has the Run Time
    Type Information (RTTI) configuration off by default. Therefore,
    right-click on the XercesLib project, select
    properties-&gt;C/C++-&gt;Language and change the "Enable Run-Time Type
    Info" setting to "Yes(/GR)" Then proceed building the solution.</para>
  </section>

  <section id="building_dependencies_on_unix">
    <title>Building Dependencies on UNIX/Linux</title>

    <para>It is best to read the specific installation/build instructions for
    each dependency before attempting to build. The information here is
    provided for specific details to allow VE-Suite to build/run
    correctly.</para>

    <section id="wxwidgets_build_instructions_on_unix">
      <title>wxWidgets Build Instructions on UNIX</title>

      <para>To build wxWidgets on a UNIX style platform, the library must be
      configured before it can be built. This is platform specific. To do this
      first read the INSTALL.txt file in the wxWidgets directory. When
      downloading wxWdigets download the wxGTK package. <emphasis
      role="bold">NOTE:</emphasis> VE-Suite should now build against most
      distributed versions of wxGTK. Also, be sure to have gtk2-devel packages
      installed on your system before trying to build wxGTK.</para>

      <para>To configure wxWidgets properly for a VE-Suite build the following
      options should be specified w/ the configure command:</para>

      <itemizedlist>
        <listitem>
          <para><code>enable-shared</code> creates shared libraries</para>
        </listitem>

        <listitem>
          <para><code>enable-log</code> enables logging support within
          wxWidgets</para>
        </listitem>

        <listitem>
          <para><code>with-opengl </code>enables opengl support within
          wxWidgets</para>
        </listitem>

        <listitem>
          <para><code>prefix=/myInstallDirectory/wxGTK </code>specifies the
          install directory</para>
        </listitem>
      </itemizedlist>

      <para>Following the instructions in INSTALL.txt, the configure command
      would be:</para>

      <para><code> ../configure --enable-shared --with-opengl --enable-log
      --prefix=/</code></para>

      <para>This will set up wx properly for building with VE-Suite. When the
      configuration is complete, type:</para>

      <para><code> gmake </code></para>

      <para>After the build finishes type:</para>

      <para><code> gmake install</code></para>

      <para>This will install the libraries and includes in the directory
      specified by --prefix option.</para>
    </section>

    <section id="ace_tao_build_instructions_on_unix">
      <title>ACE/TAO Build Instructions on UNIX</title>

      <para>Download the lastest beta release of ACE+TAO. With this particular
      version of ACE+TAO it is possible to use configure. To build ACE+TAO
      create a build dir (e.g. build-linux-rhel3). Then:</para>

      <para><code> &gt; cd &lt;build-dir&gt; </code></para>

      <para><code> &gt; ../configure --prefix=&lt;location where ace+tao will
      be installed&gt; </code></para>

      <para><code> &gt; gmake </code></para>

      <para><code> &gt; gmake install</code></para>

      <para>This will create an dir with the appropriate include, lib, and bin
      dir for ACE+TAO.</para>
    </section>

    <section id="osg_buid_instructions_on_unix">
      <title>OpenSceneGraph Build Instructions on UNIX</title>

      <para>For OpenSceneGraph, download the latest release version.
      OpenSceneGraph is dependent on Producer and OpenThreads. Producer is
      dependent on OpenThreads, therefore OpenThreads must be built first. To
      build OpenThreads, go into the OpenThreads directory. The following
      environment variables should be set either on the command line (or
      through a setup script):</para>

      <para><code> OSG_HOME:</code> the location of the OpenSceneGraph
      directory</para>

      <para><code> OPENTHREADS_INC_DIR:</code> the location of
      OpenThreads/include</para>

      <para><code> OPENTHREADS_LIB_DIR:</code> the location of
      OpenThreads/lib</para>

      <para><code> PRODUCER_INC_DIR:</code> the location of
      Producer/include</para>

      <para><code> PRODUCER_LIB_DIR:</code> the location of
      Producer/lib</para>

      <para><code> INST_LOCATION:</code> this is where to install the
      libraries.</para>

      <para>These will all be specific to where you downloaded and extracted
      each dependency directory.</para>

      <para>To set these environment variables from the command line type
      something like:</para>

      <para><code> &gt;setenv OSG_HOME
      /home/users/myaccount/ve_depends/OSG/OpenSceneGraph </code></para>

      <para>After setting the environment variables are set, go into the
      OpenThreads directory and type:</para>

      <para><code> &gt;make</code> or &gt;<code>gmake </code></para>

      <para>This will compile OpenThreads.</para>

      <para>Once it is built, install the libraries using:</para>

      <para><code> &gt; make INST_LOCATION=/home/myInstallDirectory/OSG
      install</code></para>

      <para>Where /home/myInstallDirectory is the desired directory to create
      the install.</para>

      <para>Next go into the Producer directory:</para>

      <para><code> &gt;cd Producer </code></para>

      <para><code> &gt;gmake </code></para>

      <para><code> &gt;gmake INST_LOCATION=/home/myInstallDirectory/OSG
      install</code></para>

      <para>And finally:</para>

      <para><code> &gt;cd OpenSceneGraph </code></para>

      <para><code> &gt;gmake </code></para>

      <para><code> &gt;gmake INST_LOCATION=/home/myInstallDirectory/OSG
      install </code></para>

      <para>Check to see that libraries and headers are created in
      INST_LOCATION properly.</para>
    </section>

    <section id="vtk_build_instructions_on_unix_cmake">
      <title>Visualization Toolkit (VTK) Build Instructions on UNIX (CMAKE
      Settings)</title>

      <para>To build vtk, CMake must be used to set the following values. To
      best utilize CMake it is suggested that ccmake be used. To begin, create
      a build dir in the VTK directory (e.g. build-linux-rhel3). Then do the
      following:</para>

      <para><code> &gt; cd &lt;build dir&gt; </code></para>

      <para><code> &gt; ccmake ../. </code></para>

      <para><code> &gt; gmake </code></para>

      <para><code> &gt; gmake install</code></para>

      <para>Please change these default settings for your CMake build
      setup:</para>

      <orderedlist>
        <listitem>
          <para><code>CMAKE_INSTALL_DIR</code> to <code>&lt;location where vtk
          is to be installed&gt;</code></para>
        </listitem>

        <listitem>
          <para><code>BUILD_SHARED_LIBS</code> to <code>ON</code></para>
        </listitem>

        <listitem>
          <para><code>BUILD_TESTING</code> to <code>OFF</code></para>
        </listitem>

        <listitem>
          <para><code>VTK_USE_HYBRID</code> to <code>ON</code></para>
        </listitem>

        <listitem>
          <para><code>VTK_USE_PARALLEL</code> to <code>ON</code></para>
        </listitem>
      </orderedlist>

      <para><emphasis role="bold">NOTE: </emphasis>Be sure that vtk is using
      the proper gl drivers as well.</para>
    </section>
  </section>

  <section id="vesuite_component_dependencies">
    <title>VE-Suite Component Dependencies</title>

    <para>If you are installing individual components of VE-Suite on different
    desktops, it is only necessary to install the dependencies for that
    specific component. Below is a table listing the individual components and
    their specific dependencies.</para>

    <informaltable>
      <tgroup cols="2">
        <tbody>
          <row>
            <entry>Name/Service</entry>

            <entry>ACE/TAO, xerces-c</entry>
          </row>

          <row>
            <entry>VE-Conductor (GUI)</entry>

            <entry>ACE/TAO, xerces-c, wxWidgets</entry>
          </row>

          <row>
            <entry>VE-Xplorer</entry>

            <entry>ACE/TAO, OpenSceneGraph* or Performer*, VTK,
            VRJuggler</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>*depends on the desired scenegraph management</para>
  </section>
</chapter>