import os, sys, string
import SConsAddons.Util
from SCons.Util import WhereIs
pj = os.path.join

Import('ves_pkg', 'RootDir')
env = ves_pkg.getEnv().Clone()

#Tool Directory
DOCBOOKBASE = pj(RootDir,'external','DocBook')
DOCBOOK_XSL = pj(DOCBOOKBASE,'docbook-xsl-1.75.2')
DOCBOOK_FO = pj(DOCBOOKBASE,'fop-0.95')
HTML_XSL = pj(DOCBOOK_XSL,'html','docbook.xsl')
CHUNK_HTML_XSL = pj(DOCBOOK_XSL,'html','chunk.xsl')
#CHUNK_HTML_XSL = pj(DOCBOOK_FO,'stylesheet','html.xsl')
FO_XSL = pj(DOCBOOK_XSL,'fo','docbook.xsl')

#Java Classpath
JAR_PATH = pj(DOCBOOK_FO,'lib')

#Jar Files
FOP_JAR = pj(JAR_PATH,'fop.jar')
BATIK_JAR = pj(JAR_PATH,'batik-all-1.7.jar')
AVALON_JAR = pj(JAR_PATH,'avalon-framework-4.2.0.jar')
#XALAN_JAR = pj(JAR_PATH,'xalan-2.7.0.jar')
#RESOLVER_JAR = pj(JAR_PATH,'resolver.jar')
XALAN_JAR = pj(JAR_PATH,'xalan-2.7.0.jar')
XERCES_JAR = pj(JAR_PATH,'xercesImpl-2.7.1.jar')
XML_JAR = pj(JAR_PATH,'xml-apis-1.3.04.jar')
#JIMI_JAR = pj(JAR_PATH,'JimiProClasses.jar')

#if SConsAddons.Util.GetPlatform() == "win32":
#    JAI_JAR = pj(JAR_PATH,'jai_windows-i586.jar')
#else:
#    JAI_JAR = pj(JAR_PATH,'jai_linux-i586.jar')

#Set Classpath in ENV
#env['ENV']['CLASSPATH'] = '${FOP_JAR}' + os.pathsep +'${BATIK_JAR}' + os.pathsep +'${AVALON_JAR}' + os.pathsep +'${JAI_JAR}' + os.pathsep +'${XALAN_JAR}' + os.pathsep +'${RESOLVER_JAR}' + os.pathsep +'${XALAN_JAR}' + os.pathsep +'${XERCES_JAR}' + os.pathsep +'${XML_JAR}' + os.pathsep +'${JIMI_JAR}'

env['ENV']['CLASSPATH'] = '${FOP_JAR}' + os.pathsep +'${BATIK_JAR}' + os.pathsep +'${AVALON_JAR}' + os.pathsep +'${XALAN_JAR}' + os.pathsep +'${XALAN_JAR}' + os.pathsep +'${XERCES_JAR}' + os.pathsep +'${XML_JAR}' + os.pathsep + '${JAR_PATH}'

##Base parameters.
relativeDir = pj('share', 'docs', 'docbook')
baseDir = pj(RootDir, relativeDir)

if SConsAddons.Util.GetPlatform() == "win32":
    TOOL_PATH = pj(DOCBOOK_FO,'libxml')
    env['ENV']['PATH'] = ['${TOOL_PATH}']
    xslt_cmd = 'xsltproc'
    xml_cmd = 'xmllint'
else:
    xslt_cmd = WhereIs('xsltproc')
    xml_cmd = WhereIs('xmllint')
    java_cmd = WhereIs('java')
    javaPath = os.path.split( java_cmd )
    #env['ENV']['JAVA_HOME'] = javaPath[ 0 ]
    env['ENV']['JAVA_HOME'] = os.sep + 'usr'

if SConsAddons.Util.GetPlatform() == "win32":
    fo_cmd = pj(DOCBOOK_FO, 'fop.bat')
else:
    fo_cmd = pj(DOCBOOK_FO, 'fop')

##NOTE: Do NOT put the suffixes of the filenames.
srcs = Split("""
   vesuite_docs
""")

resolvedSrcs = map(lambda s: pj(baseDir, "xml_sources", "%s.tmp" %(s)), srcs)
foedSrcs = map(lambda s: pj(baseDir, "xml_sources","%s.fo" %(s)), srcs)
htmlTargets = map(lambda s: pj(baseDir, "%s/%s.html" %(s,s)), srcs)
htmlChunkTargets = map(lambda s: pj(baseDir, "%s-multipage/index.html" %(s)), srcs)
pdfTargets = map(lambda s: pj(baseDir, "%s/%s.pdf" %(s,s)), srcs)
srcs = map(lambda s: pj(baseDir, "xml_sources", "%s.xml" %(s)), srcs)

##Builder for making *.xml into the resolved *.tmp.
##(Replaces reference links with the docs linked.)

xmlAction = '%s --xinclude ${SOURCE.abspath} > ${TARGET.abspath}' % xml_cmd

xmlResolveBuilder = Builder(action = xmlAction, single_source = True,
                            suffix = ".tmp", chdir = relativeDir)
								
#Convert an XML source file Unix or Linux:
# old way of generating a fo file
#foAction = '%s %s ${TARGET.abspath} %s %s %s %s %s %s %s ${SOURCE.abspath}' % (xslt_cmd, "--output", "--stringparam", "fop.extensions 1", "--stringparam", "alignment start", "--stringparam", "draft.mode no", FO_XSL)
#Use fop to generate fo file
foAction = '%s %s ${SOURCE.abspath} %s %s %s ${TARGET.abspath}' %(fo_cmd, "-xml", "-xsl", FO_XSL, "-foout")
foBuilder = Builder(action = foAction, single_source = True, suffix = ".fo",
                    chdir = relativeDir)

htmlAction = '%s %s ${TARGET.abspath} %s %s %s ${SOURCE.abspath}' % (xslt_cmd, "--output", "--stringparam", "navig.graphics 1", HTML_XSL)
htmlBuilder = Builder(action = htmlAction, single_source = True,
                      suffix = ".html", chdir = relativeDir)

htmlChunkAction = '%s %s ${TARGET.abspath} %s %s %s ${SOURCE.abspath}' % (xslt_cmd, "--output", "--stringparam", "use.extensions 0", CHUNK_HTML_XSL)
htmlChunkBuilder = Builder(action = htmlChunkAction, single_source = True,
                           suffix = ".html", chdir = relativeDir)

# Here is a test command to generate a pdf direct from xml
# external/DocBook/fop-0.95/fop -xml share/docs/docbook/xml_sources/vesuite_docs.tmp -xsl external/DocBook/docbook-xsl-1.75.2/fo/docbook.xsl -pdf foo.pdf
pdfAction = '%s ${SOURCE.abspath} ${TARGET.abspath}' % fo_cmd
pdfBuilder = Builder(action = pdfAction, single_source = True, suffix = ".pdf",
                     chdir = relativeDir)

env.Append(BUILDERS = {
            'xmlResolve': xmlResolveBuilder,
            'fo': foBuilder,
            'html': htmlBuilder,
            'htmlChunk': htmlChunkBuilder,
            'pdf': pdfBuilder})

##Build the docs.
env.xmlResolve(srcs)

env.Depends( foedSrcs, resolvedSrcs)
env.fo(resolvedSrcs)

env.Depends( htmlTargets, resolvedSrcs)
env.html(target = htmlTargets, source = resolvedSrcs)

env.Depends( htmlChunkTargets, resolvedSrcs)
env.htmlChunk(target = htmlChunkTargets, source = resolvedSrcs)

env.Depends( pdfTargets, foedSrcs)
env.pdf(target = pdfTargets, source = foedSrcs)

##Extra cleaning
#for chunkTarget in htmlChunkTargets:
#      	Clean(chunkTarget, os.path.dirname(chunkTarget))
