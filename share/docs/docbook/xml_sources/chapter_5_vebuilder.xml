<?xml version="1.0" encoding="UTF-8"?>
<chapter id="VeBuilder">
  <title>VE-Builder</title>

  <section id="vebuilder_intro">
    <title>Introduction</title>

    <para>VE-Builder is a set of tools for modifying three-dimensional data
    files for VE-Suite. Here is a list of functions we provide documentation
    for:</para>

    <para><ulink url="importing_files">Importing Files</ulink></para>

    <para><link linkend="importing_from_starcd">Importing from
    StarCD</link></para>

    <para><link linkend="importing_from_fluent">Importing from Fluent
    (.avs)</link></para>

    <para><link linkend="creating_preprocessed_data">Creating Preprocessed
    Data</link></para>

    <para><link linkend="creating_texture_based_datasets">Creating
    Texture-Based Datasets</link></para>
  </section>

  <section id="launching_vebuilder">
    <title>Launching VE-Builder</title>

    <para>To run VE-Builder, you need a VE-Suite shell environment. Therefore,
    to run VE-Builder tools from VE-Launcher, select the Shell mode.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../veimages/Shell launch.jpg" />
      </imageobject>
    </mediaobject>

    <para>A shell with the VE-Builder environment will be shown. If you want
    to change the VE-Builder directory, choose Change Builder Folder from
    under the Options menu and select the VE_BuilderTolls directory.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../veimages/Builder2.jpg" />
      </imageobject>
    </mediaobject>
  </section>

  <section id="importing_files">
    <title>Importing Files</title>

    <para>The loaderToVtkd program transforms prepared three-dimensional data
    files from other programs into VE-Suite files. First, prepare the
    environment for it by launching a Builder Shell from <link
    linkend="launching_vebuilder">VE-Launcher</link>. Then you can use
    loaderToVtkd to import files into VE-Suite formats. The general syntax of
    the program is:</para>

    <para><code> loaderToVtkd -singleFile &lt;input filename&gt; -loader
    &lt;loader type&gt;</code></para>

    <para><code> -o &lt;full path to the output directory&gt; -w file COMMAND
    FOR THE NAME OF THE OUTPUT FILE</code></para>

    <para>To see loaderToVtkd's options, type in:</para>

    <para><code> loaderToVtkd</code></para>

    <para>loaderToVtkd supports the following loader types:</para>

    <para><itemizedlist>
        <listitem>
          <para>REI (BANFDB)</para>
        </listitem>

        <listitem>
          <para>AVS (avs)</para>
        </listitem>

        <listitem>
          <para>Dicom (dcm)</para>
        </listitem>

        <listitem>
          <para>EnSight (ens)</para>
        </listitem>

        <listitem>
          <para>MFIX (mfix)</para>
        </listitem>

        <listitem>
          <para>StarCD (star)</para>
        </listitem>
      </itemizedlist>It also supports Plot3D, but with this syntax:</para>

    <para><code> loaderToVtkd -geometryFileXYZ [input filename] -dataFileQ
    [input filename2] </code></para>

    <para><code> -o [full path to the output directory] -multiGrid Flag [0:1]
    -iblankFlag [0:1] -numberofDimensions [0:1] </code></para>

    <para><code> -outFileName [output file] -loader xyz -w file </code></para>

    <para>We also have detailed instructions for preparing and importing data
    files from these programs:</para>

    <para><link linkend="importing_from_starcd">StarCD</link></para>

    <para><link linkend="importing_from_fluent">Fluent (AVS)</link></para>
  </section>

  <section id="importing_from_starcd">
    <title>Importing from StarCD</title>

    <section id="preparing_starcd_files">
      <title>Preparing the StarCD Files</title>

      <para>First, you need to get the "star.cel", "star.vrt", and "star.usr"
      files from StarCD. If you need help getting them from StarCD, look at
      the instructions <link
      linkend="building_files_from_starcd">here</link>.</para>

      <para>Next, you need to make a star.param file to point to the star.cel,
      star.vrt, and star.usr files. Save our template (<ulink
      url="http://www.vesuite.org/File/star.param">star.param</ulink>) to your
      working directory and follow the instructions below to modify it for
      your data:</para>

      <para>Set these to point to your .cel, .vrt, and .usr files.</para>

      <para><code> STARCEL=/your_directory/star.cel // a *.cel file is
      required </code></para>

      <para><code> STARVRT=/your_directory/star.vrt // a *.vrt file is
      required </code></para>

      <para><code> STARUSR=/your_directory/star.usr // a *.usr file is
      required</code></para>

      <para>Change these lines to their respective scalars.</para>

      <para><code> VECTORNAME=Velocity // the columns of the *.usr file must
      be labeled </code></para>

      <para><code> SCALARNAME=scalar1 // the columns of the *.usr file must be
      labeled </code></para>

      <para><code> SCALARNAME=scalar2 // the columns of the *.usr file must be
      labeled </code></para>

      <para><code> SCALARNAME=scalar3 // the columns of the *.usr file must be
      labeled</code></para>

      <para><code> SCALEINDEX=1 // optional: uses integer indices defined in
      translateToVtk.cpp to set scale factor </code></para>

      <para>Enter an integer option on the SCALEINDEX:</para>

      <itemizedlist>
        <listitem>
          <para>0: No scale, corresponding to a scale of 1.0</para>
        </listitem>

        <listitem>
          <para>1: Custom scale, indicating that the SCALEFACTOR tag will be
          used to specify a scale factor</para>
        </listitem>

        <listitem>
          <para>2: Meters to feet, corresponding to a scale factor of
          3.28</para>
        </listitem>

        <listitem>
          <para>3: Millimeters to feet, corresponding to a scale factor of
          3.28e-3</para>
        </listitem>

        <listitem>
          <para>4: Inches to feet, corresponding to a scale factor of
          1.0/12.0</para>
        </listitem>

        <listitem>
          <para>5: Meters (1:12) scale to feet, corresponding to a scale
          factor of 12.0*3.28</para>
        </listitem>
      </itemizedlist>

      <para><code> SCALEFACTOR=.083333333 // optional: the scale factor
      (default = 1, unless SCALEINDEX &gt;1)</code></para>

      <para>VR space is always in feet, so the scale factor tag must be in
      feet. If you chose a SCALEINDEX of 0 or 1, comment out this line.</para>

      <para><code> WRITEOPTION=1 // optional: 0=let vtk write the
      file(default), 1=directly write ascii to disk </code></para>

      <para>The Writeoption is no longer needed. Set it to 0 or remove
      it.</para>
    </section>

    <section id="conversion_to_vtu">
      <title>Conversion to a .VTU File</title>

      <para>Start up a Builder Shell from <link
      linkend="launching_vebuilder">VE-Launcher</link>. Be sure to set the
      working directory to the star.param's directory. Then enter the
      following code:</para>

      <para><code> loaderToVtkd -singleFile star.param -loader star -o [full
      path to the output directory] -w file COMMAND TO SET FILE IN COMMAND
      LINE OR STAR.PARAM FILE</code></para>

      <para>After the code executes, it will dump a .vtu file of the data in
      the directory you specified.</para>
    </section>
  </section>

  <section id="importing_from_fluent">
    <title>Importing from Fluent (AVS)</title>

    <para>You will need to write out an .avs file for the post-processed data
    from Fluent. Place it into your working directory. Open a Builder Shell
    from <link linkend="launching_vebuilder">VE-Launcher</link>. Be sure to
    set the working directory to the avs file's directory. You can then
    convert it with this command:</para>

    <para><code> loaderToVtkd –singleFile [AVS filename] –loader avs –o
    [working directory] –w file</code></para>
  </section>

  <section id="Displaying_FEA_Data">
    <title>Displaying FEA Data</title>

    <para>VE-Suite has the capability to display FEA datasets in the virtual
    environment much like CFD datasets. However, the FEA data is primarily
    displayed as a surface on the object(s) of interest.</para>

    <para>To display FEA data from an FEA dataset, select the Polydata icon
    and select the desired scalar for the FEA data.</para>
  </section>

  <section id="creating_preprocessed_data">
    <title>Creating Preprocessed Data</title>

    <para>You will need a .vtu file to create preprocessed data. Start a
    Builder Shell from <link linkend="launching_vebuilder">VE-Launcher</link>.
    Be sure to set the working directory to the .vtu file's directory. Verify
    that there is a directory called POST_DATA in the .vtu file's directory.
    If there is not, create one. Once it's ready, type in:</para>

    <para><code>preprocessor</code></para>

    <para>The first prompt will ask for a filename. Type in the .vtu's
    filename. The second prompt will ask for a directory to dump the data
    into. Type in the full path to the directory you want the preprocessed
    data in. The program will then ask you what you want to process. Your
    choices include:</para>

    <itemizedlist>
      <listitem>
        <para>Decompose Octrees:</para>
      </listitem>

      <listitem>
        <para>Extract Surfaces:</para>
      </listitem>

      <listitem>
        <para>Extract Isosurfaces:</para>
      </listitem>

      <listitem>
        <para>Extract Cutting Planes:</para>
      </listitem>
    </itemizedlist>

    <para>Once you finish making your choices, it will execute and produce
    your preprocessed data.</para>
  </section>

  <section id="specifying_cutting_planes">
    <title>Specifying Cutting Planes in a .txt File</title>

    <para>If you want to extract cutting planes, you can specify the planes in
    a .txt file instead of manually typing them in each time. First, create a
    .txt file in the same directory as the .vtu file and write your cutting
    planes in it using this format:</para>

    <para><code>1 //Number of x cuts</code></para>

    <para><code>0.0 //X cuts</code></para>

    <para><code>1 //Number of y cuts</code></para>

    <para><code>0.0 //Y cuts</code></para>

    <para><code>4 //Number of z cuts</code></para>

    <para><code>3.26 3.39 3.42 3.73 //Z cuts</code></para>

    <para>Then, when you run preprocessor, enter (1)Yes to Extract cutting
    planes. You will be asked how to set the number of cuts. Select (2)Specify
    text file, then enter the name of your .txt file. Preprocessor will pull
    the values for the cutting planes from it.</para>
  </section>

  <section id="creating_texture_based_datasets">
    <title>Creating Texture-Based Datasets</title>

    <para>Launch a Builder Shell from <link
    linkend="launching_vebuilder">VE-Launcher</link> and enter the
    following:</para>

    <para><code> vtkTo3DTexture</code></para>

    <para>This will launch the translator interface:</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../veimages/Builder3base.jpg" />
      </imageobject>
    </mediaobject>

    <para>Select the desired parameters from the GUI and click
    <guibutton>Translate</guibutton>. Input parameters include:</para>

    <para><itemizedlist>
        <listitem>
          <para>Input directory: Directory containing the input vtk dataset
          files.</para>
        </listitem>

        <listitem>
          <para>Output directory: Directory to write out the texture data and
          the texture description files.</para>
        </listitem>

        <listitem>
          <para>Texture Dimension: The resolution (~sampling rate) of the
          output textures.</para>
        </listitem>

        <listitem>
          <para>Grid type: Input vtk datasets' grid structure.</para>
        </listitem>
      </itemizedlist>A progress dialog will appear as the input vtk files are
    translated to three-dimensional texture data files that are useable in
    VE-Suite.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="../veimages/creatingtexturebased2.jpg" />
      </imageobject>
    </mediaobject>

    <para><emphasis role="bold">Batch Mode</emphasis></para>

    <para>The translator can also be run in a "batch" mode. To run in batch
    mode, enter this on the command line:</para>

    <para><code> vtkTo3DTexture -i /home/users/mcdoe/LTN/3D_Jets_Test/vtk -o
    /home/users/mcdoe/LTN/3D_Jets_Test/jets_vti -x 32 -y 64 -z 32
    /home/users/mcdoe/LTN/3D_Jets_Test/Jets_Data</code></para>

    <para>where:</para>

    <itemizedlist>
      <listitem>
        <para>-i specifies the vtk/vtu files' input directory</para>
      </listitem>

      <listitem>
        <para>-o specifies the output directory for the 3d vti texture
        files</para>
      </listitem>

      <listitem>
        <para>-x is the x resolution for the texture</para>
      </listitem>

      <listitem>
        <para>-y is the y resolution for the texture</para>
      </listitem>

      <listitem>
        <para>-z is the z resolution for the texture</para>
      </listitem>

      <listitem>
        <para>The last argument is the data input directory for vt(u,k,s)
        files.</para>
      </listitem>
    </itemizedlist>

    <para>The batch mode also supports parallel processing (MPI), which is
    convenient for large transient datasets. To run in batch mode with MPI you
    must first install the MPI library. We recommend <ulink
    url="http://www.lam-mpi.org/7.1/download.php">LAM/MPI</ulink>. This is
    available for most linux platforms. To run with LAM/MPI, a script should
    be created similar to:</para>

    <para><code> #!/bin/tcsh</code></para>

    <para><code> setenv VE_SUITE_HOME /home/users/mcdoe/svn_VE_Suite/VE_Suite
    &amp;&amp; source $VE_SUITE_HOME/VE_Installer/setup.tsh </code></para>

    <para><code> vtkTo3DTextureMPI -i /home/users/mcdoe/LTN/3D_Jets_Test/vtk
    -o /home/users/mcdoe/LTN/3D_Jets_Test/jets_vti -x 32 -y 64 -z 32
    /home/users/mcdoe/LTN/3D_Jets_Test/Jets_Data </code></para>

    <para>which should then be executed as follows:</para>

    <para><code> mpirun –np 2 ./ </code></para>
  </section>

  <section id="building_files_from_starcd">
    <title>Building Files from StarCD</title>

    <para>If you need to write out star.cel, star.vrt, and star.usr files from
    StarCD, follow these instructions:</para>

    <orderedlist>
      <listitem>
        <para>Launch StarCD</para>
      </listitem>

      <listitem>
        <para>Ensure that a *.vrt and *.cel file is written of the region of
        interest. This region can either be a complete CFD model or a
        subsection of the model.</para>
      </listitem>

      <listitem>
        <para>Analyze data</para>
      </listitem>

      <listitem>
        <para>Post-processing -&gt;Load data</para>

        <orderedlist>
          <listitem>
            <para>In "File(s)" tab, click "open post file"</para>
          </listitem>

          <listitem>
            <para>In "Data" tab:</para>

            <orderedlist>
              <listitem>
                <para>Scalar Data -&gt;Turb Kinetic Energy</para>
              </listitem>

              <listitem>
                <para>Vector Data -&gt;Velocity Components UVW</para>
              </listitem>
            </orderedlist>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Click <guibutton>Get Data</guibutton></para>
      </listitem>

      <listitem>
        <para>Click <guibutton>View Post Registers</guibutton></para>
      </listitem>

      <listitem>
        <para>To add other scalar values to store:</para>

        <orderedlist>
          <listitem>
            <para>Click <guibutton>Operate</guibutton> at the bottom of the
            Post Registers window</para>
          </listitem>

          <listitem>
            <para>Function -&gt; Load vertex data -&gt; turbulent energy
            (Registers 1-3 must contain vector data. Registers 4-6 must
            contain scalar data.)</para>
          </listitem>

          <listitem>
            <para>Select register</para>
          </listitem>

          <listitem>
            <para><emphasis role="bold">NOTE:</emphasis> Although it is
            necessary to use vertex data rather than cell data, using vertex
            data might return an error. To solve this problem, copy the
            previous command line and add the register number (e.g., "enter
            oper, getv, te, 5,")</para>
          </listitem>

          <listitem>
            <para>Ensure that "using relative values" is selected</para>
          </listitem>

          <listitem>
            <para>Click <guibutton>Apply</guibutton> to put data in an empty
            register</para>
          </listitem>

          <listitem>
            <para>Click <guibutton>Update list</guibutton></para>
          </listitem>

          <listitem>
            <para>Repeat steps 7.1-7.6 to add data to registers 5 and 6
            (pressure and viscosity)</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>The data is now stored.</para>
      </listitem>

      <listitem>
        <para>In pro-STAR window:</para>

        <orderedlist>
          <listitem>
            <para>Post -&gt; save user data</para>
          </listitem>

          <listitem>
            <para>Registers: all</para>
          </listitem>

          <listitem>
            <para>File type: coded</para>
          </listitem>

          <listitem>
            <para>Range: all vertices</para>
          </listitem>

          <listitem>
            <para>Click <guibutton>Apply</guibutton></para>
          </listitem>

          <listitem>
            <para>Click <guibutton>Close</guibutton></para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Manually close file (enter "close *.usr")</para>
      </listitem>

      <listitem>
        <para>File -&gt; save as coded</para>
      </listitem>

      <listitem>
        <para>Unclick boundary file</para>
      </listitem>

      <listitem>
        <para>Click <guibutton>Apply</guibutton></para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">NOTE:</emphasis> Checked files are written
        out</para>
      </listitem>

      <listitem>
        <para>Enter "Close All"</para>
      </listitem>
    </orderedlist>
  </section>
</chapter>