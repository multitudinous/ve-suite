##Builds idl skeleton files for veopen
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('ves_pkg baseEnv GetArch osg_options VE_SUITE_VERSION vtk_options xerces_options')

lib_env = ves_pkg.getEnv().Copy()
fpcFile = []
# Build up the provides vars for the .fpc files
provides = "osg"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath(osg_options.getSettings()[0][1])
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
OSG_VERSION = ( int('1'), int('2'), int('0') )
cppdom_version_str = '1.2.0'
# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@cppdom_cxxflags@'           : '',
   '@includedir@'                : inst_paths['include'],
   '@cppdom_extra_cxxflags@'     : '',
   '@cppdom_extra_include_dirs@' : '',
   '@cppdom_libs@'               : '-losg -losgDB -losgGA -losgUtil -lOpenThreads -losgText -losgSim -losgProducer -lProducer',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(OSG_VERSION[0]),
   '@VERSION_MINOR@'             : str(OSG_VERSION[1]),
   '@VERSION_PATCH@'             : str(OSG_VERSION[2]),
   '@arch@'                      : arch,
   '@version@'                   : cppdom_version_str,
}
##env.ConfigBuilder('gmtl.pc','gmtl.pc.in',submap = gmtl_pc_submap)
##installed_targets += env.Install(pj(PREFIX, 'share', 'pkgconfig'), 'gmtl.pc')
installed_targets = []
name_parts = ['osg', cppdom_version_str, arch]
osgFileName = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
cppdom_pc = lib_env.ConfigBuilder(osgFileName, 
                     pj('#','share','fpc','osg.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
provides = "ves"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = pj('${fp_file_cwd}' ,'..' ,'..')
#os.path.abspath( lib_env['prefix'] )
inst_paths['lib'] = pj('${prefix}', lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj('${prefix}', 'bin')   
inst_paths['include'] = pj('${prefix}', 'include')   
ves_version_str = '%i.%i.%i'%VE_SUITE_VERSION

ves_defines = '-D_TAO -D_OSG -DVTK44 -DLOKI_OBJECT_LEVEL_THREADING'

if baseEnv[ 'Patented' ] == 'yes':
    ves_defines += ' -DVE_PATENTED'

# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@ves_cxxflags@'              : ves_defines,
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@ves_libs@'                  : '-lVE_TextureBasedLib_tao_osg_vep -lDataLoaderLib -lVE_UtilLib -lGUIPlugin -lVE_XML -lVE_Conductor_Utilities -lVE_ConductorLib -lGraphicalPlugin_tao_osg_vep -lTranslatorToVTKLib -lVE_XplorerNetworkLib_tao_osg_vep -lVE_XplorerLib_tao_osg_vep -lVE_OpenModuleLib -lVE_SceneGraph_tao_osg_vep -lloki.0.1.6 -losgOQ -lVE_CE_UnitWrapperLib',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(VE_SUITE_VERSION[0]),
   '@VERSION_MINOR@'             : str(VE_SUITE_VERSION[1]),
   '@VERSION_PATCH@'             : str(VE_SUITE_VERSION[2]),
   '@arch@'                      : arch,
   '@version@'                   : ves_version_str,
}

##env.ConfigBuilder('gmtl.pc','gmtl.pc.in',submap = gmtl_pc_submap)
##installed_targets += env.Install(pj(PREFIX, 'share', 'pkgconfig'), 'gmtl.pc')
installed_targets = []
name_parts = ['ves', ves_version_str, arch]
vesFileName = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
ves_pc = lib_env.ConfigBuilder(vesFileName, 
                        pj('#','share','fpc','ves.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
provides = "vtk"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath( vtk_options.getSettings()[0][1] )
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
vtk_version_str = lib_env['VtkVersion']

# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@vtk_cxxflags@'              : '-I${prefix}/include/vtk-${vtk_version} -DVTK_STREAMS_FWD_ONLY',
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@vtk_libs@'                  : '-L${prefix}/lib -lvtkImaging -lvtkGraphics -lvtkCommon -lvtkHybrid -lvtkIO -lvtkFiltering -lvtkRendering -lvtkParallel -lvtkexpat -lvtkpng -lvtktiff -lvtksys -lvtkjpeg -lvtkexoIIc -lvtkftgl -lvtkfreetype -lvtkDICOMParser -lvtkzlib -lvtkMPEG2Encode -lvtkNetCDF',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(5),
   '@VERSION_MINOR@'             : str(1),
   '@arch@'                      : arch,
   '@version@'                   : vtk_version_str,
}

name_parts = ['vtk', vtk_version_str, arch]
vtkFileName = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
ves_pc = lib_env.ConfigBuilder(vtkFileName, 
                        pj('#','share','fpc','vtk.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
provides = "xerces"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath( xerces_options.getSettings()[0][1] )
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
xerces_version_str = '1.2.7'

# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@xerces_cxxflags@'              : '-I${prefix}/include',
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@xerces_libs@'                  : '-L${prefix}/lib -lxerces-c',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(5),
   '@VERSION_MINOR@'             : str(1),
   '@arch@'                      : arch,
   '@version@'                   : xerces_version_str,
}

name_parts = ['xerces', xerces_version_str, arch]
xercesFileName = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
ves_pc = lib_env.ConfigBuilder(xercesFileName, 
                        pj('#','share','fpc','xerces.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
#if  !os.getenv('CASROOT').empty():
provides = "occ"
arch = GetArch()
inst_paths = {}
if os.getenv('CASROOT'):
    inst_paths['base'] = os.getenv('CASROOT')
else:
    inst_paths['base'] = '${CASROOT}'
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'inc')   
occ_version_str = '1.2.7'

# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@xerces_cxxflags@'           : '-DCSFDB -DHAVE_CONFIG_H -DHAVE_WOK_CONFIG_H -DLIN -DLININTEL -I${prefix}/inc',
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@xerces_libs@'               : '-L${prefix}/Linux/lib -lTKXDEIGES -lTKIGES -lTKBRep -lTKGeomAlgo -lTKGeomBase -lTKMath -lTKernel -lTKXCAF -lTKXSBase -lTKG2d -lTKCDF -lTKG3d -lTKOffset -lTKShHealing -lTKTopAlgo -lTKBool -lTKPrim -lTKLCAF -lTKService -lTKV3d -lTKMesh -lTKCAF -lTKV2d -lTKBO -lTKFillet -lTKHLR',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(5),
   '@VERSION_MINOR@'             : str(1),
   '@arch@'                      : arch,
   '@version@'                   : occ_version_str,
}

name_parts = ['occ', xerces_version_str, arch]
occFileName = "-".join(name_parts) + ".fpc"
ves_pc = lib_env.ConfigBuilder(occFileName, 
                        pj('#','share','fpc','occ.fpc.in'), submap = submap)

# prepare the installer
fpcBundle = ves_pkg.createFileBundle( pj('lib','flagpoll' )  )
##fpcFile = sca_util.getFilesRecursiveByExt( '.', ['.fpc'] )
fpcBundle.addFiles( [osgFileName, vesFileName, vtkFileName, xercesFileName, occFileName] )
