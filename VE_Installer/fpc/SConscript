##Builds idl skeleton files for veopen
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('ves_pkg GetArch osg_options VE_SUITE_VERSION vtk_options')

lib_env = ves_pkg.getEnv().Copy()

# Build up the provides vars for the .fpc files
provides = "osg"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath(osg_options.getSettings()[0][1])
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
OSG_VERSION = ( int('1'), int('2'), int('0') )
cppdom_version_str = '1.2.0'
# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@cppdom_cxxflags@'           : '',
   '@includedir@'                : inst_paths['include'],
   '@cppdom_extra_cxxflags@'     : '',
   '@cppdom_extra_include_dirs@' : '',
   '@cppdom_libs@'               : '-losg -losgDB -losgGA -losgUtil -lOpenThreads -losgText -losgSim -losgProducer -lProducer',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(OSG_VERSION[0]),
   '@VERSION_MINOR@'             : str(OSG_VERSION[1]),
   '@VERSION_PATCH@'             : str(OSG_VERSION[2]),
   '@arch@'                      : arch,
   '@version@'                   : cppdom_version_str,
}
##env.ConfigBuilder('gmtl.pc','gmtl.pc.in',submap = gmtl_pc_submap)
##installed_targets += env.Install(pj(PREFIX, 'share', 'pkgconfig'), 'gmtl.pc')
installed_targets = []
name_parts = ['osg', cppdom_version_str, arch]
pc_filename = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
cppdom_pc = lib_env.ConfigBuilder(pc_filename, 
                     pj('#','VE_Installer','fpc','osg.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
provides = "ves"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath( lib_env['prefix'] )
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
ves_version_str = '1.0.2'
# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@ves_cxxflags@'              : '-D_TAO -DVE_PATENTED -D_OSG -DVTK44',
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@ves_libs@'                  : '-lVE_TextureBasedLib_tao_osg_vep -lDataLoaderLib -lVE_UtilLib -lGUIPluginLib -lVE_XML -lGraphicalPlugin_tao_osg_vep -lTranslatorToVTKLib -lVE_XplorerNetworkLib_tao_osg_vep -lVE_XplorerLib_tao_osg_vep -lVE_OpenModuleLib -lVE_SceneGraph_tao_osg_vep',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(VE_SUITE_VERSION[0]),
   '@VERSION_MINOR@'             : str(VE_SUITE_VERSION[1]),
   '@VERSION_PATCH@'             : str(VE_SUITE_VERSION[2]),
   '@arch@'                      : arch,
   '@version@'                   : ves_version_str,
}

##env.ConfigBuilder('gmtl.pc','gmtl.pc.in',submap = gmtl_pc_submap)
##installed_targets += env.Install(pj(PREFIX, 'share', 'pkgconfig'), 'gmtl.pc')
installed_targets = []
name_parts = ['ves', ves_version_str, arch]
pc_filename = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
ves_pc = lib_env.ConfigBuilder(pc_filename, 
                        pj('#','VE_Installer','fpc','ves.fpc.in'), submap = submap)

# Build up the provides vars for the .fpc files
provides = "vtk"
arch = GetArch()
inst_paths = {}
inst_paths['base'] = os.path.abspath( vtk_options.getSettings()[0][1] )
inst_paths['lib'] = pj(inst_paths['base'], lib_env['libdir'])
#inst_paths['flagpoll'] = pj( lib_env['prefix'],lib_env['libdir'], 'flagpoll')
#inst_paths['flagpoll'] = pj( '#','VE_Installer','fpc')
inst_paths['bin'] = pj(inst_paths['base'], 'bin')   
inst_paths['include'] = pj(inst_paths['base'], 'include')   
vtk_version_str = lib_env['VtkVersion']

# Build up substitution map
submap = {
   '@provides@'                  : provides,
   '@prefix@'                    : inst_paths['base'],
   '@exec_prefix@'               : '${prefix}',
   '@vtk_cxxflags@'              : '-I${prefix}/include/vtk-${vtk_version} -DVTK44 -DVTK_STREAMS_FWD_ONLY',
   '@includedir@'                : inst_paths['include'],
   '@ves_extra_cxxflags@'        : '',
   '@ves_extra_include_dirs@'    : '',
   '@ves_libs@'                  : '-L${prefix}/lib -lvtkImaging -lvtkGraphics -lvtkCommon -lvtkHybrid -lvtkIO -lvtkFiltering -lvtkRendering -lvtkParallel -lvtkexpat -lvtkpng -lvtktiff -lvtksys -lvtkjpeg -lvtkexoIIc -lvtkftgl -lvtkfreetype -lvtkDICOMParser -lvtkzlib -lvtkMPEG2Encode -lvtkNetCDF',
   '@libdir@'                    : inst_paths['lib'],
   '@lib_subdir@'                : lib_env['libdir'],
   '@VERSION_MAJOR@'             : str(5),
   '@VERSION_MINOR@'             : str(1),
   '@arch@'                      : arch,
   '@version@'                   : vtk_version_str,
}

name_parts = ['vtk', vtk_version_str, arch]
pc_filename = "-".join(name_parts) + ".fpc"
##tempName = pj(inst_paths['flagpoll'], pc_filename)
ves_pc = lib_env.ConfigBuilder(pc_filename, 
                        pj('#','VE_Installer','fpc','vtk.fpc.in'), submap = submap)

fpcBundle = ves_pkg.createFileBundle( pj('lib','flagpoll' )  )
fpcFile = sca_util.getFilesRecursiveByExt( '.', ['.fpc'] )
fpcBundle.addFiles( fpcFile )
