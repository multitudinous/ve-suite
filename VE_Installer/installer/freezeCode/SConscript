##sets up jconf files for stereo_desktop
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('ves_pkg', 'RootDir')
env = ves_pkg.getEnv().Copy()

##Freezing Launcher Code
##Set UPX path in ENV
if sca_util.GetPlatform() == "win32":
    UPX_PATH = pj(RootDir,'external','FreezePython','upx301w')
else:
    UPX_PATH = pj(RootDir,'external','FreezePython','upx-3.00-i386_linux')
	
os.putenv('PATH', UPX_PATH)

srcs = Split("""
    velauncher
""")

installerDir = pj('src', 'apps', 'launcher')
installerbaseDir = pj('#', installerDir)

installerDistDir = pj('VE_Installer','installer','dist')
installerDistbaseDir = pj('#', installerDistDir)

basePyinstallerDir = pj(RootDir,'external','FreezePython','pyinstaller-1.3')

makespec_py = pj(basePyinstallerDir, 'Makespec.py')
build_py = pj(basePyinstallerDir, 'Build.py')

velauncherCodeDir = pj(RootDir,'src','apps','launcher')
velauncherLibDir = pj(velauncherCodeDir,'python')
velauncherDistDir = pj(RootDir,'VE_Installer','installer','dist')
installerImages = pj(RootDir,'VE_Installer','installer','installerImages')

makespecSrc = map(lambda s: pj(installerbaseDir, "%s.py" %(s)), srcs)
makespecTarget = map(lambda s: "%s.spec" %(s), srcs)

freezeSrc = map(lambda s: pj(installerDistbaseDir, "%s.spec" %(s)), srcs)

if sca_util.GetPlatform() == "win32":
    freezeTarget = map(lambda s: "%s.exe" %(s), srcs)
else:
    freezeTarget = map(lambda s: "%s" %(s), srcs)
	
print "####################################"
print "# Freezing Launcher Code...        #"
print "# Please wait... it takes a minute #"
print "####################################\n"

make_cmd = "python " + makespec_py
build_cmd = "python"

if sca_util.GetPlatform() == "win32":
    config_cmd = pj(basePyinstallerDir,'Configure.py')
    os.popen("python " + config_cmd)
    makespecAction = '%s --onefile --out=%s --path=%s --icon=%s\\Ve_icon.ico --upx ${SOURCE.abspath}' % (make_cmd, velauncherDistDir, velauncherLibDir, installerImages)
    makespecBuilder = Builder(action = makespecAction, single_source = True, suffix = ".spec", chdir = installerDistDir)
    freezeAction = '%s ${SOURCE.abspath} %s\\velauncher.spec' % (build_cmd, velauncherDistDir)
	freezeBuilder = Builder(action = freezeAction, single_source = True, suffix = "", chdir = velauncherCodeDir)

    env.Append(BUILDERS = {'makespec': makespecBuilder, 'freeze' : freezeBuilder})
    env.makespec(target = makespecTarget ,source = makespecSrc)
    env.freeze(target = freezeTarget, source = build_py)

    Depends('velauncher.exe', 'velauncher.spec')

else:
    os.popen("python " + basePyinstallerDir + "/Configure.py")
    makespecAction = '%s --onefile --out=%s --path=%s ${SOURCE.abspath}' % (make_cmd, velauncherDistDir, velauncherLibDir)
    makespecBuilder = Builder(action = makespecAction, single_source = True, suffix = ".spec", chdir = installerDistDir)

    freezeAction = '%s ${SOURCE.abspath} %s/velauncher.spec' % (build_cmd, velauncherDistDir)
    freezeBuilder = Builder(action = freezeAction, single_source = True, suffix = "", chdir = velauncherCodeDir)

    env.Append(BUILDERS = {'makespec': makespecBuilder, 'freeze' : freezeBuilder})
    env.makespec(target = makespecTarget ,source = makespecSrc)
    env.freeze(target = freezeTarget, source = build_py)

    Depends('velauncher', 'velauncher.spec')
    
