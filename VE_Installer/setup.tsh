#!/bin/csh
# sets up environment to build and/or run VE-Xplorer

#this is typically defined in your .cshrc file
#setenv VE_SUITE_HOME /home/vr/Applications/TSVEG/VE_Suite

if ( -e /etc/redhat-release ) then
   set firstWord=`cat /etc/redhat-release | awk -F" " '{print $1}'`
   #echo "firstWord is" ${firstWord}
   if ( ${firstWord} == "Red" ) then
      set thirdWord=`cat /etc/redhat-release | awk -F" " '{print $3}'`
      if ( ${thirdWord} == "Enterprise" ) then
         # extract some words from file to create something like RHEL_3
         setenv CFDHOSTTYPE `cat /etc/redhat-release | awk -F" " '{print "RHEL_" $7}'`
      else
         # extract some words from file to create something like RedHat_8.0 or RedHat_9
         setenv CFDHOSTTYPE `cat /etc/redhat-release | awk -F" " '{print $1 $2 "_" $5}'`
      endif
   else if ( ${firstWord} == "Fedora" ) then
      # extract some words from file to create something like Fedora_1
      setenv CFDHOSTTYPE `cat /etc/redhat-release | awk -F" " '{print $1 "_" $4}'`
   else if ( ${firstWord} == "CentOS" ) then
      # extract some words from file to create something like Fedora_1
      setenv CFDHOSTTYPE `cat /etc/redhat-release | awk -F" " '{print $1 "_" $3}'`
   endif
else if ( -e /etc/SuSE-release ) then
   # extract some words from file to create something like SuSE_9.2_x86-64
   setenv CFDHOSTTYPE `head -1 /etc/SuSE-release | awk -F" " '{print $1 "_" $3 "_" $4}'`
else
   #echo "uname is" `uname`
   setenv CFDHOSTTYPE `uname`
endif

#if creation of CFDHOSTTYPE caused parenthesis to be inserted, then remove...
setenv CFDHOSTTYPE `echo \"$CFDHOSTTYPE\" | sed -e 's/(//g' | sed -e 's/)//g' | sed -e 's/"//g'`

# Specify your scene graph: OSG = OpenSceneGraph, PF = OpenGL Performer
setenv SCENE_GRAPH OSG 
#setenv SCENE_GRAPH PF

# Specify corba build TAO_BUILD only for right now
setenv TAO_BUILD TRUE

# Specify cluster build CLUSTER_APP
#setenv CLUSTER_APP TRUE
# This flag is for VERY new code
#setenv VE_PATENTED TRUE
# This flag is to allow the use of shaders
#setenv CFD_USE_SHADERS FALSE

# TAO_BUILD can be set outside this script to override the default of TRUE
# Make sure that TAO_BUILD is set to either TRUE or FALSE...
if ( ! $?TAO_BUILD ) then
   setenv TAO_BUILD TRUE
   #echo "   Because it was undefined, setting TAO_BUILD to" ${TAO_BUILD}
   #echo "   If you want otherwise, open new shell, define TAO_BUILD, and run script again"
   #echo ""
else if ( $TAO_BUILD != "TRUE" && $TAO_BUILD != "FALSE" ) then
   setenv TAO_BUILD TRUE
   echo "   Because it was not defined properly, setting TAO_BUILD to" ${TAO_BUILD}
   echo "   If you want otherwise, open new shell, define TAO_BUILD, and run script again"
   echo ""
endif

# CLUSTER_APP can be set outside this script to override the default of FALSE
# Make sure that CLUSTER_APP is set to either TRUE or FALSE...
if ( ! $?CLUSTER_APP ) then
   setenv CLUSTER_APP FALSE
   #echo "   Because it was undefined, setting CLUSTER_APP to" ${CLUSTER_APP}
   #echo "   If you want otherwise, redefine CLUSTER_APP"
else if ( $CLUSTER_APP != "TRUE" && $CLUSTER_APP != "FALSE" ) then
   setenv CLUSTER_APP FALSE
   echo "   Because it was not defined properly, setting CLUSTER_APP to" ${CLUSTER_APP}
   echo "   If you want otherwise, redefine CLUSTER_APP and resource the setup file"
endif

setenv PFNFYLEVEL 0
setenv PFSHAREDSIZE 534773700
setenv VPR_DEBUG_NFY_LEVEL 0 
setenv VPR_DEBUG_ENABLE 1
#setenv VPR_DEBUG_FILE ${VE_SUITE_HOME}/VE_Xplorer/VPRDebugOutput.txt
#setenv VPR_DEBUG_ALLOW_CATEGORIES "DBG_ALL DBG_ERROR VES_DBG"
#setenv VPR_DEBUG_DISALLOW_CATEGORIES "VES_DBG DBG_KERNEL"
setenv VPR_DEBUG_DISALLOW_CATEGORIES
setenv NO_RTRC_PLUGIN TRUE
setenv NO_PERF_PLUGIN TRUE
setenv OSG_THREAD_SAFE_REF_UNREF 1
setenv OSGNOTIFYLEVEL DEBUG_INFO
setenv OMNIORB_CONFIG ${VE_SUITE_HOME}/VE_Installer/omniORB4.cfg
setenv OMNINAMES_LOGDIR ${VE_SUITE_HOME}/VE_Installer

#echo "specifying libraries for" ${CFDHOSTTYPE}
if ( ${CFDHOSTTYPE} == "IRIX64" ) then
   setenv JDK_HOME /usr/java2
   setenv VTK_BASE_DIR /home/vr/Applications/TSVEG/Libraries/VTK4.4/IRIX32
   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/Release/Debug/wxGTK-2.6.0/IRIX32
   setenv VJ_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1/vrjuggler-2.0.1-irix-n32-posix
   setenv VJ_DEPS_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1-deps/vrjuggler-2.0.1-irix-n32-posix-deps
   setenv OSG_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/OSG/IRIX32
   setenv CORONA_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/corona-1.0.2/Linux-SuSE92

   setenv LD_LIBRARYN32_PATH ${VJ_BASE_DIR}/lib32:${VJ_DEPS_DIR}/lib32
   setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${VTK_BASE_DIR}/lib/vtk
   #setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:/home/users/jhynek/Pigs/Oinks/OpenAL/openal/linux/bin/lib
   setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${WX_HOME}/lib
   setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${OSG_HOME}/lib32:${OSG_HOME}/lib32/osgPlugins
   setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}

   if ( ${TAO_BUILD} == "TRUE" ) then
      setenv ACE_HOME /home/vr/Applications/TSVEG/Libraries/ACE-5.4
      setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/TAO-1.4
      setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${ACE_HOME}/IRIX32/lib
      setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${TAO_HOME}/IRIX32/lib
      setenv PATH ${ACE_HOME}/bin:${ACE_HOME}/IRIX32/bin:${TAO_HOME}/IRIX32/bin:${PATH}

      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/xerces-2.5/IRIX32
      setenv LD_LIBRARYN32_PATH ${LD_LIBRARYN32_PATH}:${XERCESCROOT}/lib
   else
      setenv PYTHONPATH ${VJ_DEPS_DIR}/lib32/python2.3/site-packages
   endif
      
else if ( ${CFDHOSTTYPE} =~ RedHat_* || ${CFDHOSTTYPE} =~ Fedora_* || ${CFDHOSTTYPE} =~ RHEL_* ) then
   setenv JDK_HOME /usr/java/jdk1.5.0_04
   setenv VTK_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/VTK-5.0/Linux-RHEL4
   setenv VTK_BASE_DIR /home/users/mccdo/VTK/vtk-5.0/install-rhel4_release
#   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/wxGTK-2.6.1/Linux-RHEL_4
   setenv WX_HOME /home/users/mccdo/wxWindows/wxGTK-2.6.2/install-rhel_4
   setenv VJ_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1/vrjuggler-2.0.1-linux-rhel4-i686
   setenv VJ_DEPS_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1-deps/vrjuggler-2.0.1-linux-rhel4-i686-deps
   setenv CORONA_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/corona-1.0.2/Linux-SuSE92
   setenv OSG_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/OSG-1.1/Linux-RHEL_4
   setenv COIN_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/Coin-2.4.5/Linux-RHEL_4

   setenv LD_LIBRARY_PATH ${VJ_BASE_DIR}/lib:${VTK_BASE_DIR}/lib:${VJ_DEPS_DIR}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${WX_HOME}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${OSG_HOME}/lib:${OSG_HOME}/lib/osgPlugins
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${COIN_HOME}/lib
  
   if ( ${TAO_BUILD} == "TRUE" ) then
      setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/ACE-TAO-5.5/Linux-RHEL_4
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${TAO_HOME}/lib
      setenv PATH ${TAO_HOME}/bin:${PATH}

      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/Release/Opt/xercesc/Linux-RHEL_4
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${XERCESCROOT}/lib
   else
      setenv PYTHONPATH ${VJ_DEPS_DIR}/lib/python2.2/site-packages
   endif

else if ( ${CFDHOSTTYPE} =~ S*SE_*.*_*64 ) then
   setenv JDK_HOME /usr/java/jdk1.5.0_04
   setenv VTK_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/VTK-5.0/Linux64-SuSE_10
   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/wxGTK-2.6.2/Linux64-SuSE_10
   setenv VJ_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1/Linux64-SuSE_10
   setenv VJ_DEPS_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1-deps/Linux64-SuSE_10
   setenv OSG_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/OSG-1.1/Linux64-SuSE_10
   setenv CORONA_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/corona-1.0.2/Linux-SuSE92
   setenv COIN_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/Coin-2.4.5/Linux64-SuSE_10

   setenv LD_LIBRARY_PATH ${WX_HOME}/lib:${VJ_BASE_DIR}/lib:${VJ_BASE_DIR}/lib64:${VTK_BASE_DIR}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VJ_DEPS_DIR}/lib:${VJ_DEPS_DIR}/lib64
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${OSG_HOME}/lib:${OSG_HOME}/lib64:${OSG_HOME}/lib64/osgPlugins
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CORONA_HOME}/lib:${HOME}/usr/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${COIN_HOME}/lib

   if ( ${TAO_BUILD} == "TRUE" ) then
      setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/ACE-TAO-5.5/Linux64-SuSE10
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${TAO_HOME}/lib
      setenv PATH ${TAO_HOME}/bin:${PATH}

      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/Release/Opt/xercesc/Linux64-SuSE_10
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${XERCESCROOT}/lib
   else
      setenv PYTHONPATH ${VJ_DEPS_DIR}/lib/python2.2/site-packages
   endif

else if ( ${CFDHOSTTYPE} =~ S*SE_*.*_i* ) then
   setenv JDK_HOME /usr/java/jdk1.5.0_02
   setenv VTK_BASE_DIR /home/users/mccdo/VTK/vtk-5.0/install-suse10_32
   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/wxGTK-2.6.2/Linux-SuSE_10
   setenv VJ_BASE_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1/Linux-SuSE_10
   setenv VJ_DEPS_DIR /home/vr/Applications/TSVEG/Libraries/Release/Opt/vrjuggler-2.0.1-deps/Linux-SuSE_10
   setenv OSG_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/OSG-1.1/Linux-SuSE_10
   setenv CORONA_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/corona-1.0.2/Linux-SuSE92
   setenv COIN_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/Coin-2.4.5/Linux-SuSE_10

   setenv LD_LIBRARY_PATH ${WX_HOME}/lib:${VJ_BASE_DIR}/lib:${VTK_BASE_DIR}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VJ_DEPS_DIR}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${OSG_HOME}/lib:${OSG_HOME}/lib/osgPlugins
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${CORONA_HOME}/lib:${HOME}/usr/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${COIN_HOME}/lib

   if ( ${TAO_BUILD} == "TRUE" ) then
      #setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/ACE_TAO/Linux-SuSE_10
      setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/ACE-TAO-5.5/Linux-SuSE10
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${TAO_HOME}/lib
      setenv PATH ${TAO_HOME}/bin:${PATH}

      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/Release/Opt/xercesc/Linux-SuSE_10
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${XERCESCROOT}/lib
   else
      setenv PYTHONPATH ${VJ_DEPS_DIR}/lib/python2.2/site-packages
   endif

else if ( ${CFDHOSTTYPE} == "SunOS" ) then
   setenv JDK_HOME /usr/java
   setenv VTK_BASE_DIR /home/vr/Applications/TSVEG/Libraries/VTK4.4/Solaris
   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/wxGTK-2.4.2/Solaris
   #setenv VJ_BASE_DIR ??
   #setenv VJ_DEPS_DIR ??

   setenv LD_LIBRARY_PATH ${VJ_BASE_DIR}/lib:${VTK_BASE_DIR}/lib/vtk:${VJ_DEPS_DIR}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${WX_HOME}/lib
   setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}

   if ( ${TAO_BUILD} == "TRUE" ) then
      setenv ACE_HOME /home/vr/Applications/TSVEG/Libraries/ACE-5.4
      setenv TAO_HOME /home/vr/Applications/TSVEG/Libraries/TAO-1.4
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${ACE_HOME}/Linux/lib
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${TAO_HOME}/Linux/lib
      setenv PATH ${ACE_HOME}/bin:${ACE_HOME}/Linux/bin:${TAO_HOME}/Linux/bin:${PATH}

      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/xerces-2.5/Solaris
      setenv LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:${XERCESCROOT}/lib
   else
      setenv PYTHONPATH ${VJ_DEPS_DIR}/lib/python2.2/site-packages
   endif

else if ( ${CFDHOSTTYPE} == "Darwin" ) then
   setenv JDK_HOME /usr/java
   setenv VTK_BASE_DIR /home/users/mccdo/VTK/VTK-4.4.2/install-powermac
   setenv WX_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/wxMac-2.6.2
   setenv VJ_BASE_DIR /usr/local
   setenv VJ_DEPS_DIR /usr/local/vrjuggler-deps
   setenv OSG_HOME /home/users/mccdo/OSG/install-powermac
   #setenv CORONA_HOME /home/vr/Applications/TSVEG/Libraries/Release/Opt/corona-1.0.2/Linux-SuSE92

   setenv DYLD_LIBRARY_PATH ${VJ_BASE_DIR}/lib:${VTK_BASE_DIR}/lib/vtk:${VJ_DEPS_DIR}/lib
   setenv DYLD_LIBRARY_PATH ${DYLD_LIBRARY_PATH}:${WX_HOME}/lib
   setenv DYLD_LIBRARY_PATH ${DYLD_LIBRARY_PATH}:${VE_SUITE_HOME}/lib/${CFDHOSTTYPE}
   setenv DYLD_LIBRARY_PATH ${DYLD_LIBRARY_PATH}:${OSG_HOME}/lib:${OSG_HOME}/lib/osgPlugins

   if ( ${TAO_BUILD} == "TRUE" ) then
      setenv TAO_HOME /home/users/mccdo/ACE_TAO/Mac_Build/install-powermac
      setenv DYLD_LIBRARY_PATH ${DYLD_LIBRARY_PATH}:${TAO_HOME}/lib
      setenv PATH ${TAO_HOME}/bin:${PATH}

      #setenv XERCESCROOT /sw
      setenv XERCESCROOT /home/vr/Applications/TSVEG/Libraries/Release/Opt/xercesc/Darwin
      setenv DYLD_LIBRARY_PATH ${DYLD_LIBRARY_PATH}:${XERCESCROOT}/lib
   endif

else
   echo "ERROR: Unsupported operating system"
   echo "       OMNI_HOME, etc. are undefined"
endif

setenv TWEEK_BASE_DIR ${VJ_BASE_DIR}
setenv DZR_BASE_DIR   ${VJ_BASE_DIR}/share/Doozer
setenv SNX_BASE_DIR   ${VJ_BASE_DIR}
setenv PATH ${PATH}:${VJ_BASE_DIR}/bin:${VE_SUITE_HOME}/bin:${VE_SUITE_HOME}/bin/${CFDHOSTTYPE}
setenv PATH ${PATH}:${VJ_DEPS_DIR}/bin
setenv PATH ${WX_HOME}/bin:${PATH}
#setenv PATH ${JDK_HOME}/bin:${PATH}
if ( $?OSG_HOME ) then
   setenv PATH ${OSG_HOME}/share/OpenSceneGraph/bin:${PATH}
   setenv OSG_FILE_PATH ${OSG_HOME}/share/OpenSceneGraph-Data
endif

#echo ""
#echo "Now you may type 'gmake' to build the application"
#echo "              or 'gmake clean'
#echo "              or 'gmake cleandepend'
#echo "              or 'run' to start the application in sim mode"
#echo "              or 'runc6' to start the application on the c6"
#echo "              or 'runc4.closed' or 'runc4.open' to start the application on the c4"
#echo ""
