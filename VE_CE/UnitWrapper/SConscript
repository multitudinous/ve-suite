##Builds Unit Wrapper for ce units
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR buildDir xerces_options')

sources = Split("""
   UnitWrapper.cxx
   SetInputsEventHandler.cxx
   GetResultsEventHandler.cxx
""")

headers = Split("""
   UnitWrapper.h
   SetInputsEventHandler.h
   GetResultsEventHandler.h
""")

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_XMLLib', 'VE_ModelLib', 'VE_CADLib',
                   'VE_ShaderLib', 'VE_OpenModuleLib'])
lib_env.Append(LIBPATH = [ pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','XML','CAD'),
                        pj('#', buildDir, 'VE_Open','XML','Shader')])

lib_env.ParseConfig('flagpoll TAO TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype \
                              TAO_CosNaming TAO_Svc_Utils TAO_IORTable TAO_Messaging \
                              TAO_PortableServer TAO_BiDirGIOP TAO_AnyTypeCode --libs --cflags')
xerces_options.apply( lib_env )
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_CE_UnitWrapperLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_CE_UnitWrapperLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_CE', 'UnitWrapper'))
lib.build()
