##Builds VE_CE_UtilitiesLib
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options')

headers = Split("""
   Connection.h
   Module.h
   node_base.h
   node_module.h
   Port.h
   IPort.h
   Network.h
   node_loop.h
   OPort.h
   Scheduler.h
""")

sources = Split("""
   Connection.cxx
   Module.cxx
   node_base.cxx
   node_module.cxx
   Port.cxx
   IPort.cxx
   Network.cxx
   node_loop.cxx
   OPort.cxx
   Scheduler.cxx  
""")
##srcs = map(lambda s: pj('#', 'VE_CE', 'Utilities', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
##env = baseEnv.Copy()
lib_env.Append(LIBS = ['VE_ModelLib', 'VE_XMLLib', 'VE_OpenModuleLib'])
lib_env.Append(LIBPATH = [  pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','skel')])
lib_env.ParseConfig('flagpoll TAO TAO_PortableServer --libs --cflags')
xerces_options.apply( lib_env )

if baseEnv['StaticOnly'] == "no":
   vece_util_lib = ves_pkg.createStaticAndSharedLibrary('VE_CE_UtilitiesLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   vece_util_lib = ves_pkg.createStaticLibrary('VE_CE_UtilitiesLib', lib_env,
                                               installPrefix = LIBDIR)
   
vece_util_lib.addSources(sources)
vece_util_lib.addHeaders(headers,  pj( 'VE_CE', 'Utilities'))
vece_util_lib.build()
