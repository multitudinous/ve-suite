##Build voice engine
import os, sys, string
pj = os.path.join

Import('baseEnv buildDir RootDir vrjuggler_options tao_options xerces_options ves_pkg')
Import('wxwidgets_options')

env = ves_pkg.getEnv().Clone()

tao_options.apply(env)
xerces_options.apply(env)

srcs = Split("""
   JuliusMain.cxx
   JuliusNetworkClient.cxx
   JuliusXMLParser.cxx
   SpeechNavigator.cxx
""")

loki_srcs = Split("""
   SmallObj.cpp
   Singleton.cpp
   SmartPtr.cpp
""")
loki_srcs = map(lambda s: pj('#', 'external', 'loki-0.1.6', 'src', s),
                loki_srcs)
srcs.extend(loki_srcs)

env.AppendUnique( CPPPATH = [pj('#', 'external', 'cxxtest-3.10.1'),
                             pj('#', 'external', 'loki-0.1.6', 'include'),
                             pj('#', 'src'),
                             '#'],
                  LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open'),
                             pj('#', buildDir, 'src', 'ves', 'open', 'xml')],
                  LIBS = ['ves_open_module', 'ves_open_xml'],
                  CPPDEFINES = ['LOKI_ENABLE_FUNCTION',
                                'LOKI_FUNCTOR_IS_NOT_A_SMALLOBJECT'])

app = ves_pkg.createProgram('JuliusSpeechNavigator' + env["PROGSUFFIX"], env, 'bin')
app.addSources( srcs )
#app.addHeaders( headers )
app.build()

#prefix = env.Dictionary()['prefix']
#env.Alias('install', env.Install(pj(prefix, 'bin'), app))
