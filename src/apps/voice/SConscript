##Build voice engine
import os, sys, string
pj = os.path.join

Import('baseEnv buildDir RootDir GetPlatform vrjuggler_options tao_options xerces_options ves_pkg lokiBaseVar')
Import('wxwidgets_options')

env = ves_pkg.getEnv().Clone()

tao_options.apply(env)
xerces_options.apply(env)

srcs = Split("""
   JuliusMain.cxx
   JuliusNetworkClient.cxx
   JuliusXMLParser.cxx
   SpeechNavigator.cxx
""")

#loki_srcs = Split("""
#   SmallObj.cpp
#   Singleton.cpp
#   SmartPtr.cpp
#""")
#loki_srcs = map(lambda s: pj(RootDir , 'external', lokiBaseVar, 'src', s),
#                loki_srcs)
#srcs.extend(loki_srcs)

env.AppendUnique( CPPPATH = [pj('#', 'external', 'cxxtest-3.10.1'),
                             pj('#', 'external', lokiBaseVar, 'include'),
                             pj('#', 'src'),
                             '#'],
                  LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open'),
                             pj('#', buildDir, 'src', 'ves', 'open', 'xml'),
                             pj('#', buildDir, 'external', lokiBaseVar)],
                  LIBS = ['ves_open_module', 'ves_open_xml', 'loki.0.1.7'],
                  CPPDEFINES = ['LOKI_ENABLE_FUNCTION','LOKI_OBJECT_LEVEL_THREADING','LOKI_DLL',
                                'LOKI_FUNCTOR_IS_NOT_A_SMALLOBJECT'])

if GetPlatform() == 'linux':
   env.AppendUnique( LIBS = ['pthread'] )

app = ves_pkg.createProgram('JuliusSpeechNavigator' + env["PROGSUFFIX"], env, 'bin')
app.addSources( srcs )
#app.addHeaders( headers )
app.build()

#prefix = env.Dictionary()['prefix']
#env.Alias('install', env.Install(pj(prefix, 'bin'), app))
