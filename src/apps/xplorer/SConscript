##Builds VE_Xplorer<tag>
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('baseEnv ves_pkg GetPlatform buildDir osg_options vtk_options xerces_options GetSVNVersion osgbulletBaseVar RootDir')
Import('minerva_options tao_options boost_options vrjuggler_options osgal_options osgworks_options ApplyBulletVars')

srcDir = os.path.abspath( pj(RootDir, 'src', 'apps', 'xplorer') )
srcs = sca_util.getSourcesRecursive( srcDir )
headers = sca_util.getHeadersRecursive( srcDir )

env = ves_pkg.getEnv().Clone()
env.Append(
            LIBS = ['ves_open_xml',
                   'ves_builder_dataloader',
                   'ves_builder_translator_base',
                   'ves_xplorer_scenegraph',
                   'ves_xplorer_util',
                   'ves_xplorer_volume',
                   'ves_xplorer_communication',
                   'ves_xplorer_command',
                   'ves_open_module',
                   'ves_xplorer'
                    ])

env.Append(LIBPATH = [  pj('#', buildDir, 'src','ves','xplorer','scenegraph'),
                        pj('#', buildDir, 'src','ves','xplorer','util'),
                        pj('#', buildDir, 'src','ves','xplorer','volume'),
                        pj('#', buildDir, 'src','ves','xplorer','communication'),
                        pj('#', buildDir, 'src','ves','xplorer','command'),
                        pj('#', buildDir, 'src','ves','xplorer'),
                        pj('#', buildDir, 'src','ves','builder','DataLoader'),
                        pj('#', buildDir, 'src','ves','builder','cfdTranslatorToVTK'),
                        pj('#', buildDir, 'src','ves','open'),
                        pj('#', buildDir, 'src','ves','open','xml')])

#disable profiling by default
if env['VPRProfile'] == 'no':
   env.Append( CPPDEFINES = ['DISABLE_VPR_PROFILE'] )

#see if we need to compile minerva in
if minerva_options.isAvailable():
   env.Append( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
   minerva_options.apply( env )

env.Append( CPPDEFINES = [ GetSVNVersion( srcDir ) ] )
env.Append(CPPPATH = [pj('#','external','osgEphemeris','include')])
if GetPlatform() == 'darwin':
    env.Append( CPPDEFINES  = ['_DARWIN'] )
env.Append(LIBS = ['osgBulletPlus'])
env.Append(LIBS = ['osgBullet'])
env.Append(LIBS = ['osgEphemeris'])
env.Append(LIBPATH = [pj('#',buildDir,'external','osgBulletPlus')])
env.Append(LIBPATH = [pj('#',buildDir,'external', osgbulletBaseVar)])
env.Append(LIBPATH = [pj('#',buildDir,'external','osgEphemeris')])

ApplyBulletVars( env )

vtk_options.apply( env )
osg_options.apply( env )
if osgal_options.isAvailable():
   osgal_options.apply( env )
tao_options.apply( env )
boost_options.apply( env )
vrjuggler_options.apply( env )
osgworks_options.apply( env )
xerces_options.apply( env )

if baseEnv['MakeQtSupport'] == "yes":
    if GetPlatform() != 'darwin':
        Import('qt_options')
        qt_options.apply(env)
        env.AppendUnique( CPPDEFINES = ['QT_ON','QT_QTPROPERTYBROWSER_IMPORT'] )
        env.Append(LIBS = ['QtSolutions_PropertyBrowser-2.5'])
        env.Append(LIBPATH = [pj('#', buildDir, 'external', 'qtpropertybrowser-2.5_1-opensource', 'src')])
    else:
        import qt46
        qt46.applyQtBuildFlags(env)
        srcs.append(pj('VESDelegate.mm'))
        srcs.append(pj('CocoaHelper.mm'))

    env.AppendUnique(LIBS = ['ves_conductor_qtui','ves_xplorer_data','ves_xplorer_eventmanager'])
    env.AppendUnique(LIBPATH = [pj('#',buildDir,'src','ves','conductor','qt'),
                                pj('#', buildDir, 'src', 'ves', 'xplorer', 'data'),
                                pj('#', buildDir, 'src','ves','xplorer','eventmanager')])
else:
   headers.remove( pj( 'NonQtMainThread.h') )
   srcs.remove( pj( 'NonQtMainThread.cxx') )

resources = [ pj( RootDir, 'dist', 'installerImages', 've_icon128x128.icns'), 
    pj( RootDir, 'src', 'apps', 'xplorer','vrjuggler.plist')]
   
prog = ves_pkg.createProgram('ves_xplorer' + env["PROGSUFFIX"], env, 'bin',
    True,resources,pj( RootDir, 'src', 'apps', 'xplorer','Info.plist'),
    pj( RootDir, 'dist', 'darwin', 'PkgInfo'))
prog.addSources( srcs )
prog.addHeaders( headers )
prog.build()
