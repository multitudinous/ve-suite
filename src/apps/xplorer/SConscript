##Builds VE_Xplorer<tag>
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import( 'baseEnv ves_pkg GetPlatform buildDir osg_options vtk_options xerces_options GetSVNVersion RootDir' )
Import( 'minerva_options tao_options boost_options vrjuggler_options osgal_options osgworks_options' )
Import( 'ApplyBulletVars bullet_options osgbullet_options bdfx_options poco_options storyteller_options' )
Import( 'switchwire_options' )
Import('propertystore_options latticefx_options')

srcDir = os.path.abspath( pj(RootDir, 'src', 'apps', 'xplorer') )
buildSrcDir = pj('#',buildDir,'src', 'apps', 'xplorer')

srcs = sca_util.getSourcesRecursive( srcDir )
headers = sca_util.getHeadersRecursive( srcDir )

env = ves_pkg.getEnv().Clone()

#moc the key eater class
#source = [pj(buildSrcDir,'KeyPressEater.h')]
#srcs1 = env.qt_moc(source)
#now link it into the xplorer dependency chain
#openDir = os.path.abspath( pj(RootDir,buildDir,'src', 'apps', 'xplorer') )
#cppSources1 = map(lambda s: pj(openDir, '%s' ) %(s), srcs1)
#srcs += cppSources1

# now continue on with all of the normal stuff
env.Append( LIBS = [ 'ves_open_xml',
                     'ves_xplorer_scenegraph',
                     'ves_xplorer_volume',
                     'ves_xplorer_command',
                     'ves_xplorer',
                     'ves_conductor_qtui',
                     'ves_xplorer_data',
                     'ves_xplorer_eventmanager',
                     'qwt',
                     'switchwire' ])

env.Append(LIBPATH = [  pj('#',buildDir,'src','ves','xplorer','scenegraph'),
                        pj('#',buildDir,'src','ves','xplorer','volume'),
                        pj('#',buildDir,'src','ves','xplorer','command'),
                        pj('#',buildDir,'src','ves','xplorer'),
                        pj('#',buildDir,'src','ves','open','xml'),
                        pj('#',buildDir,'src','ves','conductor','qt'),
                        pj('#',buildDir,'src','ves','xplorer', 'data'),
                        pj('#',buildDir,'src','ves','xplorer','eventmanager'),
                        pj('#',buildDir, 'external', 'qwt-6.0.0-rc5', 'src' )])

#disable profiling by default
if env['VPRProfile'] == 'no':
   env.Append( CPPDEFINES = ['DISABLE_VPR_PROFILE'] )

#see if we need to compile minerva in
if minerva_options.isAvailable():
   env.Append( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
   minerva_options.apply( env )

env.Append( CPPDEFINES = [ GetSVNVersion( srcDir ) ] )
env.Append(CPPPATH = [pj('#','external','osgEphemeris','include')])
if GetPlatform() == 'darwin':
    env.Append( CPPDEFINES  = ['_DARWIN'] )

env.Append(LIBS = ['osgEphemerisVES'])
env.Append(LIBPATH = [pj('#',buildDir,'external','osgEphemeris')])

ApplyBulletVars( env )

vtk_options.apply( env )
osg_options.apply( env )
if osgal_options.isAvailable():
   osgal_options.apply( env )
   env.Append( CPPDEFINES = [ 'VE_SOUND' ] )
tao_options.apply( env )
boost_options.apply( env )
vrjuggler_options.apply( env )
osgworks_options.apply( env )
xerces_options.apply( env )
osgbullet_options.apply( env )
bullet_options.apply( env )
bdfx_options.apply( env )
poco_options.apply( env )
storyteller_options.apply( env )
switchwire_options.apply( env )
propertystore_options.apply( env )
latticefx_options.apply( env )

if GetPlatform() != 'darwin':
    Import('qt_options')
    qt_options.apply(env)
    env.AppendUnique( CPPDEFINES = ['QT_ON'] )
    env.Append(LIBS = ['osgQtTree'])
    env.Append(LIBPATH = [pj('#', buildDir, 'external', 'osgQtTree')])
else:
    import qt46
    qt46.applyQtBuildFlags(env)
    srcs.append(pj('VESDelegate.mm'))
    srcs.append(pj('CocoaHelper.mm'))
    srcs.append(pj('CocoaScreenResolution.mm'))

resources = [ pj( RootDir, 'dist', 'installerImages', 've_icon128x128.icns'), 
    pj( RootDir, 'src', 'apps', 'xplorer','vrjuggler.plist')]
   
prog = ves_pkg.createProgram('ves_xplorer' + env["PROGSUFFIX"], env, 'bin',
    True,resources,pj( RootDir, 'src', 'apps', 'xplorer','Info.plist'),
    pj( RootDir, 'dist', 'darwin', 'PkgInfo'))
prog.addSources( srcs )
prog.addHeaders( headers )
prog.build()
