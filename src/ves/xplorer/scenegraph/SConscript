##Builds VE_SceneGraphLib<tag>
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR osg_options vtk_options RootDir buildDir xerces_options GetPlatform')
Import('gmtl_options vpr_options gadgeteer_options vrjuggler_options osgal_options tao_options osgworks_options')
Import('ApplyBulletVars bullet_options osgbullet_options bdfx_options poco_options')
Import( 'switchwire_options latticefx_options' )

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','scenegraph') )
sources = sca_util.getSourcesRecursive( srcDir )
headers = sca_util.getHeadersRecursive( srcDir )

lib_env = ves_pkg.getEnv().Clone()
#see if we need to compile support for transform manipulators
ApplyBulletVars(lib_env)

lib_env.Append(LIBS = ['ves_open_xml','ves_xplorer_communication','ves_xplorer_eventmanager'])

lib_env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open','xml'),
                          pj('#', buildDir, 'src', 'ves', 'xplorer','communication'),
                          pj('#', buildDir, 'src', 'ves', 'xplorer', 'eventmanager')])

gmtl_options.apply( lib_env )
vpr_options.apply( lib_env )
gadgeteer_options.apply( lib_env )
vrjuggler_options.apply( lib_env )
vtk_options.apply( lib_env )
osg_options.apply( lib_env )
xerces_options.apply( lib_env )
tao_options.apply( lib_env )
osgworks_options.apply( lib_env )
osgbullet_options.apply( lib_env )
bullet_options.apply( lib_env )
bdfx_options.apply( lib_env )
poco_options.apply( lib_env )
switchwire_options.apply( lib_env )
latticefx_options.apply( lib_env )

if osgal_options.isAvailable():
   osgal_options.apply( lib_env )
   lib_env.Append( CPPDEFINES = [ 'VE_SOUND' ] )
else:
   headers.remove( pj( 'physics','sound','Material.h') )
   headers.remove( pj( 'physics','sound','RemoveSoundVisitor.h') )
   headers.remove( pj( 'physics','sound','SoundTable.h') )
   headers.remove( pj( 'physics','sound','SoundUtilities.h') )
   sources.remove( pj( 'physics','sound','Material.cpp') )
   sources.remove( pj( 'physics','sound','SoundTable.cpp') )
   sources.remove( pj( 'physics','sound','SoundUtilities.cpp') )
   
lib_env.Append( CPPDEFINES = ['VE_SCENEGRAPH_LIBRARY','VE_SCENEGRAPH_UTILS_LIBRARY','VE_NURBS_LIBRARY','VE_NURBS_UTILS_LIBRARY'])

if GetPlatform() == 'win32':
    #LIBCPMT is being linked in via a third party library so there is
    # no need for us to link in the dynamic version of the library as well
    lib_env.AppendUnique( LINKFLAGS = ['/NODEFAULTLIB:LIBCMT'] )
else:
    lib_env.AppendUnique( LIBS=['boost_regex'])

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_xplorer_scenegraph',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_xplorer_scenegraph', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'xplorer', 'scenegraph'))
lib.build()
