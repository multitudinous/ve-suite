#!python
import os, sys, string
pj = os.path.join
import glob
import SConsAddons.Util as sca_util

Import('baseEnv buildDir RootDir ves_pkg vtk_options osg_options xerces_options LIBDIR')
Import('tao_options boost_options vrjuggler_options osgal_options GetPlatform osgworks_options')
Import('poco_options minerva_options')
Import('ApplyBulletVars bullet_options osgbulletplus_options osgbullet_options')

xplorerSubdirs = Split("""
    scenegraph
    volume
    util
    DefaultGraphicalPlugin
    communication
    dotosg
    command
""")

if baseEnv['MakeQtSupport'] == "yes":
    xplorerSubdirs.append("data")
    xplorerSubdirs.append("eventmanager")

##Run SConscript files in all of those folders.
for d in xplorerSubdirs:
   SConscript( dirs = d )

sources = []
headers = []
sources_list = glob.glob(pj(RootDir, 'src','ves','xplorer','*.cxx'))
headers_list = glob.glob(pj(RootDir, 'src','ves','xplorer','*.h'))
sources += map(lambda s: os.path.basename(s), sources_list)
headers += map(lambda s: os.path.basename(s), headers_list)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','event') )
event_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
event_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('event', s), event_plugin_srcs)
headers += map(lambda s: pj('event', s), event_header_srcs)

#srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','DefaultGraphicalPlugin') )
#plugin_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
#plugin_header_srcs = sca_util.getHeadersRecursive( srcDir )
#sources += map(lambda s: pj('DefaultGraphicalPlugin', s), plugin_plugin_srcs)
#headers += map(lambda s: pj('DefaultGraphicalPlugin', s), plugin_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','device') )
device_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
device_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('device', s), device_plugin_srcs)
headers += map(lambda s: pj('device', s), device_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','environment') )
env_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
env_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('environment', s), env_plugin_srcs)
headers += map(lambda s: pj('environment', s), env_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','network') )
net_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
net_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('network', s), net_plugin_srcs)
headers += map(lambda s: pj('network', s), net_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','plugin') )
base_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
base_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('plugin', s), base_plugin_srcs)
headers += map(lambda s: pj('plugin', s), base_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','behavior') )
behavior_srcs = sca_util.getSourcesRecursive( srcDir )
behavior_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('behavior', s), behavior_srcs)
headers += map(lambda s: pj('behavior', s), behavior_header_srcs)


lib_env = ves_pkg.getEnv().Clone()
lib_env.Append(LIBS = ['ves_open_xml',
                   'ves_xplorer_scenegraph',
                   'ves_xplorer_util',
                   'ves_xplorer_volume',
                   'ves_xplorer_command',
                   'ves_open_module',
                   'ves_builder_dataloader',
                   'ves_builder_translator_base',
                   'ves_xplorer_communication'])

lib_env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'xplorer', 'scenegraph'),
                        pj('#', buildDir, 'src', 'ves', 'xplorer','util'),
                        pj('#', buildDir, 'src', 'ves', 'xplorer','communication'),
                        pj('#', buildDir, 'src', 'ves', 'xplorer','command'),
                        pj('#', buildDir, 'src', 'ves', 'xplorer','volume'),
                        pj('#', buildDir, 'src', 'ves', 'builder','DataLoader'),
                        pj('#', buildDir, 'src', 'ves', 'builder','cfdTranslatorToVTK'),
                        pj('#', buildDir, 'src', 'ves', 'open'),
                        pj('#', buildDir, 'src', 'ves', 'open','xml')])

tao_options.apply( lib_env )
#see if we need to compile minerva in
if minerva_options.isAvailable():
	minerva_options.apply( lib_env )
boost_options.apply( lib_env )
vrjuggler_options.apply( lib_env )
if osgal_options.isAvailable():
   osgal_options.apply( lib_env )
   lib_env.Append( CPPDEFINES = [ 'VE_SOUND' ] )
vtk_options.apply( lib_env )
osg_options.apply( lib_env )
osgworks_options.apply( lib_env )
osgbullet_options.apply( lib_env )
osgbulletplus_options.apply( lib_env )
bullet_options.apply( lib_env )

xerces_options.apply( lib_env )

# Needed since Device and KeyboardMouse send events to new UI
if baseEnv['MakeQtSupport'] == "yes":
    poco_options.apply(lib_env)
    lib_env.AppendUnique( CPPDEFINES = [ 'QT_ON' ] )
    lib_env.AppendUnique(LIBS = ['ves_xplorer_eventmanager','ves_xplorer_data'])
    lib_env.AppendUnique(LIBPATH = [pj('#',buildDir,'src','ves','xplorer','eventmanager'),
                                    pj('#', buildDir, 'src', 'ves', 'xplorer', 'data')])

lib_env.AppendUnique(CPPPATH = [pj(RootDir,'external','osgEphemeris','include')])

lib_env.AppendUnique(LIBS = ['osgEphemeris'])
lib_env.AppendUnique(LIBPATH = [pj('#',buildDir,'external','osgEphemeris')])

# New Physics work
##lib_env.Append(CPPPATH = [pj(RootDir,'external', osgbulletBaseVar,'include')])
#lib_env.Append(LIBS = ['osgBullet'])
#lib_env.Append(LIBPATH = [pj('#',buildDir,'external', osgbulletBaseVar)])

#lib_env.Append(LIBS = ['osgBulletPlus'])
#lib_env.Append(LIBPATH = [pj('#',buildDir,'external','osgBulletPlus')])

##lib_env.Append(CPPPATH = [pj(RootDir,'external', bulletBaseVar,'src')])
#lib_env.Append(LIBS = ['bullet'])
#lib_env.Append(LIBPATH = [pj('#',buildDir,'external', bulletBaseVar)])
#libBulletColladaConverter.a libCOLLADA_DOM.a libXML.a libbullet.a

ApplyBulletVars(lib_env)

if GetPlatform() == 'darwin':
    lib_env.AppendUnique( CPPDEFINES  = ['_DARWIN'] )

#see if we need to compile minerva in
if minerva_options.isAvailable():
	lib_env.AppendUnique( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
	srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'xplorer','minerva') )
	base_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
	base_header_srcs = sca_util.getHeadersRecursive( srcDir )
	sources += map(lambda s: pj('minerva', s), base_plugin_srcs)
	headers += map(lambda s: pj('minerva', s), base_header_srcs)

lib_env.AppendUnique( CPPDEFINES = ['VE_XPLORER_LIBRARY','VE_XPLORER_NETWORK_LIBRARY','VE_GRAPHICALPLUGINS_LIBRARY'])

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_xplorer',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_xplorer', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'xplorer'))
lib.build()
