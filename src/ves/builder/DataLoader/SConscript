##Builds DataLoaderLib
#!python
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR vtk_options buildDir boost_options')

sources = Split("""
    DataLoader.cxx
    EnSightTranslator.cxx
    AVSTranslator.cxx
    cfdDICOMTranslator.cxx
    cfdREITranslator.cxx
    converter.cxx
    gridConversion.cxx
    plot3dReader.cxx
    StarCDTranslator.cxx
    starReader.cxx
    FluentTranslator.cxx
    MFIXTranslator.cxx
    STLTranslator.cxx
""")

headers = Split("""
    DataLoader.h
    EnSightTranslator.h
    AVSTranslator.h
    cfdDICOMTranslator.h
    cfdREITranslator.h
    converter.h
    gridConversion.h
    plot3dReader.h
    StarCDTranslator.h
    starReader.h
    FluentTranslator.h
    MFIXTranslator.h
    STLTranslator.h
""")

lib_env = ves_pkg.getEnv().Clone()
lib_env.Append(LIBPATH = [
                          pj('#', buildDir, 'src','ves','builder','cfdTranslatorToVTK') ],
               LIBS = [ 'ves_builder_translator_base'])
               
boost_options.apply( lib_env )
vtk_options.apply( lib_env )

lib_env.Append( CPPDEFINES = ['VE_USER_BUILDER_LIBRARY'])

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_builder_dataloader',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_builder_dataloader', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'builder', 'DataLoader'))
lib.build()

############################################################################
############################################################################

srcs = Split("""
   main.cxx
""")
#srcs = map(lambda s: pj('#', buildDir, 'src', 'ves', 'builder', 'DataLoader', s), srcs)

env = ves_pkg.getEnv().Clone()
env.Append(LIBPATH = [pj('#', buildDir, 'src','ves','xplorer','util'),
                      pj('#', buildDir, 'src','ves','builder','cfdTranslatorToVTK'),
                      pj('#', buildDir, 'src','ves','builder','DataLoader') ],
           LIBS = ['ves_xplorer_util', 'ves_builder_dataloader', 'ves_builder_translator_base'])

boost_options.apply( env )
vtk_options.apply( env )
prog = ves_pkg.createProgram('loaderToVtk' + env["PROGSUFFIX"], env, 'bin')
prog.addSources( srcs )
prog.build()


