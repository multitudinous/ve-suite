##Builds QtUILib
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('poco_options baseEnv ves_pkg LIBDIR buildDir RootDir osg_options vpr_options vrjuggler_options GetPlatform')

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor', 'qt') )
buildSrcDir = pj('#',buildDir,'src','ves','conductor','qt')

lib_env = ves_pkg.getEnv().Clone()

### uic files
source = [pj(buildSrcDir,'MainWindow.ui')]
cppHeaders = lib_env.qt_uic(source)

source = [pj(buildSrcDir,'propertyBrowser','Visualization.ui')]
cppHeaders += lib_env.qt_uic(source)
####


### moc files
source = [pj(buildSrcDir,'MainWindow.h')]
cppSources = lib_env.qt_moc(source)

source = [pj(buildSrcDir,'UIElementQt.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','PropertyBrowser.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','Visualization.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','GenericPropertyBrowser.h')]
cppSources += lib_env.qt_moc(source)
###

lib_env.Depends( cppSources, cppHeaders)

openDir = os.path.abspath( pj(RootDir,buildDir,'src','ves','conductor','qt') )
cppSources1 = map(lambda s: pj(openDir, '%s' ) %(s), cppSources)
cppHeaders1 = map(lambda s: pj(openDir, '%s' ) %(s), cppHeaders)
    
headers = cppHeaders1
headers += sca_util.getHeadersRecursive( srcDir )
sources = cppSources1
sources += sca_util.getSourcesRecursive( srcDir )

lib_env.Append(LIBS = ['ves_open_xml',
                       'ves_xplorer_data',
                       'ves_xplorer_command',
                       'ves_xplorer_eventmanager',
                       'QtSolutions_PropertyBrowser-2.5'
                      ])
lib_env.Append(LIBPATH = [
                           pj('#', buildDir, 'src', 'ves', 'open', 'xml'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'data'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'command'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'eventmanager'),
                           pj('#', buildDir, 'external', 'qtpropertybrowser-2.5_1-opensource', 'src')
                         ])

if GetPlatform() == 'linux':
    Import('qt_options')
    qt_options.apply(lib_env)
else:
    import qt46
    qt46.applyQtBuildFlags(lib_env)

osg_options.apply( lib_env )
vpr_options.apply( lib_env )
vrjuggler_options.apply( lib_env )
poco_options.apply( lib_env )

lib_env.Append( CPPDEFINES = ['VE_CONDUCTOR_UTILS_LIBRARY'])
lib_env.AppendUnique( CPPPATH = [ pj(RootDir,'external','qtpropertybrowser-2.5_1-opensource','src') ] )

if lib_env['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_qtui',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_qtui', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'conductor','qt'))
lib.build()
