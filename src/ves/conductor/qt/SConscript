##Builds QtUILib
import os, sys, string
import SConsAddons.Util as sca_util
import glob
pj = os.path.join

Import('poco_options baseEnv ves_pkg LIBDIR buildDir RootDir vpr_options vrjuggler_options GetPlatform')
Import('minerva_options boost_options osgal_options' )
Import('tao_options xerces_options osg_options')
Import('bullet_options osgbullet_options storyteller_options')
Import('switchwire_options')
Import('propertystore_options latticefx_options')

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor', 'qt') )
buildSrcDir = pj('#',buildDir,'src','ves','conductor','qt')

lib_env = ves_pkg.getEnv().Clone()

##### Moc section must come before uic section to prevent issues with undefined
##### symbols and vtables
### moc files

source = [pj(buildSrcDir,'MoveFrame.h')]
cppSources = lib_env.qt_moc(source)

source = [pj(buildSrcDir,'IconStack.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'TreeTab.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'PreferencesTab.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'plugin','PluginSelectionTab.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'plugin','UIPluginBase.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'MainWindow.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'UIElementQt.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'ExtendedTabWidget.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'NonScrollGraphicsView.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'RecentFiles.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'CameraTab.h')]
cppSources += lib_env.qt_moc(source)

#source = [pj(buildSrcDir,'QtLogChannel.h')]
#cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'extendedWidgets','ExtendedToolBar.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','FileEdit.h')]
cppSources += lib_env.qt_moc(source)

#source = [pj(buildSrcDir,'propertyBrowser','FileEditFactory.h')]
#cppSources += lib_env.qt_moc(source)

#source = [pj(buildSrcDir,'propertyBrowser','FilePathManager.h')]
#cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','NodeEdit.h')]
cppSources += lib_env.qt_moc(source)

#source = [pj(buildSrcDir,'propertyBrowser','NodeSelectFactory.h')]
#cppSources += lib_env.qt_moc(source)

#source = [pj(buildSrcDir,'propertyBrowser','NodeSelectManager.h')]
#cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'Visualization.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'Constraints.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'ScriptingTab.h')]
cppSources += lib_env.qt_moc(source)

source = [pj(buildSrcDir,'propertyBrowser','VesTreePropertyBrowser.h')]
cppSources += lib_env.qt_moc(source)

if minerva_options.isAvailable():
	source = [pj(buildSrcDir,'minerva/LayersTree.h')]
	cppSources += lib_env.qt_moc(source)
	
	source = [pj(buildSrcDir,'minerva/StackedWidget.h')]
	cppSources += lib_env.qt_moc(source)
	
	source = [pj(buildSrcDir,'minerva/AddLayerWidget.h')]
	cppSources += lib_env.qt_moc(source)
	
	source = [pj(buildSrcDir,'minerva/AddFileSystemWidget.h')]
	cppSources += lib_env.qt_moc(source)
	
	source = [pj(buildSrcDir,'minerva/AddFileSystemStackedWidget.h')]
	cppSources += lib_env.qt_moc(source)
	
###

### rcc files
source = [pj(buildSrcDir,'icons.qrc')]
cppSources += lib_env.qt_rcc(source)
###

### uic files
source = [pj(buildSrcDir,'titlebar.ui')]
cppHeaders = lib_env.qt_uic(source)

source = [pj(buildSrcDir,'RecentFiles.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'TreeTab.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'PreferencesTab.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'plugin','PluginSelectionTab.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'MainWindow.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'Visualization.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'Constraints.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'plugin','PluginPorts.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'CameraTab.ui')]
cppHeaders += lib_env.qt_uic(source)

source = [pj(buildSrcDir,'ScriptingTab.ui')]
cppHeaders += lib_env.qt_uic(source)

if minerva_options.isAvailable():
	source = [pj(buildSrcDir,'minerva/AddFileSystemWidget.ui')]
	cppHeaders += lib_env.qt_uic(source)
####

lib_env.Depends( cppSources, cppHeaders)

openDir = os.path.abspath( pj(RootDir,buildDir,'src','ves','conductor','qt') )
cppSources1 = map(lambda s: pj(openDir, '%s' ) %(s), cppSources)
cppHeaders1 = map(lambda s: pj(openDir, '%s' ) %(s), cppHeaders)
    
headers = cppHeaders1
#eaders += sca_util.getHeadersRecursive( srcDir )
sources = cppSources1
sources += sca_util.getSourcesRecursive( srcDir )

###
# Remove everything in DefaultPlugin subdir from sources and headers
dpSources = sca_util.getSourcesRecursive( os.path.abspath( 
                            pj(RootDir, 'src', 'ves', 'conductor', 'qt', 'DefaultPlugin') ) )
for x in dpSources:
    index = sources.index( pj('DefaultPlugin', x) )
    sources.pop(index)

#dpHeaders = sca_util.getHeadersRecursive( os.path.abspath( 
#                            pj(RootDir, 'src', 'ves', 'conductor', 'qt', 'DefaultPlugin') ) )
#for x in dpHeaders:
#    index = headers.index( pj('DefaultPlugin', x) )
#    headers.pop(index)
###

lib_env.Append(LIBS = ['ves_open_xml',
                       'ves_xplorer',
                       'ves_xplorer_data',
                       'ves_xplorer_command',
                       'ves_xplorer_eventmanager',
                       'ves_xplorer_scenegraph',
                       'osgQtTree',
                       'qwt',
                       'storyteller'
                      ])
lib_env.Append(LIBPATH = [
                           pj('#', buildDir, 'src', 'ves', 'open', 'xml'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'data'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'command'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'eventmanager'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'scenegraph'),
                           pj('#', buildDir, 'external', 'osgQtTree' ),
                           pj('#', buildDir, 'external', 'qwt-6.0.0-rc5', 'src' )
                         ])

if GetPlatform() != 'darwin':
    Import('qt_options')
    qt_options.apply(lib_env)
    lib_env.AppendUnique( CPPDEFINES = ['QT_ON'])#,'QT_QTPROPERTYBROWSER_IMPORT'] )
else:
    import qt46
    qt46.applyQtBuildFlags(lib_env)

#lib_env.AppendUnique( CPPDEFINES = ['QT_RENDER_DEBUG'])

#if GetPlatform() == 'win32':
#    boostVersion = boost_options.getVersion()
#    boostNumber = boostVersion[ 0 ] + (0.01*boostVersion[ 1 ])
#    if boostNumber < 1.46:
#        lib_env.AppendUnique(CXXFLAGS = ['/Zc:wchar_t-'])

#disable profiling by default
if lib_env['VPRProfile'] == 'no':
   lib_env.AppendUnique( CPPDEFINES = ['DISABLE_VPR_PROFILE'] )

osg_options.apply( lib_env )
vpr_options.apply( lib_env )
vrjuggler_options.apply( lib_env )
if osgal_options.isAvailable():
   osgal_options.apply( lib_env )
   lib_env.Append( CPPDEFINES = [ 'VE_SOUND' ] )
poco_options.apply( lib_env )
xerces_options.apply(lib_env)
tao_options.apply(lib_env)
bullet_options.apply(lib_env)
osgbullet_options.apply(lib_env)
boost_options.apply( lib_env )
storyteller_options.apply( lib_env )
switchwire_options.apply( lib_env )
propertystore_options.apply( lib_env )
latticefx_options.apply( lib_env )

if minerva_options.isAvailable():
	lib_env.AppendUnique( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
	lib_env.AppendUnique( CPPDEFINES = ['NOMINMAX'] )
	#srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor', 'qt' ,'minerva') )
	#base_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
	#base_header_srcs = sca_util.getHeadersRecursive( srcDir )
	#sources += map(lambda s: pj('minerva', s), base_plugin_srcs)
	#headers += map(lambda s: pj('minerva', s), base_header_srcs)
	minerva_options.apply( lib_env )
	
lib_env.AppendUnique( CPPDEFINES = ['VE_GUIPLUGINS_LIBRARY','VE_CONDUCTOR_QTUI_LIBRARY'])
lib_env.AppendUnique( CPPPATH = [ pj(RootDir,'external','qwt-6.0.0-rc5','src') ] )
lib_env.AppendUnique( CPPPATH = [ pj(RootDir,'external'), buildSrcDir, pj(buildSrcDir, 'plugin'), pj(buildSrcDir, 'extendedWidgets'), pj(buildSrcDir, 'propertyBrowser'), pj(buildSrcDir, 'minerva') ] )

if lib_env['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_qtui',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_qtui', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'conductor','qt'))
lib.build()

SConscript( 'DefaultPlugin/SConscript' )

