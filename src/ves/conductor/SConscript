##Builds GUIPluginLib
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options wxwidgets_options RootDir tao_options vpr_options GetPlatform')

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor') )
sources = sca_util.getSourcesRecursive( srcDir )
headers = sca_util.getHeadersRecursive( srcDir )

lib_env = ves_pkg.getEnv().Clone()
lib_env.Append(LIBS = ['ves_open_xml','ves_open_module'])
lib_env.Append(LIBPATH = [
                           pj('#', buildDir, 'src', 'ves', 'open'),
                           pj('#', buildDir, 'src', 'ves', 'open','xml')
                         ])

tao_options.apply( lib_env )
xerces_options.apply( lib_env )
wxwidgets_options.apply( lib_env )
vpr_options.apply( lib_env )
lib_env.Append( CPPDEFINES = ['VE_GUIPLUGINS_LIBRARY','VE_CONDUCTOR_UTILS_LIBRARY'])

#see if we need to compile minerva in
if baseEnv[ 'MakeMinervaSupport' ] != 'no':
   lib_env.Append( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
   #minerva_options.apply( env )

if GetPlatform() == 'win32':
   lib_env.Append( CXXFLAGS = [ '/bigobj' ] )
   
if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_plugin',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_plugin', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'conductor'))
lib.build()
