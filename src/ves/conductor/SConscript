##Builds GUIPluginLib
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options wxwidgets_options RootDir')

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor') )
sources = sca_util.getSourcesRecursive( srcDir )
headers = sca_util.getHeadersRecursive( srcDir )

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['ves_open_xml','ves_open_module', 'ves_util'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'src', 'ves', 'util'),
                          pj('#', buildDir, 'src', 'ves', 'open'),
                        pj('#', buildDir, 'src', 'ves', 'open','xml')])
lib_env.ParseConfig('flagpoll TAO ACE TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype \
                              TAO_CosNaming TAO_Svc_Utils TAO_IORTable TAO_Messaging \
                              TAO_PortableServer TAO_BiDirGIOP TAO_AnyTypeCode vpr --libs --cflags')

xerces_options.apply( lib_env )
wxwidgets_options.apply( lib_env )
if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_plugin',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_plugin', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Conductor', 'GUIPlugin'))
lib.build()
