##Builds GUIPluginLib
import os, sys, string
import SConsAddons.Util as sca_util
import glob
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options wxwidgets_options RootDir tao_options vpr_options GetPlatform vtk_options osg_options')
Import('minerva_options')
if sca_util.GetPlatform() == 'linux':
   Import('qt_options')
# Build qt stuff if specified
if baseEnv['MakeQtSupport'] == 'yes':
    SConscript( 'qt/SConscript' )

if not wxwidgets_options.isAvailable():
    Return()

#srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor') )

lib_env = ves_pkg.getEnv().Clone()

sources = []
headers = []
sources_list = glob.glob(pj(RootDir, 'src','ves','conductor','*.cxx'))
headers_list = glob.glob(pj(RootDir, 'src','ves','conductor','*.h'))
sources += map(lambda s: os.path.basename(s), sources_list)
headers += map(lambda s: os.path.basename(s), headers_list)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor','util') )
util_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
util_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('util', s), util_plugin_srcs)
headers += map(lambda s: pj('util', s), util_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor','DefaultPlugin') )
DefaultPlugin_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
DefaultPlugin_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('DefaultPlugin', s), DefaultPlugin_plugin_srcs)
headers += map(lambda s: pj('DefaultPlugin', s), DefaultPlugin_header_srcs)

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor','xpm') )
xpm_plugin_srcs = sca_util.getSourcesRecursive( srcDir )
xpm_header_srcs = sca_util.getHeadersRecursive( srcDir )
sources += map(lambda s: pj('xpm', s), xpm_plugin_srcs)
headers += map(lambda s: pj('xpm', s), xpm_header_srcs)

#headers = sca_util.getHeadersRecursive( srcDir )
#sources = sca_util.getSourcesRecursive( srcDir )

# Remove everything in qt subdir from sources and headers
#qtSources = sca_util.getSourcesRecursive( os.path.abspath( 
#                            pj(RootDir, 'src', 'ves', 'conductor', 'qt') ) )
#for x in qtSources:
#    index = sources.index( pj('qt',x) )
#    sources.pop(index)
#
#qtHeaders = sca_util.getHeadersRecursive( os.path.abspath( 
#                            pj(RootDir, 'src', 'ves', 'conductor', 'qt') ) )
#for x in qtHeaders:
#    index = headers.index( pj('qt',x) )
#    headers.pop(index)

if GetPlatform() == 'linux':
    lib_env.Append( CXXFLAGS=['-fPIC'])

lib_env.Append(LIBS = ['ves_open_xml',
                       'ves_open_module'])
lib_env.Append(LIBPATH = [
                           pj('#', buildDir, 'src', 'ves', 'open'),
                           pj('#', buildDir, 'src', 'ves', 'open','xml')
                         ])

#see if we need to compile minerva in
if minerva_options.isAvailable():
   lib_env.Append( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
   minerva_options.apply( lib_env )

tao_options.apply( lib_env )
wxwidgets_options.apply( lib_env )
vpr_options.apply( lib_env )
vtk_options.apply( lib_env )
xerces_options.apply( lib_env )

lib_env.Append( CPPDEFINES = ['VE_GUIPLUGINS_LIBRARY','VE_CONDUCTOR_UTILS_LIBRARY'])

if GetPlatform() == 'win32':
   lib_env.Append( CXXFLAGS = [ '/bigobj' ] )
   
if lib_env['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_plugin',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_plugin', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'conductor'))
lib.build()
