##Builds GUIPluginLib
import os, sys, string
import SConsAddons.Util as sca_util
#import qt46
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options wxwidgets_options RootDir tao_options vpr_options GetPlatform vtk_options osg_options')
Import('minerva_options')

srcDir = os.path.abspath( pj(RootDir, 'src', 'ves', 'conductor') )


lib_env = ves_pkg.getEnv().Clone()

# Extra stuff to do for Qt support
if baseEnv['MakeQtSupport'] == "yes":
    import qt46

    source = [pj('#',buildDir,'src','ves','conductor','qt','MainWindow.ui')]
    cppHeaders = lib_env.qt_uic(source)

    source = [pj('#',buildDir,'src','ves','conductor', 'qt','propertyBrowser',
                    'Visualization.ui')]
    cppHeaders += lib_env.qt_uic(source)

    source = [pj('#',buildDir,'src','ves','conductor','qt','MainWindow.h')]
    cppSources = lib_env.qt_moc(source)

    source = [pj('#',buildDir,'src','ves','conductor','qt','UIElementQt.h')]
    cppSources += lib_env.qt_moc(source)

    source = [pj('#',buildDir,'src','ves','conductor','qt','propertyBrowser',
                    'PropertyBrowser.h')]
    cppSources += lib_env.qt_moc(source)

    source = [pj('#',buildDir,'src','ves','conductor','qt','propertyBrowser',
                    'Visualization.h')]
    cppSources += lib_env.qt_moc(source)

    source = [pj('#',buildDir,'src','ves','conductor','qt','propertyBrowser',
                    'GenericPropertyBrowser.h')]
    cppSources += lib_env.qt_moc(source)

    openDir = os.path.abspath( pj(RootDir,buildDir,'src','ves','conductor') )
    cppSources1 = map(lambda s: pj(openDir, '%s' ) %(s), cppSources)
    cppHeaders1 = map(lambda s: pj(openDir, '%s' ) %(s), cppHeaders)

    lib_env.AppendUnique( CPPPATH = [pj(openDir,'qt'),
                                     pj(openDir,'qt','propertyBrowser')] )
    
    lib_env.Append( LIBS = ['QtSolutions_PropertyBrowser-2.5'] )
else:
    cppHeaders1 = []
    cppSources1 = []

headers = cppHeaders1
headers += sca_util.getHeadersRecursive( srcDir )
sources = cppSources1
sources += sca_util.getSourcesRecursive( srcDir )

# If Qt support is off, back up and remove Qt files from previous sources line
if baseEnv['MakeQtSupport'] != "yes":
    qtSources = sca_util.getSourcesRecursive( os.path.abspath( 
                                pj(RootDir, 'src', 'ves', 'conductor', 'qt') ) )
    for x in qtSources:
        index = sources.index( pj('qt',x) )
        sources.pop(index)


if GetPlatform() == 'linux':
    lib_env.Append( CXXFLAGS=['-fPIC'])

lib_env.Append(LIBS = ['ves_open_xml',
                       'ves_open_module',
                       'ves_xplorer_util',
                       'ves_xplorer_data'])
lib_env.Append(LIBPATH = [
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'util'),
                           pj('#', buildDir, 'src', 'ves', 'xplorer', 'data'),
                           pj('#', buildDir, 'src', 'ves', 'open'),
                           pj('#', buildDir, 'src', 'ves', 'open','xml')
                         ])

tao_options.apply( lib_env )
xerces_options.apply( lib_env )
wxwidgets_options.apply( lib_env )
vpr_options.apply( lib_env )
vtk_options.apply( lib_env )
osg_options.apply( lib_env )

if baseEnv['MakeQtSupport'] == "yes":
    qt46.applyQtBuildFlags( lib_env )

lib_env.Append( CPPDEFINES = ['VE_GUIPLUGINS_LIBRARY','VE_CONDUCTOR_UTILS_LIBRARY'])

#see if we need to compile minerva in
if baseEnv[ 'MakeMinervaSupport' ] != 'no':
   lib_env.Append( CPPDEFINES = ['MINERVA_GIS_SUPPORT'] )
   minerva_options.apply( lib_env )

if GetPlatform() == 'win32':
   lib_env.Append( CXXFLAGS = [ '/bigobj' ] )
   
if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('ves_conductor_plugin',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('ves_conductor_plugin', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'ves', 'conductor'))
lib.build()
