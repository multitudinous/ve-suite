<?xml version="1.0" encoding="ISO-8859-1" standalone="no" ?>
<Program>
   <name>Gooch</name>
   <vertexShader>
      <type>Vertex</type>
      <uniform>
         <name>LightPosition</name>
         <type>Float</type>
         <size>3</size>
         <value>0.0</value>
         <value>10.0</value>
         <value>4.0</value>
         <objectType>Uniform</objectType>
         <objectNamespace>Shader</objectNamespace>
      </uniform>
      <shaderCode>
         uniform vec3  LightPosition;
         varying float NdotL;
         varying vec3  ReflectVec;
         varying vec3  ViewVec;

         void main(void)
         {
            vec3 ecPos      = vec3 (gl_ModelViewMatrix * gl_Vertex);
            vec3 tnorm      = normalize(gl_NormalMatrix * gl_Normal);
            vec3 lightVec   = normalize(LightPosition - ecPos);
            ReflectVec      = normalize(reflect(-lightVec, tnorm));
            ViewVec         = normalize(-ecPos);
            NdotL           = (dot(lightVec, tnorm) + 1.0) * 0.5;
            gl_Position     = ftransform();
        }
      </shaderCode>
      <objectType>Shader</objectType>
      <objectNamespace>Shader</objectNamespace>
   </vertexShader>
   <fragmentShader>
              <type>Fragment</type>
              <uniform>
                <name>SurfaceColor</name>
                <type>Float</type>
                <size>3</size>
                <textureUnit>0</textureUnit>
                <value>0.75</value>
                <value>0.75</value>
                <value>0.75</value>
                <objectType>Uniform</objectType>
                <objectNamespace>Shader</objectNamespace>
              </uniform>
              <uniform>
                <name>WarmColor</name>
                <type>Float</type>
                <size>3</size>
                <textureUnit>0</textureUnit>
                <value>0.5</value>
                <value>0.5</value>
                <value>0.5</value>
                <objectType>Uniform</objectType>
                <objectNamespace>Shader</objectNamespace>
              </uniform>
              <uniform>
                <name>CoolColor</name>
                <type>Float</type>
                <size>3</size>
                <textureUnit>0</textureUnit>
                <value>0.8500000238</value>
                <value>0.8500000238</value>
                <value>0.8500000238</value>
                <objectType>Uniform</objectType>
                <objectNamespace>Shader</objectNamespace>
              </uniform>
              <uniform>
                <name>DiffuseWarm</name>
                <type>Float</type>
                <size>1</size>
                <textureUnit>0</textureUnit>
                <value>0.4499999881</value>
                <objectType>Uniform</objectType>
                <objectNamespace>Shader</objectNamespace>
              </uniform>
              <uniform>
                <name>DiffuseCool</name>
                <type>Float</type>
                <size>1</size>
                <textureUnit>0</textureUnit>
                <value>0.4499999881</value>
                <objectType>Uniform</objectType>
                <objectNamespace>Shader</objectNamespace>
              </uniform>
              <shaderCode>
                          varying float NdotL;
                          varying vec3  ReflectVec;
                          varying vec3  ViewVec;
		          uniform vec3 CoolColor;
		          uniform vec3 SurfaceColor;
		          uniform vec3 WarmColor;
		          uniform vec3 DiffuseWarm;
		          uniform vec3 DiffuseCool;

                          void main (void)
                          {
                             vec3 kcool    = min(CoolColor + DiffuseCool * SurfaceColor, 1.0);
                             vec3 kwarm    = min(WarmColor + DiffuseWarm * SurfaceColor, 1.0); 
                             vec3 kfinal   = mix(kcool, kwarm, NdotL);

                             vec3 nreflect = normalize(ReflectVec);
                             vec3 nview    = normalize(ViewVec);

                             float spec    = max(dot(nreflect, nview), 0.0);
                             spec          = pow(spec, 32.0);

                             gl_FragColor = vec4 (min(kfinal + spec, 1.0), 1.0);
                          }
                          </shaderCode>
              <objectType>Shader</objectType>
              <objectNamespace>Shader</objectNamespace>
            </fragmentShader>
</Program>
