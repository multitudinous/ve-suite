<?xml version="1.0" encoding="ISO-8859-1" standalone="no" ?>

<Program>
<name>phong_Texture2D</name>

<vertexShader>
<type>Vertex</type>
	<shaderCode>
		varying vec3 objPos;
      	varying vec3 eyePos;
      	varying vec3 normal;
		varying vec2 texCoord;
   
      	void main()
      	{
            	gl_Position=ftransform();
            
            	objPos=gl_Vertex.xyz;
            	eyePos=vec3(gl_ModelViewMatrix*gl_Vertex);
            	normal=vec3(gl_NormalMatrix*gl_Normal);
			texCoord=gl_MultiTexCoord0.xy;
			//texCoord=gl_Vertex.xy;
      	}
	</shaderCode>
</vertexShader>

<fragmentShader>
<type>Fragment</type>
	<uniform>
		<name>ambientLight</name>
		<type>Float</type>
		<size>3</size>
		<value>0.368627</value>
		<value>0.368421</value>
		<value>0.368421</value>
	</uniform>
	<uniform>
		<name>diffuseLight</name>
		<type>Float</type>
		<size>3</size>
		<value>0.886275</value>
		<value>0.885003</value>
		<value>0.885003</value>
	</uniform>
	<uniform>
		<name>specularLight</name>
		<type>Float</type>
		<size>3</size>
		<value>0.490196</value>
		<value>0.488722</value>
		<value>0.488722</value>
	</uniform>
	<uniform>
		<name>specularMaterial</name>
		<type>Float</type>
		<size>3</size>
		<value>0.490196</value>
		<value>0.488722</value>
		<value>0.488722</value>
	</uniform>
	<uniform>
		<name>lightPos</name>
		<type>Float</type>
		<size>3</size>
		<value>-100.0</value>
		<value>100.0</value>
		<value>100.0</value>
	</uniform>
	<uniform>
		<name>specularPower</name>
		<type>Float</type>
		<size>1</size>
		<value>25.0</value>
	</uniform>
	<uniform>
		<name>baseMap</name>
		<type>Sampler</type>
		<size>1</size>
		<textureUnit>0</textureUnit>
      </uniform>
	<textureImage> 
		<textureDescriptionData> 
			<parameter> 
				<dataName>Wrap S</dataName> 
				<dataValueString>Repeat</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Wrap T</dataName> 
				<dataValueString>Repeat</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Wrap R</dataName> 
				<dataValueString>Repeat</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Magnification</dataName> 
				<dataValueString>Linear</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Minification</dataName> 
				<dataValueString>Linear</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Type</dataName> 
				<dataValueString>2D</dataValueString> 
			</parameter> 
			<parameter> 
				<dataName>Dimension</dataName> 
				<dataValueUInt>2</dataValueUInt> 
			</parameter> 
			<parameter> 
				<dataName>Unit</dataName> 
				<dataValueUInt>0</dataValueUInt> 
			</parameter> 
			<parameter> 
				<dataName>FRONT</dataName> 
				<dataValueString>C:/TSVEG/VE_Suite/VE_TestSuite/Textures/carpet.jpg</dataValueString> 
			</parameter> 
		</textureDescriptionData> 
		<textureUnit>0</textureUnit> 
		<dimension>2</dimension> 
		<textureType>2D</textureType> 
	</textureImage>
	<shaderCode>
      	uniform vec3 ambientLight;
      	uniform vec3 diffuseLight;
      	uniform vec3 specularLight;
      	uniform vec3 specularMaterial;
      	uniform vec3 lightPos;
      	uniform float specularPower;

		uniform sampler2D baseMap;

      	varying vec3 objPos;
      	varying vec3 eyePos;
      	varying vec3 normal;
		varying vec2 texCoord;

      	void main()
      	{
            	vec3 N=normalize(normal);
            	vec3 L=normalize(lightPos);
            	float NDotL=max(dot(N,L),0.0); 
   
            	vec3 V=normalize(eyePos);
            	vec3 R=reflect(V,N);
            	float RDotL=max(dot(R,L),0.0);
   
			vec3 baseColor=vec3(texture2D(baseMap,texCoord));

           		vec3 TotalAmbient=ambientLight*baseColor; 
            	vec3 TotalDiffuse=diffuseLight*baseColor*NDotL; 
            	vec3 TotalSpecular=specularLight*specularMaterial*pow(RDotL,specularPower);
  
            	gl_FragColor=vec4(TotalAmbient+TotalDiffuse+TotalSpecular,1.0);  
      	}
	</shaderCode>
</fragmentShader>

</Program>