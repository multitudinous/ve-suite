<?xml version="1.0" encoding="ISO-8859-1" standalone="no" ?>

<Program>
<name>phong</name>

<vertexShader>
<type>Vertex</type>
	<shaderCode>
		varying vec3 color;
		varying vec3 lightVector;
		varying vec3 objPos;
		varying vec3 eyePos;
		varying vec3 normal;
   
		void main()
		{
   			gl_Position=ftransform();
				color=gl_Color.rgb;
   			lightVector=vec3(gl_LightSource[0].position);
   			objPos=gl_Vertex.xyz;
   			eyePos=vec3(gl_ModelViewMatrix*gl_Vertex);
   			normal=gl_NormalMatrix*gl_Normal;
		}
	</shaderCode>
</vertexShader>

<fragmentShader>
<type>Fragment</type>
	<uniform>
		<name>fvSpecular</name>
		<type>Float</type>
		<size>3</size>
		<value>0.490196</value>
		<value>0.488722</value>
		<value>0.488722</value>
	</uniform>
	<uniform>
		<name>fSpecularPower</name>
		<type>Float</type>
		<size>1</size>
		<value>20.0</value>
	</uniform>
	<shaderCode>
     		uniform vec3 fvSpecular;
      	uniform float fSpecularPower;
      
			varying vec3 color;
      	varying vec3 lightVector;
      	varying vec3 objPos;
      	varying vec3 eyePos;
      	varying vec3 normal;

      	void main()
      	{
            	vec3 fvDiffuse=color;
            	vec3 L=normalize(lightVector);
            	vec3 N=normalize(normal);
            	float fNDotL=dot(N,L); 
            
            	vec3 V=normalize(eyePos);
            	vec3 R=reflect(V,N);
            	float fRDotL=max(0.0,dot(R,L));

            	vec3 fvTotalDiffuse=fvDiffuse*fNDotL; 
            	vec3 fvTotalSpecular=fvSpecular*(pow(fRDotL,fSpecularPower));
           
            	gl_FragColor=vec4(fvTotalDiffuse+fvTotalSpecular,1.0);
      	}
	</shaderCode>
</fragmentShader>

</Program>
