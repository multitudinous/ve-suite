##Builds DataLoaderLib
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR')

sources = Split("""
    DataLoader.cxx
    EnSightTranslator.cxx
    AVSTranslator.cxx
    cfdDICOMTranslator.cxx
    cfdREITranslator.cxx
    converter.cpp
    gridConversion.cxx
    plot3dReader.cxx
    StarCDTranslator.cxx
    starReader.cxx
    AnsysTranslator.cxx
    ansysReader.cxx
""")

headers = Split("""
    DataLoader.h
    EnSightTranslator.h
    AVSTranslator.h
    cfdDICOMTranslator.h
    cfdREITranslator.h
    converter.h
    gridConversion.h
    plot3dReader.h
    StarCDTranslator.h
    starReader.h
    AnsysTranslator.h
    ansysReader.h
""")

if os.getenv('FLUENT_MFIX') == 'TRUE':
    srcs.Append('FluentTranslator.cxx')
    srcs.Append('MFIXTranslator.cxx')
    env.Append(CXXFLAGS = ['-DFLUENT_MFIX'])
##srcs = map(lambda s: pj('#', 'VE_Builder', 'Translator', 'DataLoader', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
##env.Append(CPPPATH = [os.getcwd()])
lib_env.Append(LIBS = ['VE_UtilLib', 'TranslatorToVTKLib'])
lib_env.ParseConfig('flagpoll vtk Boost.Filesystem --libs --cflags')

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('DataLoaderLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('DataLoaderLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Builder', 'Translator', 'DataLoader'))
lib.build()
