##Builds DataLoaderLib
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR vtk_options buildDir')

sources = Split("""
    DataLoader.cxx
    EnSightTranslator.cxx
    AVSTranslator.cxx
    cfdDICOMTranslator.cxx
    cfdREITranslator.cxx
    converter.cxx
    gridConversion.cxx
    plot3dReader.cxx
    StarCDTranslator.cxx
    starReader.cxx
    AnsysTranslator.cxx
    ansysReader.cxx
    FluentTranslator.cxx
    MFIXTranslator.cxx
""")

headers = Split("""
    DataLoader.h
    EnSightTranslator.h
    AVSTranslator.h
    cfdDICOMTranslator.h
    cfdREITranslator.h
    converter.h
    gridConversion.h
    plot3dReader.h
    StarCDTranslator.h
    starReader.h
    AnsysTranslator.h
    ansysReader.h
    FluentTranslator.h
    MFIXTranslator.h
""")

##srcs = map(lambda s: pj('#', 'VE_Builder', 'Translator', 'DataLoader', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Xplorer','Utilities'),
                          pj('#', buildDir, 'VE_Builder','Translator','cfdTranslatorToVTK') ],
               LIBS = ['VE_UtilLib', 'TranslatorToVTKLib'])
lib_env.ParseConfig('flagpoll Boost.Filesystem --libs --cflags')

vtk_options.apply( lib_env )
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('DataLoaderLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('DataLoaderLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Builder', 'Translator', 'DataLoader'))
lib.build()
