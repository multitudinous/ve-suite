# Generated automatically from Makefile.in by configure.
#!/bin/sh
# the name of the executable program to be created
PROGRAM = parse

# the object files to be linked together. List those generated from Fortran
# and from C/C++ separately
OBJS = dump.o toVTK.o fluentVtkFactory.o setOperators.o reorder.o fluentCase.o fluentObjects.o fluentIO.o

# additional flags to be passed to the linker. If your program
# requires other external libraries, put them here
LINK_OPTIONS = 

LOCAL=/nfs/tera/modeling/dataVisualization/ids

#############################################################################

# the Fortran compiler
FORT = 

# Fortran compile flags  
FORT_FLAGS = -O2 -fno-second-underscore 

# Fortran libraries
#FORT_LIBS =  -lg2c -lm
FORT_LIBS = 

# the C++ compiler
CXX = g++

# C++ compile flags
#CXX_FLAGS = -g -DBZDEBUG -I$(LOCAL)/include -I$(LOCAL)/blitz
CXX_FLAGS = -g -DBZDEBUG -I$(LOCAL)/include
#CXX_FLAGS = -O2 -I$(LOCAL)/include -I$(LOCAL)/blitz

# external libraries
#CXX_LIBS = -L$(LOCAL)/lib/blitz -lblitz -L$(LOCAL)/lib/vtk -lvtkIO -lvtkCommon -lvtkGraphics
CXX_LIBS = -L$(LOCAL)/lib  -L$(LOCAL)/lib/vtk -lvtkIO -lvtkCommon -lvtkGraphics

# flags passed to the C++ compiler/linker for the linking step
LCXX_FLAGS = -g -frtti -DBZDEBUG
#LCXX_FLAGS = -O2 -frtti -DBZDEBUG

# how to compile C++ source files to object files
.cpp.o:
	$(CXX) -c $< $(CXX_FLAGS)

# how to compile Fortran source files to object files
.f.o: 
	$(FORT) -c $< $(FORT_FLAGS)

all: testFactory

testFactory: $(OBJS) testVtkFactory.o
	$(CXX) -o ../testVtkFactory testVtkFactory.o $(OBJS) $(LCXX_FLAGS) $(LINK_OPTIONS) $(CXX_LIBS) $(FORT_LIBS)

clean:
	$(RM) $(OBJS) $(PROGRAM) testVtkFactory.o















