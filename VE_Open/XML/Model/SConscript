##Builds VE_ModelLib
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR buildDir')

sources = Split("""
   Point.cxx
   Port.cxx
   Link.cxx
   Network.cxx
   Model.cxx
   Tag.cxx
   ModelCreator.cxx 
""")

headers = Split("""
   Point.h
   Port.h
   Link.h
   Network.h
   Model.h
   Tag.h
   ModelCreator.h 
""")

##srcs = map(lambda s: pj('#', 'VE_Open', 'XML', 'Model', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_XMLLib','VE_CADLib', 'VE_ShaderLib'])
lib_env.Append(LIBPATH = [  pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','CAD'),
                        pj('#', buildDir, 'VE_Open','XML','Shader')])
lib_env.ParseConfig('flagpoll xerces --libs --cflags')

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_ModelLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_ModelLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Open', 'XML', 'Model'))
lib.build()
