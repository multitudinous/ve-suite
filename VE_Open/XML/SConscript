##Builds VE_XMLLib
import os, sys, string
##import practice
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR')

sources = Split("""
   CreationEventHandler.cxx 
   Command.cxx
   DataValuePair.cxx
   FloatArray.cxx
   OneDDoubleArray.cxx
   TwoDDoubleArray.cxx
   ThreeDDoubleArray.cxx
   OneDIntArray.cxx
   TwoDIntArray.cxx
   ThreeDIntArray.cxx
   OneDStringArray.cxx
   ParameterBlock.cxx
   StateInfo.cxx
   Transform.cxx
   User.cxx
   XMLCreator.cxx
   XMLObject.cxx
   XMLObjectFactory.cxx
   XMLReaderWriter.cxx
   DOMDocumentManager.cxx
""")

headers = Split("""
   CreationEventHandler.h 
   Command.h
   DataValuePair.h
   FloatArray.h
   OneDDoubleArray.h
   TwoDDoubleArray.h
   ThreeDDoubleArray.h
   OneDIntArray.h
   TwoDIntArray.h
   ThreeDIntArray.h
   OneDStringArray.h
   ParameterBlock.h
   StateInfo.h
   Transform.h
   User.h
   XMLCreator.h
   XMLObject.h
   XMLObjectFactory.h
   XMLReaderWriter.h
   DOMDocumentManager.h
""")
##srcs = map(lambda s: pj('#', 'VE_Open', 'XML', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
##lib_env.ParseConfig('flagpoll xerces apr-1 apr-util-1 --libs --cflags' )
##Get apr config.
if baseEnv.has_key('AprVersion'):
   if baseEnv[ 'AprVersion' ] >= "1.0":
      lib_env.ParseConfig('flagpoll xerces apr-1 apr-util-1 --libs --cflags' )
   else:
      lib_env.ParseConfig('flagpoll xerces apr apr-util --libs --cflags' )
else:
   lib_env.ParseConfig('flagpoll xerces apr apr-util --libs --cflags' )

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_XMLLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_XMLLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Open', 'XML'))
lib.build()
