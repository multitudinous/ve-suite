/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VE-Suite is (C) Copyright 1998-2006 by Iowa State University
 *
 * Original Development Team:
 *   - ISU's Thermal Systems Virtual Engineering Group,
 *     Headed by Kenneth Mark Bryden, Ph.D., www.vrac.iastate.edu/~kmbryden
 *   - Reaction Engineering International, www.reaction-eng.com
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile: filename,v $
 * Date modified: $Date: date $
 * Version:       $Rev: 999999 $
 * -----------------------------------------------------------------
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/
interface VjObs
{
   typedef sequence< string > scalar_p;
   typedef sequence< short > obj_p;
   typedef sequence< double > obj_pd;
   typedef sequence< obj_pd > double2DArray;

   struct Scalar
   {
      string scalarnames;
      obj_pd scalarrange;
   };

   typedef sequence< Scalar > Scalars;

   struct Dataset
   {
      string datasetname;
      scalar_p vectornames;
      scalar_p textureVectorNames;
      scalar_p textureScalarNames;
      Scalars scalarVector;
   };

   typedef sequence< Dataset > Datasets;

   struct Model
   {
      scalar_p geometrynames;
      Datasets dataVector;

      obj_p datasettypes;
      obj_p num_scalars_per_dataset;
      obj_p num_vectors_per_dataset;
   };

   typedef sequence< Model > Models;
   // Retrun all the models currently loaded in xplorer
   Models GetModels();
   // Retrun the user requested model
   Model GetModel( in long modelID );

   scalar_p get_teacher_name();
   short get_teacher_num();
   
   // transfer data to explorer
   void SetClientInfoFlag( in short value );
   void SetClientInfoData( in obj_pd o);
   obj_pd GetClientInfoData();

   // write xerces string
   void SetCommandString( in string input );

   // New Stuff
   // used as a generic way to pull data across
   obj_pd getDouble1D( in string input );
   double2DArray getDouble2D( in string input );

   //void setIsoValue(in long value);
   long getIsoValue();

   void setSc(in long value);

   short getPostdataState();

   //void setTimesteps(in short value);
   short getTimesteps();
};
