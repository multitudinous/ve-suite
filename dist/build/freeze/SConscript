#!python
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('ves_pkg', 'RootDir', 'buildDir')
env = ves_pkg.getEnv().Clone()


##Freezing Launcher Code
##Set UPX path in ENV
if sca_util.GetPlatform() == "win32":
    UPX_PATH = pj(RootDir,'external','FreezePython','upx305w')
else:
    UPX_PATH = pj(RootDir,'external','FreezePython','upx-3.00-i386_linux')

os.environ['PATH'] = os.environ['PATH'] + os.pathsep + UPX_PATH
os.putenv('PATH', os.environ['PATH'])

srcs = Split("""
    velauncher
""")

installerDir = pj('src', 'apps', 'launcher')
installerbaseDir = pj(RootDir, installerDir)

velauncherCodeDir = pj(RootDir,'src','apps','launcher')
velauncherLibDir = pj(velauncherCodeDir,'python')
velauncherDistDir = pj(RootDir,buildDir,'dist','build','freeze')

installerImages = pj(RootDir,'dist','installerImages')

launcherPyFiles = sca_util.getFilesRecursiveByExt( installerbaseDir, ['.py'] )
launcherPyFiles = map(lambda s: pj(installerbaseDir, s), launcherPyFiles)
launcherPyFiles.append( 'velauncher.spec' )

basePyinstallerDir = pj(RootDir,'external','FreezePython','pyinstaller-1.4')
configure_py = pj(basePyinstallerDir, 'Configure.py')
makespec_py = pj(basePyinstallerDir, 'Makespec.py')
build_py = pj(basePyinstallerDir, 'Build.py')

makespecSrc = map(lambda s: pj(installerbaseDir, "%s.py" %(s)), srcs)
makespecTarget = map(lambda s: "%s.spec" %(s), srcs)

if sca_util.GetPlatform() == "win32":
    freezeTarget = map(lambda s: "%s.exe" %(s), srcs)
else:
    freezeTarget = map(lambda s: "%s" %(s), srcs)

make_cmd = "python " + makespec_py

build_cmd = "python "

config_cmd = pj(basePyinstallerDir,'Configure.py')
os.popen("python " + config_cmd)

launcherBundle = ves_pkg.createFileBundle( 'bin' )

if sca_util.GetPlatform() == "win32":
    makespecAction = '%s --onefile --out=%s --path=%s --icon=%s\\ves_icon.ico --upx ${SOURCE.abspath}' % (make_cmd, velauncherDistDir, velauncherLibDir, installerImages)
    makespecBuilder = Builder(action = makespecAction, single_source = True, suffix = ".spec")
    
    freezeAction = '%s ${SOURCE.abspath} %s\\velauncher.spec' % (build_cmd, velauncherDistDir)
    freezeBuilder = Builder(action = freezeAction, single_source = True, suffix = "")

    env.Append(BUILDERS = {'makespec': makespecBuilder, 'freeze' : freezeBuilder})
    env.makespec(target = makespecTarget ,source = makespecSrc)
    #Depends( makespecTarget, launcherPyFiles)    
    #Depends(pj('dist', 'velauncher.exe'), makespecTarget)
    env.freeze(target = pj('dist', 'velauncher.exe'), source = build_py)

    Depends(pj('dist', 'velauncher.exe'), launcherPyFiles)
    launcherBundle.addFiles( pj('dist', 'velauncher.exe'),"",False )

else:
    makespecAction = '%s --onefile --out=%s --path=%s ${SOURCE.abspath}' % (make_cmd, velauncherDistDir, velauncherLibDir)
    makespecBuilder = Builder(action = makespecAction, single_source = True, suffix = ".spec")

    freezeAction = '%s ${SOURCE.abspath} %s/velauncher.spec' % (build_cmd, velauncherDistDir)
    freezeBuilder = Builder(action = freezeAction, single_source = True, suffix = "")

    env.Append(BUILDERS = {'makespec': makespecBuilder, 'freeze' : freezeBuilder})
    env.makespec(target = makespecTarget ,source = makespecSrc)
    env.freeze(target = freezeTarget, source = build_py)
    
    Depends('velauncher', launcherPyFiles)
    launcherBundle.addFiles( freezeTarget )
