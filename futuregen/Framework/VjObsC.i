// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


#if !defined (_VJOBS_SCALAR_P_CI_)
#define _VJOBS_SCALAR_P_CI_

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class VjObs::scalar_p_var
// *************************************************************

ACE_INLINE
VjObs::scalar_p_var::scalar_p_var (void)
  : ptr_ (0)
{}

ACE_INLINE
VjObs::scalar_p_var::scalar_p_var (scalar_p *p)
  : ptr_ (p)
{}

ACE_INLINE
VjObs::scalar_p_var::scalar_p_var (const ::VjObs::scalar_p_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::VjObs::scalar_p (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

ACE_INLINE
VjObs::scalar_p_var::~scalar_p_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
VjObs::scalar_p_var &
VjObs::scalar_p_var::operator= (scalar_p *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::VjObs::scalar_p_var &
VjObs::scalar_p_var::operator= (const ::VjObs::scalar_p_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          scalar_p *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              scalar_p (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              scalar_p *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

ACE_INLINE
const ::VjObs::scalar_p *
VjObs::scalar_p_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p *
VjObs::scalar_p_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
VjObs::scalar_p_var::operator const ::VjObs::scalar_p &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
VjObs::scalar_p_var::operator ::VjObs::scalar_p &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
VjObs::scalar_p_var::operator ::VjObs::scalar_p &() const // cast 
{
  return *this->ptr_;
}

// Variable-size types only.
ACE_INLINE
VjObs::scalar_p_var::operator ::VjObs::scalar_p *&() // cast 
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
VjObs::scalar_p_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const ::VjObs::scalar_p &
VjObs::scalar_p_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p &
VjObs::scalar_p_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p *&
VjObs::scalar_p_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p *
VjObs::scalar_p_var::_retn (void)
{
  ::VjObs::scalar_p *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::VjObs::scalar_p *
VjObs::scalar_p_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class VjObs::scalar_p_out
// *************************************************************

ACE_INLINE
VjObs::scalar_p_out::scalar_p_out (scalar_p *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
VjObs::scalar_p_out::scalar_p_out (scalar_p_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
VjObs::scalar_p_out::scalar_p_out (const ::VjObs::scalar_p_out &p)
  : ptr_ (ACE_const_cast (scalar_p_out&, p).ptr_)
{}

ACE_INLINE
::VjObs::scalar_p_out &
VjObs::scalar_p_out::operator= (const ::VjObs::scalar_p_out &p)
{
  this->ptr_ = ACE_const_cast (scalar_p_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::VjObs::scalar_p_out &
VjObs::scalar_p_out::operator= (scalar_p *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
VjObs::scalar_p_out::operator ::VjObs::scalar_p *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p *&
VjObs::scalar_p_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::scalar_p *
VjObs::scalar_p_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
TAO_SeqElem_String_Manager
VjObs::scalar_p_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from 
// be/be_visitor_sequence/gen_unbounded_sequence_ci.cpp:99

#if !defined (TAO_USE_SEQUENCE_TEMPLATES)

#if !defined (__TAO_UNBOUNDED_SEQUENCE_VJOBS_OBJ_P_CI_)
#define __TAO_UNBOUNDED_SEQUENCE_VJOBS_OBJ_P_CI_

ACE_INLINE
CORBA::Short *
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (CORBA::ULong size)
{
  CORBA::Short *retval = 0;
  ACE_NEW_RETURN (retval, CORBA::Short[size], 0);
  return retval;
}

ACE_INLINE
void VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::freebuf (CORBA::Short *buffer)
{
  delete [] buffer;
}

ACE_INLINE
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::_TAO_Unbounded_Sequence_VjObs_obj_p (void)
{
}

ACE_INLINE
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::_TAO_Unbounded_Sequence_VjObs_obj_p (CORBA::ULong maximum) 
  : TAO_Unbounded_Base_Sequence (maximum, _TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (maximum))
{
}

ACE_INLINE
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::_TAO_Unbounded_Sequence_VjObs_obj_p (
    CORBA::ULong maximum,
    CORBA::ULong length,
    CORBA::Short *data,
    CORBA::Boolean release
  )
  : TAO_Unbounded_Base_Sequence (maximum, length, data, release)
{
}

ACE_INLINE
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::_TAO_Unbounded_Sequence_VjObs_obj_p (
    const _TAO_Unbounded_Sequence_VjObs_obj_p &rhs
  )
  : TAO_Unbounded_Base_Sequence (rhs)
{
  if (rhs.buffer_ != 0)
    {
      CORBA::Short *tmp1 =
        _TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (this->maximum_);
      CORBA::Short * const tmp2 =
        ACE_reinterpret_cast (CORBA::Short * ACE_CAST_CONST, rhs.buffer_);
      
      for (CORBA::ULong i = 0; i < this->length_; ++i)
        {
          tmp1[i] = tmp2[i];
        }
      
      this->buffer_ = tmp1;
    }
  else
    {
      this->buffer_ = 0;
    }
}

ACE_INLINE
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p &
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::operator= (
    const _TAO_Unbounded_Sequence_VjObs_obj_p &rhs
  )
{
  if (this == &rhs)
    {
      return *this;
    }
  
  if (this->release_)
    {
      if (this->maximum_ < rhs.maximum_)
        {
          // Free the old buffer.
          CORBA::Short *tmp =
            ACE_reinterpret_cast (CORBA::Short *, this->buffer_);
          
          _TAO_Unbounded_Sequence_VjObs_obj_p::freebuf (tmp);
          
          this->buffer_ =
            _TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (rhs.maximum_);
        }
    }
  else
    {
      this->buffer_ =
        _TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (rhs.maximum_);
    }
  
  TAO_Unbounded_Base_Sequence::operator= (rhs);
  
  CORBA::Short *tmp1 =
    ACE_reinterpret_cast (CORBA::Short *, this->buffer_);
  CORBA::Short * const tmp2 =
    ACE_reinterpret_cast (CORBA::Short * ACE_CAST_CONST, rhs.buffer_);
  
  for (CORBA::ULong i = 0; i < this->length_; ++i)
    {
      tmp1[i] = tmp2[i];
    }
  
  return *this;
}

// = Accessors.
ACE_INLINE
CORBA::Short &
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::operator[] (CORBA::ULong i)
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::Short* tmp =
    ACE_reinterpret_cast (CORBA::Short*, this->buffer_);
  return tmp[i];
}

ACE_INLINE
const CORBA::Short &
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::operator[] (CORBA::ULong i) const
{
  ACE_ASSERT (i < this->maximum_);
  CORBA::Short * const tmp =
    ACE_reinterpret_cast (CORBA::Short* ACE_CAST_CONST, this->buffer_);
  return tmp[i];
}

// Implement the TAO_Base_Sequence methods (see Sequence.h)

ACE_INLINE
CORBA::Short *
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::get_buffer (CORBA::Boolean orphan)
{
  CORBA::Short *result = 0;
  
  if (orphan == 0)
    {
      // We retain ownership.
      if (this->buffer_ == 0)
        {
          result =
            _TAO_Unbounded_Sequence_VjObs_obj_p::allocbuf (this->length_);
          this->buffer_ = result;
          this->release_ = 1;
        }
      else
        {
          result =
            ACE_reinterpret_cast (CORBA::Short*, this->buffer_);
        }
    }
  else // if (orphan == 1)
    {
      if (this->release_ != 0)
        {
          // We set the state back to default and relinquish ownership.
          result =
            ACE_reinterpret_cast(CORBA::Short*,this->buffer_);
          this->maximum_ = 0;
          this->length_ = 0;
          this->buffer_ = 0;
          this->release_ = 0;
        }
    }
  
  return result;
}

ACE_INLINE
const CORBA::Short *
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::get_buffer (void) const
{
  return ACE_reinterpret_cast (const CORBA::Short * ACE_CAST_CONST, this->buffer_);
}

ACE_INLINE
void
VjObs::_TAO_Unbounded_Sequence_VjObs_obj_p::replace (
    CORBA::ULong max,
    CORBA::ULong length,
    CORBA::Short *data,
    CORBA::Boolean release
  )
{
  this->maximum_ = max;
  this->length_ = length;
  
  if (this->buffer_ && this->release_ == 1)
    {
      CORBA::Short *tmp =
        ACE_reinterpret_cast (CORBA::Short*, this->buffer_);
      _TAO_Unbounded_Sequence_VjObs_obj_p::freebuf (tmp);
    }
  
  this->buffer_ = data;
  this->release_ = release;
}

#endif /* end #if !defined */

#endif /* !TAO_USE_SEQUENCE_TEMPLATES */ 

#if !defined (_VJOBS_OBJ_P_CI_)
#define _VJOBS_OBJ_P_CI_

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_ci.cpp:226

// *************************************************************
// Inline operations for class VjObs::obj_p_var
// *************************************************************

ACE_INLINE
VjObs::obj_p_var::obj_p_var (void)
  : ptr_ (0)
{}

ACE_INLINE
VjObs::obj_p_var::obj_p_var (obj_p *p)
  : ptr_ (p)
{}

ACE_INLINE
VjObs::obj_p_var::obj_p_var (const ::VjObs::obj_p_var &p)
{
  if (p.ptr_)
    {
      ACE_NEW (this->ptr_, ::VjObs::obj_p (*p.ptr_));
    }
  else
    {
      this->ptr_ = 0;
    }
}

// Fixed-size base types only.
ACE_INLINE
VjObs::obj_p_var::obj_p_var (const ::VjObs::obj_p &p)
{
  ACE_NEW (this->ptr_, ::VjObs::obj_p (p));
}

ACE_INLINE
VjObs::obj_p_var::~obj_p_var (void)
{
  delete this->ptr_;
}

ACE_INLINE
VjObs::obj_p_var &
VjObs::obj_p_var::operator= (obj_p *p)
{
  delete this->ptr_;
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
::VjObs::obj_p_var &
VjObs::obj_p_var::operator= (const ::VjObs::obj_p_var &p)
{
  if (this != &p)
    {
      if (p.ptr_ == 0)
        {
          delete this->ptr_;
          this->ptr_ = 0;
        }
      else
        {
          obj_p *deep_copy = 0;
          ACE_NEW_RETURN (
              deep_copy,
              obj_p (*p.ptr_),
              *this
            );
          
          if (deep_copy != 0)
            {
              obj_p *tmp = deep_copy;
              deep_copy = this->ptr_;
              this->ptr_ = tmp;
              delete deep_copy;
            }
        }
    }
  
  return *this;
}

// Fixed-size types only.
ACE_INLINE
::VjObs::obj_p_var &
VjObs::obj_p_var::operator= (const ::VjObs::obj_p &p)
{
  if (this->ptr_ != &p)
    {
      delete this->ptr_;
      ACE_NEW_RETURN (this->ptr_, ::VjObs::obj_p (p), *this);
    }
  
  return *this;
}

ACE_INLINE
const ::VjObs::obj_p *
VjObs::obj_p_var::operator-> (void) const
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::obj_p *
VjObs::obj_p_var::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
VjObs::obj_p_var::operator const ::VjObs::obj_p &() const // cast
{
  return *this->ptr_;
}

ACE_INLINE
VjObs::obj_p_var::operator ::VjObs::obj_p &() // cast 
{
  return *this->ptr_;
}

ACE_INLINE
VjObs::obj_p_var::operator ::VjObs::obj_p &() const // cast 
{
  return *this->ptr_;
}

ACE_INLINE
CORBA::Short &
VjObs::obj_p_var::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

ACE_INLINE
const CORBA::Short &
VjObs::obj_p_var::operator[] (CORBA::ULong index) const
{
  return ACE_const_cast (const CORBA::Short &, this->ptr_->operator[] (index));
}

ACE_INLINE
const ::VjObs::obj_p &
VjObs::obj_p_var::in (void) const
{
  return *this->ptr_;
}

ACE_INLINE
::VjObs::obj_p &
VjObs::obj_p_var::inout (void)
{
  return *this->ptr_;
}

ACE_INLINE
::VjObs::obj_p *&
VjObs::obj_p_var::out (void)
{
  delete this->ptr_;
  this->ptr_ = 0;
  return this->ptr_;
}

ACE_INLINE
::VjObs::obj_p *
VjObs::obj_p_var::_retn (void)
{
  ::VjObs::obj_p *tmp = this->ptr_;
  this->ptr_ = 0;
  return tmp;
}

ACE_INLINE
::VjObs::obj_p *
VjObs::obj_p_var::ptr (void) const
{
  return this->ptr_;
}

// TAO_IDL - Generated from 
// be/be_visitor_sequence/sequence_ci.cpp:567

// *************************************************************
// Inline operations for class VjObs::obj_p_out
// *************************************************************

ACE_INLINE
VjObs::obj_p_out::obj_p_out (obj_p *&p)
  : ptr_ (p)
{
  this->ptr_ = 0;
}

ACE_INLINE
VjObs::obj_p_out::obj_p_out (obj_p_var &p)
  : ptr_ (p.out ())
{
  delete this->ptr_;
  this->ptr_ = 0;
}

ACE_INLINE
VjObs::obj_p_out::obj_p_out (const ::VjObs::obj_p_out &p)
  : ptr_ (ACE_const_cast (obj_p_out&, p).ptr_)
{}

ACE_INLINE
::VjObs::obj_p_out &
VjObs::obj_p_out::operator= (const ::VjObs::obj_p_out &p)
{
  this->ptr_ = ACE_const_cast (obj_p_out&, p).ptr_;
  return *this;
}

ACE_INLINE
::VjObs::obj_p_out &
VjObs::obj_p_out::operator= (obj_p *p)
{
  this->ptr_ = p;
  return *this;
}

ACE_INLINE
VjObs::obj_p_out::operator ::VjObs::obj_p *&() // cast
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::obj_p *&
VjObs::obj_p_out::ptr (void) // ptr
{
  return this->ptr_;
}

ACE_INLINE
::VjObs::obj_p *
VjObs::obj_p_out::operator-> (void)
{
  return this->ptr_;
}

ACE_INLINE
CORBA::Short &
VjObs::obj_p_out::operator[] (CORBA::ULong index)
{
  return this->ptr_->operator[] (index);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ci.cpp:68

#if !defined (_VJOBS___CI_)
#define _VJOBS___CI_

ACE_INLINE
VjObs::VjObs (
    TAO_Stub *objref,
    CORBA::Boolean _tao_collocated,
    TAO_Abstract_ServantBase *servant
  )
  : CORBA_Object (objref, _tao_collocated, servant)
{
  this->VjObs_setup_collocation (_tao_collocated);
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ci.cpp:72

 CORBA::Boolean operator<< (
    TAO_OutputCDR &,
    const VjObs_ptr
  );

 CORBA::Boolean operator>> (
    TAO_InputCDR &,
    VjObs_ptr &
  );

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_VjObs_scalar_p_I_
#define _TAO_CDR_OP_VjObs_scalar_p_I_

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const VjObs::scalar_p &
  );

CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    VjObs::scalar_p &
  );

#endif /* _TAO_CDR_OP_VjObs_scalar_p_I_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ci.cpp:84

#if !defined _TAO_CDR_OP_VjObs_obj_p_I_
#define _TAO_CDR_OP_VjObs_obj_p_I_

CORBA::Boolean  operator<< (
    TAO_OutputCDR &,
    const VjObs::obj_p &
  );

CORBA::Boolean  operator>> (
    TAO_InputCDR &,
    VjObs::obj_p &
  );

#endif /* _TAO_CDR_OP_VjObs_obj_p_I_ */

