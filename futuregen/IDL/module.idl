/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VE-Suite is (C) Copyright 1998-2004 by Iowa State University
 *
 * Original Development Team:
 *   - ISU's Thermal Systems Virtual Engineering Group,
 *     Headed by Kenneth Mark Bryden, Ph.D., www.vrac.iastate.edu/~kmbryden
 *   - Reaction Engineering International, www.reaction-eng.com
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile: module.idl,v $
 * Date modified: $Date: date $
 * Version:       $Rev: 999999 $
 * -----------------------------------------------------------------
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/


module Types{
  // Array type def
  
  typedef sequence<long>      ArrayLong;
  typedef sequence<double>    ArrayDouble;
  typedef sequence<string>    ArrayString;
  typedef sequence<boolean>   ArrayBoolean;
  typedef sequence<any>       ArrayAny;
  
  typedef sequence<ArrayLong>      ArrayLong2D;
  typedef sequence<ArrayDouble>    ArrayDouble2D;
  typedef sequence<ArrayString>    ArrayString2D;
  typedef sequence<ArrayBoolean>   ArrayBoolean2D;
  typedef sequence<ArrayAny>       ArrayAny2D;

  typedef sequence<ArrayLong2D>      ArrayLong3D;
  typedef sequence<ArrayDouble2D>    ArrayDouble3D;
  typedef sequence<ArrayString2D>    ArrayString3D;
  typedef sequence<ArrayBoolean2D>   ArrayBoolean3D;
  typedef sequence<ArrayAny2D>       ArrayAny3D;

  typedef sequence<ArrayDouble3D>    ArrayDouble4D;
  
  struct Profile {
      ArrayDouble4D	RealData3Ds;
      ArrayDouble3D	RealData2Ds;
      ArrayDouble2D     RealData1Ds;
    };
};



module Error{
  exception EUnknown{
    long code;
    string description;
    string interfacename;
    string operatio;
  };
};

module Body{
  interface Unit{	// this is the calculation module
    
    //This start the calculation
    void StartCalc() raises(Error::EUnknown);
    
    //This stop the calculation
    void StopCalc() raises(Error::EUnknown);
    
    //This is to pause the calculation
    void PauseCalc() raises(Error::EUnknown);
    
    //This is to Resume the calculation
    void Resume() raises(Error::EUnknown);
    
    //This is for querying the status of the module
    string GetStatusMessage() raises(Error::EUnknown);
    
    //This is to get the 3D data
    string GetUserData() raises(Error::EUnknown);
    
    //This is to Set the Module up
    void SetParams(in string param) raises(Error::EUnknown);
    
    //This is to Set the ID
    void SetID(in long id) raises(Error::EUnknown);
    
    //This is to Get the ID
    long GetID() raises(Error::EUnknown);
    
    //This is to Set the name
    void SetName(in string name) raises(Error::EUnknown);
    
    //This is to Get the name
    string GetName() raises(Error::EUnknown);
    
  };
  
  interface Executive { // This is the Excutive Engine;
    
    //This is to Get the Flow in Data for Module module_id, port port_id, Called by the Unit and/or UI to display the port data
    string GetImportData(in long module_id, in long port_id) raises(Error::EUnknown);
    
    //This is to Set the Flow out Data for Modle moduel_id, port port_i, Called by the Unit
    void SetExportData(in long module_id, in long port_id, in string data) raises(Error::EUnknown);
    
    //This is to Get the Flow out Data for Modle moduel_id, port port_i, Called by the UI to display the port data
    string GetExportData(in long module_id, in long port_id) raises(Error::EUnknown);

    //This is to set the Multi Dimention Profile Data, call by the upstream Unit Module
    void SetProfileData(in long module_id, in long port_id, in Types::Profile data) raises(Error::EUnknown);

    //This is to get the Multi Dimention Profile Data, call by the upstream Unit Module, put the result in the out parameter to save data copying
    void GetProfileData(in long module_id, in long port_id, out Types::Profile data) raises(Error::EUnknown);

    //This is the Set the Module Message, called by Unit
    void SetModuleMessage(in long module_id, in string msg) raises(Error::EUnknown);
    
    //This is the Set the Module Result, called by Unit
    void SetModuleResult(in long module_id, in string result) raises(Error::EUnknown);

    //This is the Get the Module Result, called by UI
    string GetModuleResult(in long module_id) raises(Error::EUnknown);
    
    //This is the set the network, called by the UI
    void SetNetwork(in string network) raises(Error::EUnknown);
    
    //This is the set the network, called by the current Editing UI
    void SetModuleUI(in long module_id, in string ui) raises(Error::EUnknown);

    //This is to get the network, called by the UI
    string GetNetwork() raises(Error::EUnknown);
    
    //This is to set up the executive watch list, Called by the UI (the editable one)
    void SetWatchList(in Types::ArrayLong id) raises(Error::EUnknown);
    
    //This is to get the watch list, Called by the UI
    Types::ArrayLong GetWatchList() raises(Error::EUnknown);
    
    //This is to get the status message of Executive, called by the UI
    string GetStatus() raises(Error::EUnknown);
    
    //This start the network calculation, Called by the UI
    void StartCalc() raises(Error::EUnknown);
    
    //This stop the network calculation, Called by the UI
    void StopCalc() raises(Error::EUnknown);
    
    //This is to pause the calculation, Called by the UI
    void PauseCalc() raises(Error::EUnknown);
    
    //This is to Resume the calculation, Called by the UI
    void Resume() raises(Error::EUnknown);
    
    //This is to Register a UI to the Executive, make it aware that this UI is connected in
    void RegisterUI(in string UIName) raises(Error::EUnknown);

    //This is to disconnect the UI to the Executive,
    void UnRegisterUI(in string UIName) raises(Error::EUnknown);

    //This is to disconnect the Unit to the Executive
    void UnRegisterUnit(in string UnitName) raises(Error::EUnknown);

    //This is to Register a Unit to the Executive, flag=0 is normal module, flag=1 will be the global module
    void RegisterUnit(in string UnitName, in long flag) raises(Error::EUnknown);

    //This is to Get the global modules's ID, so the output of the global module can be used by all modules (for example, coal module), return value is the number of the global modules, the output parameter is the ids fo the global modules. So the Unit can call the  GetExportData(id) to the get the global data
    long GetGlobalMod(out Types::ArrayLong ids) raises(Error::EUnknown);

  };
		
  interface UI { //This is the UI;
    
    //This is to update the network, called by the Executive
    void UpdateNetwork(in string network) raises(Error::EUnknown);

    //This is to update the module UI, called by the Executive
    void UpdateModuleUI(in long module_id, in string msg) raises(Error::EUnknown);
    
    //This is to update the Result UI, called by the Executive
    void UpdateModuleResult(in long module_id, in string msg) raises(Error::EUnknown);

    //This is to update the Link content UI, called by the Executive
    void UpdateLinkContent(in long id, in string msg) raises(Error::EUnknown);
    //This is to Raise the Notification or waring or error message
    void Raise(in string notification) raises(Error::EUnknown);
  };
};
