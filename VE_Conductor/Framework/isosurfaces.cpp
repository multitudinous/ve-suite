/////////////////////////////////////////////////////////////////////////////
// Name:        isosurfaces.cpp
// Purpose:     
// Author:      Jared Abodeely
// Modified by: 
// Created:     Fri 21 Apr 2006 10:14:42 CDT
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////


////@begin includes
////@end includes

#include "VE_Conductor/Framework/isosurfaces.h"
#include <wx/sizer.h>
#include <wx/checkbox.h>
#include <wx/radiobox.h>
#include <wx/radiobut.h>
#include <wx/slider.h>
#include <wx/icon.h>
#include <iostream>
////@begin XPM images
////@end XPM images

/*!
 * Application instance implementation
 */

////@begin implement app
//IMPLEMENT_APP( IsosurfacesApp )
////@end implement app

/*!
 * IsosurfacesApp type definition
 */

//IMPLEMENT_CLASS( IsosurfacesApp, wxApp )

/*!
 * IsosurfacesApp event table definition
 */
/*
BEGIN_EVENT_TABLE( IsosurfacesApp, wxApp )

////@begin IsosurfacesApp event table entries
////@end IsosurfacesApp event table entries

END_EVENT_TABLE()
*/
/*!
 * Constructor for IsosurfacesApp
 */
/*
IsosurfacesApp::IsosurfacesApp()
{
////@begin IsosurfacesApp member initialisation
////@end IsosurfacesApp member initialisation
}
*/
/*!
 * Initialisation for IsosurfacesApp
 */
/*
bool IsosurfacesApp::OnInit()
{    
////@begin IsosurfacesApp initialisation
    // Remove the comment markers above and below this block
    // to make permanent changes to the code.

#if wxUSE_XPM
    wxImage::AddHandler(new wxXPMHandler);
#endif
#if wxUSE_LIBPNG
    wxImage::AddHandler(new wxPNGHandler);
#endif
#if wxUSE_LIBJPEG
    wxImage::AddHandler(new wxJPEGHandler);
#endif
#if wxUSE_GIF
    wxImage::AddHandler(new wxGIFHandler);
#endif
////@end IsosurfacesApp initialisation

    return true;
}
*/
/*!
 * Cleanup for IsosurfacesApp
 */
/*
int IsosurfacesApp::OnExit()
{    
////@begin IsosurfacesApp cleanup
    return wxApp::OnExit();
////@end IsosurfacesApp cleanup
}
*/

/*!
 * Isosurfaces type definition
 */

//IMPLEMENT_DYNAMIC_CLASS( Isosurfaces, wxDialog )

/*!
 * Isosurfaces event table definition
 */

BEGIN_EVENT_TABLE( Isosurfaces, wxDialog )
////@begin Isosurfaces event table entries

////@end Isosurfaces event table entries
END_EVENT_TABLE()

/*!
 * Isosurfaces constructors
 */

Isosurfaces::Isosurfaces(VjObs_ptr veEngine, VE_XML::DOMDocumentManager* domManagerIn)
:wxDialog(NULL,-1, wxString("Isosurfaces"), 
		wxDefaultPosition, wxDefaultSize, 
      (wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxMAXIMIZE_BOX|wxMINIMIZE_BOX) & ~ wxSTAY_ON_TOP)
{
   wxSize displaySize = ::wxGetDisplaySize();
   wxRect dialogPosition( displaySize.GetWidth()-427, 440, 427, displaySize.GetHeight()-480 );
   this->SetSize( dialogPosition );

   xplorerPtr = VjObs::_duplicate( veEngine );
   domManager = domManagerIn;

   CreateControls();
}

/*
Isosurfaces::Isosurfaces( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}
*/
/*!
 * Isosurfaces creator
 */

bool Isosurfaces::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin Isosurfaces member initialisation
////@end Isosurfaces member initialisation

////@begin Isosurfaces creation
    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end Isosurfaces creation
    return true;
}

/*!
 * Control creation for Isosurfaces
 */

void Isosurfaces::CreateControls()
{    
////@begin Isosurfaces content construction
    // Generated by DialogBlocks, Fri 28 Apr 2006 09:32:26 CDT 

    Isosurfaces* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _T("Isosurface Controls"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxGROW|wxALL, 5);

    wxRadioButton* itemRadioButton4 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON, _T("Specify an Isosurface"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton4->SetValue(false);
    itemStaticBoxSizer3->Add(itemRadioButton4, 0, wxALIGN_LEFT|wxALL, 5);

    wxCheckBox* itemCheckBox5 = new wxCheckBox( itemDialog1, ID_CHECKBOX, _T("Use Nearest Precomputed Isosurface"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox5->SetValue(false);
    itemStaticBoxSizer3->Add(itemCheckBox5, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText6 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Isosurface"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText6, 0, wxALIGN_LEFT|wxALL|wxADJUST_MINSIZE, 5);

    wxSlider* itemSlider7 = new wxSlider( itemDialog1, ID_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemBoxSizer2->Add(itemSlider7, 0, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

    wxButton* itemButton9 = new wxButton( itemDialog1, wxID_OK, _T("Compute Isosurface"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, ID_BUTTON, _T("Advanced..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end Isosurfaces content construction
}

/*!
 * Should we show tooltips?
 */

bool Isosurfaces::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap Isosurfaces::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin Isosurfaces bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end Isosurfaces bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon Isosurfaces::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin Isosurfaces icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end Isosurfaces icon retrieval
}
