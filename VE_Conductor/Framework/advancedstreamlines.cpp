/*************** <auto-copyright.pl BEGIN do not edit this line> **************
 *
 * VE-Suite is (C) Copyright 1998-2006 by Iowa State University
 *
 * Original Development Team:
 *   - ISU's Thermal Systems Virtual Engineering Group,
 *     Headed by Kenneth Mark Bryden, Ph.D., www.vrac.iastate.edu/~kmbryden
 *   - Reaction Engineering International, www.reaction-eng.com
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 *
 * -----------------------------------------------------------------
 * File:          $RCSfile: GlobalParamDialog.h,v $
 * Date modified: $Date: 2006-03-23 17:47:31 -0600 (Thu, 23 Mar 2006) $
 * Version:       $Rev: 3957 $
 * -----------------------------------------------------------------
 *
 *************** <auto-copyright.pl END do not edit this line> ***************/

#include "VE_Conductor/Framework/advancedstreamlines.h"
#include <wx/sizer.h>
#include <wx/slider.h>
#include <wx/checkbox.h>
#include <wx/icon.h>


BEGIN_EVENT_TABLE( AdvancedStreamlines, wxDialog )
////@begin AdvancedStreamlines event table entries
   //EVT_BUTTON        ( PARTICLE_TRACKING_BUTTON, AdvancedStreamlines::_onParticleTrack)
   EVT_CHECKBOX      ( USE_SEED_POINT_CHK,       AdvancedStreamlines::_onLastSeedPtCheck)
   EVT_CHECKBOX      ( ARROWS_CHK,               AdvancedStreamlines::_onArrowCheck )
   EVT_COMMAND_SCROLL( SPHERE_SIZE_SLIDER,       AdvancedStreamlines::_onScaleSlider)
#ifdef WIN32
   EVT_COMMAND_SCROLL_ENDSCROLL(PROPOGATION_SLIDER,         AdvancedStreamlines::_onPropSlider)
   EVT_COMMAND_SCROLL_ENDSCROLL(INTEGRATION_STEP_SLIDER,    AdvancedStreamlines::_oniStepSlider)
   EVT_COMMAND_SCROLL_ENDSCROLL(STEP_SIZE_SLIDER,           AdvancedStreamlines::_onStepSlider)
   EVT_COMMAND_SCROLL_ENDSCROLL(LINE_DIAMETER_SLIDER,       AdvancedStreamlines::_onDiameterSlider)
#else
   EVT_COMMAND_SCROLL(PROPOGATION_SLIDER,         AdvancedStreamlines::_onPropSlider)
   EVT_COMMAND_SCROLL(INTEGRATION_STEP_SLIDER,    AdvancedStreamlines::_oniStepSlider)
   EVT_COMMAND_SCROLL(STEP_SIZE_SLIDER,           AdvancedStreamlines::_onStepSlider)
   EVT_COMMAND_SCROLL(LINE_DIAMETER_SLIDER,       AdvancedStreamlines::_onDiameterSlider)
#endif
////@end AdvancedStreamlines event table entries
END_EVENT_TABLE()

//////////////////////////////////////////////////////////////////////////
AdvancedStreamlines::AdvancedStreamlines(wxWindow* parent, wxWindowID id,
                                     const wxString& caption, 
                                     const wxPoint& pos, 
                                     const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
    wxSize displaySize = ::wxGetDisplaySize();
    wxRect dialogPosition( displaySize.GetWidth()-427, 440, 427, displaySize.GetHeight()-480 );
    this->SetSize( dialogPosition );
}
////////////////////////////////////////////////////////////////////////////////////////////
bool AdvancedStreamlines::Create( wxWindow* parent, wxWindowID id, const wxString& caption,
                              const wxPoint& pos, const wxSize& size, long style )
{
   _propagationSlider = 0;  
   _integrationSlider = 0; 
   _stepSlider = 0; 
   _sphereArrowParticleSlider = 0; 
   _diameterSlider = 0; 
   _lastSeedPtCheck = 0;
   _streamArrowCheck = 0;

   //itemButton29 = 0;

   _propagationTime = 1.0;
   _integrationStepSize = 1000.0;
   _stepSize = 1.0;
   _sphereArrowParticleSize = .5;
   _lineDiameter = 0.0;

   _useLastSeedPoint = false;
   _useStreamArrows = false;

   SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
   wxDialog::Create( parent, id, caption, pos, size, style );

   CreateControls();
   GetSizer()->Fit(this);
   GetSizer()->SetSizeHints(this);
   Centre();
   return true;
}

/*!
 * Control creation for AdvancedStreamlines
 */

void AdvancedStreamlines::CreateControls()
{    
////@begin AdvancedStreamlines content construction
    // Generated by DialogBlocks, Fri 21 Apr 2006 11:44:01 CDT 

    AdvancedStreamlines* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, _T("Advanced Streamline Controls"));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Propagation (Total) Time"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText4, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    _propagationSlider = new wxSlider( itemDialog1, PROPOGATION_SLIDER, 100, 1, 100, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemStaticBoxSizer3->Add(_propagationSlider, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer6 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer6, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText7 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Shorter"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer6->Add(itemStaticText7, 0, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Longer"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    itemBoxSizer6->Add(itemStaticText8, 1, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText9 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Integration Step"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText9, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    _integrationSlider = new wxSlider( itemDialog1, INTEGRATION_STEP_SLIDER, 1000, 1, 5000, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemStaticBoxSizer3->Add(_integrationSlider, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer11, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Smaller"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT|wxSTATIC_BORDER );
    itemBoxSizer11->Add(itemStaticText12, 0, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText13 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Larger"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    itemBoxSizer11->Add(itemStaticText13, 1, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText14 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Step"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText14, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    _stepSlider = new wxSlider( itemDialog1, STEP_SIZE_SLIDER, 1, 1, 5000, wxDefaultPosition, wxDefaultSize, wxSL_HORIZONTAL|wxSL_LABELS );
    itemStaticBoxSizer3->Add(_stepSlider, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer16 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer16, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText17 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Finer"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer16->Add(itemStaticText17, 0, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText18 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Coarser"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    itemBoxSizer16->Add(itemStaticText18, 1, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText19 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Sphere/Arrow/Particle Size(%)"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemStaticBoxSizer3->Add(itemStaticText19, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    _sphereArrowParticleSlider = new wxSlider( itemDialog1, SPHERE_SIZE_SLIDER, 50, 1, 100, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemStaticBoxSizer3->Add(_sphereArrowParticleSlider, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText21 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Line Diameter"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemStaticText21, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    _diameterSlider = new wxSlider( itemDialog1, LINE_DIAMETER_SLIDER, 0, -100, 100, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemStaticBoxSizer3->Add(_diameterSlider, 0, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer23 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer23, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText24 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Decrease Size"), wxDefaultPosition, wxDefaultSize, wxALIGN_LEFT );
    itemBoxSizer23->Add(itemStaticText24, 0, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxStaticText* itemStaticText25 = new wxStaticText( itemDialog1, wxID_STATIC, _T("Increase Size"), wxDefaultPosition, wxDefaultSize, wxALIGN_RIGHT );
    itemBoxSizer23->Add(itemStaticText25, 1, wxALIGN_TOP|wxLEFT|wxRIGHT|wxBOTTOM|wxADJUST_MINSIZE, 5);

    wxBoxSizer* itemBoxSizer26 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer3->Add(itemBoxSizer26, 0, wxGROW|wxALL, 5);

    _lastSeedPtCheck = new wxCheckBox( itemDialog1, USE_SEED_POINT_CHK, _T("Use Last Seed Point"), wxDefaultPosition, wxDefaultSize, 0 );
    _lastSeedPtCheck->SetValue(false);
    itemBoxSizer26->Add(_lastSeedPtCheck, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    _streamArrowCheck = new wxCheckBox( itemDialog1, ARROWS_CHK, _T("Stream Arrows"), wxDefaultPosition, wxDefaultSize, 0 );
    _streamArrowCheck->SetValue(false);
    itemBoxSizer26->Add(_streamArrowCheck, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton29 = new wxButton( itemDialog1, wxID_OK, _T("Close"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer3->Add(itemButton29, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end AdvancedStreamlines content construction
}

/*!
 * Should we show tooltips?
 */

bool AdvancedStreamlines::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap AdvancedStreamlines::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin AdvancedStreamlines bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end AdvancedStreamlines bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon AdvancedStreamlines::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin AdvancedStreamlines icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end AdvancedStreamlines icon retrieval
}
///////////////////////////////////////////////////////////
void AdvancedStreamlines::SetPropagationSize(double value)
{ 
   if(_propagationSlider)
   {
      _propagationSlider->SetValue(static_cast<int>(value*100));
   }
}
//////////////////////////////////////////////////////////////
void AdvancedStreamlines::SetIntegrationStepSize(double value)
{
   if(_integrationSlider)
   {
      _integrationSlider->SetValue(static_cast<int>(value*100));
   }
}
///////////////////////////////////////////////
void AdvancedStreamlines::SetStep(double value)
{
   if(_stepSlider)
   {
      _stepSlider->SetValue(static_cast<int>(value*100));
   }
}
//////////////////////////////////////////////////////////////////
void AdvancedStreamlines::SetSphereArrowParticleSize(double value)
{
   if(_sphereArrowParticleSlider)
   {
      _sphereArrowParticleSlider->SetValue(static_cast<int>(value*100));
   }
}
////////////////////////////////////////////////////////
void AdvancedStreamlines::SetLineDiameter(double value)
{
   if(_diameterSlider)
   {
      _diameterSlider->SetValue(static_cast<int>(value*100));
   }
}
////////////////////////////////////////////////////
void AdvancedStreamlines::SetStreamArrow(bool value)
{
   if(_streamArrowCheck)
   {
      _streamArrowCheck->SetValue(value);
   }
}
//////////////////////////////////////////////////////
void AdvancedStreamlines::SetUseLastSeedPt(bool value)
{
   if(_lastSeedPtCheck)
   {
      _lastSeedPtCheck->SetValue(value);
   }
}
////////////////////////////////////////////////
double AdvancedStreamlines::GetPropagationSize()
{
   return  _propagationTime;
}
/////////////////////////////////////////////////////
double AdvancedStreamlines::GetIntegrationStepSize()
{
   return _integrationStepSize;
}
/////////////////////////////////////
double AdvancedStreamlines::GetStep()
{
   return _stepSize;
}
////////////////////////////////////////////////////////
double AdvancedStreamlines::GetSphereArrowParticleSize()
{
   return _sphereArrowParticleSize;
}
/////////////////////////////////////////////
double AdvancedStreamlines::GetLineDiameter()
{
   return _lineDiameter;
}
///////////////////////////////////////////////
bool AdvancedStreamlines::GetUseLastSeedPoint()
{
   return _useLastSeedPoint;
}
//////////////////////////////////////////
bool AdvancedStreamlines::GetStreamArrow()
{
   return _useStreamArrows;
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onLastSeedPtCheck( wxCommandEvent& WXUNUSED(event) )
{
   this->_useLastSeedPoint = _lastSeedPtCheck->GetValue();
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onArrowCheck( wxCommandEvent& WXUNUSED(event) )
{
   this->_useStreamArrows = _streamArrowCheck->GetValue();
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_oniStepSlider( wxScrollEvent& WXUNUSED(event) )
{
   _integrationStepSize = static_cast<double>(_integrationSlider->GetValue()/100.0);
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onPropSlider( wxScrollEvent& WXUNUSED(event) )
{
   _propagationTime = static_cast<double>(_propagationSlider->GetValue()/100.0);
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onStepSlider( wxScrollEvent& WXUNUSED(event) )
{
   _stepSize = static_cast<double>(_stepSlider->GetValue()/100.0);
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onDiameterSlider( wxScrollEvent& WXUNUSED(event) )
{
   _lineDiameter = static_cast<double>(this->_diameterSlider->GetValue()/100.0);
}
///////////////////////////////////////////////////////
void AdvancedStreamlines::_onScaleSlider( wxScrollEvent& WXUNUSED(event) )
{
   _sphereArrowParticleSize = static_cast<double>(_sphereArrowParticleSlider->GetValue()/100.0);
}
///////////////////////////////////////////////////////
/*void AdvancedStreamlines::_onParticleTrack( wxCommandEvent& WXUNUSED(event) )
{
   
}*/
