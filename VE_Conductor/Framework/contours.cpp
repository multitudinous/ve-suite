/////////////////////////////////////////////////////////////////////////////
// Name:        contours.cpp
// Purpose:     
// Author:      Jared Abodeely
// Modified by: 
// Created:     Thu 20 Apr 2006 19:49:24 CDT
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), Thu 20 Apr 2006 19:49:24 CDT

#if defined(__GNUG__) && !defined(NO_GCC_PRAGMA)
#pragma implementation "contours.h"
#endif

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "contours.h"

////@begin XPM images
////@end XPM images

/*!
 * Contours type definition
 */

//IMPLEMENT_DYNAMIC_CLASS( Contours, wxDialog )

/*!
 * Contours event table definition
 */

BEGIN_EVENT_TABLE( Contours, wxDialog )
////@begin Contours event table entries
   EVT_BUTTON     (ADVANCED_CONTOUR_BUTTON,     Contours::_onAdvanced)
////@end Contours event table entries
END_EVENT_TABLE()

/*!
 * Contours constructors
 */

Contours::Contours(VjObs_ptr veEngine, VE_XML::DOMDocumentManager* domManagerIn)
:wxDialog(NULL,-1, wxString("Contours"), 
      wxPoint(850,450), wxSize(400,450), 
      (wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER|wxMAXIMIZE_BOX|wxMINIMIZE_BOX) & ~ wxSTAY_ON_TOP)
{
   xplorerPtr = VjObs::_duplicate( veEngine );
   domManager = domManagerIn;

   CreateControls();
}
/*
Contours::Contours( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Create(parent, id, caption, pos, size, style);
}
*/
/*!
 * Contours creator
 */

bool Contours::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin Contours member initialisation
////@end Contours member initialisation

////@begin Contours creation
    SetExtraStyle(GetExtraStyle()|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    GetSizer()->Fit(this);
    GetSizer()->SetSizeHints(this);
    Centre();
////@end Contours creation
    return true;
}

/*!
 * Control creation for Contours
 */

void Contours::CreateControls()
{    
////@begin Contours content construction
    // Generated by DialogBlocks, Fri 21 Apr 2006 10:33:32 CDT (unregistered)

    Contours* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxALL, 5);

    wxString itemRadioBox4Strings[] = {
        _("x"),
        _("y"),
        _("z"),
        _("By Wand")
    };
    wxRadioBox* itemRadioBox4 = new wxRadioBox( itemDialog1, ID_RADIOBOX, _("Direction"), wxDefaultPosition, wxDefaultSize, 4, itemRadioBox4Strings, 1, wxRA_SPECIFY_COLS );
    itemBoxSizer3->Add(itemRadioBox4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxString itemRadioBox5Strings[] = {
        _("Graduated"),
        _("Banded"),
        _("Lined")
    };
    wxRadioBox* itemRadioBox5 = new wxRadioBox( itemDialog1, ID_RADIOBOX1, _("Contour Type"), wxDefaultPosition, wxDefaultSize, 3, itemRadioBox5Strings, 1, wxRA_SPECIFY_COLS );
    itemBoxSizer3->Add(itemRadioBox5, 0, wxALIGN_TOP|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Multiple Planes"));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer6, 0, wxGROW|wxALL, 5);

    wxRadioButton* itemRadioButton7 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON, _("All Precomputed Surfaces"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton7->SetValue(false);
    itemStaticBoxSizer6->Add(itemRadioButton7, 0, wxALIGN_LEFT|wxALL, 5);

    wxCheckBox* itemCheckBox8 = new wxCheckBox( itemDialog1, ID_CHECKBOX, _("Cycle Precomputed Surfaces"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox8->SetValue(false);
    itemStaticBoxSizer6->Add(itemCheckBox8, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer9Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Single Plane"));
    wxStaticBoxSizer* itemStaticBoxSizer9 = new wxStaticBoxSizer(itemStaticBoxSizer9Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer9, 0, wxGROW|wxALL, 5);

    wxRadioButton* itemRadioButton10 = new wxRadioButton( itemDialog1, ID_RADIOBUTTON1, _("Specify a Single Plane"), wxDefaultPosition, wxDefaultSize, 0 );
    itemRadioButton10->SetValue(false);
    itemStaticBoxSizer9->Add(itemRadioButton10, 0, wxALIGN_LEFT|wxALL, 5);

    wxCheckBox* itemCheckBox11 = new wxCheckBox( itemDialog1, ID_CHECKBOX1, _("Use Nearest Precomputed Plane"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox11->SetValue(false);
    itemStaticBoxSizer9->Add(itemCheckBox11, 0, wxALIGN_LEFT|wxALL, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, _("Plane"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemStaticText12, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);

    wxSlider* itemSlider13 = new wxSlider( itemDialog1, ID_SLIDER, 0, 0, 100, wxDefaultPosition, wxSize(300, -1), wxSL_HORIZONTAL|wxSL_LABELS );
    itemBoxSizer2->Add(itemSlider13, 0, wxGROW|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxButton* itemButton14 = new wxButton( itemDialog1, ADVANCED_CONTOUR_BUTTON, _("Advanced..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer2->Add(itemButton14, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end Contours content construction
}

/*!
 * Should we show tooltips?
 */

bool Contours::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap Contours::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin Contours bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end Contours bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon Contours::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin Contours icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end Contours icon retrieval
}
/////////////////////////////////////////////////////////////////
void Contours::_onAdvanced( wxCommandEvent& WXUNUSED(event) )
{
   adContour = new AdvancedContours(xplorerPtr, domManager);
   adContour->ShowModal();
std::cout<<"ADVANCEDCONTOURS WORKING"<<std::endl;
}
