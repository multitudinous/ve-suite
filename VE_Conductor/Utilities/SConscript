##Builds VE_Conductor_UtilitiesLib
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR buildDir xerces_options wxwidgets_options')

utils_srcs = Split("""
   Link.cxx
   Module.cxx
   Polygon.cxx
   Tag.cxx
   CADTreeBuilder.cxx
   CADMaterialEditMenu.cxx
   CADNodeMenu.cxx 
   CADNodePropsDlg.cxx
   CADOpacitySliderDlg.cxx
   ROIDialog.cxx
   NetworkDataBuffer.cxx
   ../DefaultPlugin/DefaultPlugin.cxx
""")

gui_srcs = Split("""
    spinctld.cxx
""")

utils_h = Split("""
   Link.h
   Module.h
   Polygon.h
   Tag.h
   CADTreeBuilder.h
   CADMaterialEditMenu.h
   CADNodeMenu.h 
   CADNodePropsDlg.h
   CADOpacitySliderDlg.h
   ROIDialog.h
   NetworkDataBuffer.h
""")

gui_h = Split("""
    spinctld.h
""")
##frameworkutil_srcs = map(lambda s: pj('#', 'VE_Conductor', 'Utilities', s), frameworkutil_srcs)
gui_srcs = map(lambda s: pj('..','..','VE_Builder', 'Utilities', 'gui', s), gui_srcs)
sources = list()
sources.extend(utils_srcs)
sources.extend(gui_srcs)

##gui_h = map(lambda s: pj('..','..','VE_Builder', 'Utilities', 'gui', s), gui_h)
headers = list()
headers.extend(utils_h)
##headers.extend(gui_h)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(CPPPATH = pj('#', 'VE_Builder', 'Utilities', 'gui'))
lib_env.Append(LIBS = ['VE_ConductorLib', 'VE_XML','VE_OpenModuleLib','GUIPluginLib'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Conductor','GUIPlugin'),
                        pj('#', buildDir, 'VE_Conductor','Network'),
                        pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML')])
lib_env.ParseConfig('flagpoll TAO TAO_Messaging TAO_Valuetype  --cflags --libs')
lib_env.ParseConfig('flagpoll vpr --cflags --libs')
lib_env.Append(CPPPATH = [pj('#', 'external', 'loki-0.1.6', 'include')] )

xerces_options.apply( lib_env )
wxwidgets_options.apply( lib_env )
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_Conductor_UtilitiesLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_Conductor_UtilitiesLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Conductor', 'Utilities'))
lib.build()
