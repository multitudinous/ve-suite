// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __VjObs_hh__
#define __VjObs_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VjObs
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjObs
#endif





#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __VjObs__
#define __VjObs__

class VjObs;
class _objref_VjObs;
class _impl_VjObs;

typedef _objref_VjObs* VjObs_ptr;
typedef VjObs_ptr VjObsRef;

class VjObs_Helper {
public:
  typedef VjObs_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_VjObs, VjObs_Helper> VjObs_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_VjObs,VjObs_Helper > VjObs_out;

#endif

class VjObs {
public:
  // Declarations for this interface type.
  typedef VjObs_ptr _ptr_type;
  typedef VjObs_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  class scalar_p_var;

  class scalar_p : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef scalar_p_var _var_type;
    inline scalar_p() {}
    inline scalar_p(const scalar_p& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline scalar_p(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline scalar_p(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline scalar_p& operator = (const scalar_p& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class scalar_p_out;

  class scalar_p_var {
  public:
    inline scalar_p_var() : _pd_seq(0) {}
    inline scalar_p_var(scalar_p* _s) : _pd_seq(_s) {}
    inline scalar_p_var(const scalar_p_var& _s) {
      if( _s._pd_seq )  _pd_seq = new scalar_p(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~scalar_p_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline scalar_p_var& operator = (scalar_p* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline scalar_p_var& operator = (const scalar_p_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new scalar_p;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline scalar_p* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator scalar_p& () const { return *_pd_seq; }
#else
    inline operator const scalar_p& () const { return *_pd_seq; }
    inline operator scalar_p& () { return *_pd_seq; }
#endif
      
    inline const scalar_p& in() const { return *_pd_seq; }
    inline scalar_p&       inout()    { return *_pd_seq; }
    inline scalar_p*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline scalar_p* _retn() { scalar_p* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class scalar_p_out;
    
  private:
    scalar_p* _pd_seq;
  };

  class scalar_p_out {
  public:
    inline scalar_p_out(scalar_p*& _s) : _data(_s) { _data = 0; }
    inline scalar_p_out(scalar_p_var& _s)
      : _data(_s._pd_seq) { _s = (scalar_p*) 0; }
    inline scalar_p_out(const scalar_p_out& _s) : _data(_s._data) {}
    inline scalar_p_out& operator = (const scalar_p_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline scalar_p_out& operator = (scalar_p* _s) {
      _data = _s;
      return *this;
    }
    inline operator scalar_p*&()  { return _data; }
    inline scalar_p*& ptr()       { return _data; }
    inline scalar_p* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    scalar_p*& _data;

  private:
    scalar_p_out();
    scalar_p_out& operator=(const scalar_p_var&);
  };

  class obj_p_var;

  class obj_p : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 >  {
  public:
    typedef obj_p_var _var_type;
    inline obj_p() {}
    inline obj_p(const obj_p& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_s) {}

    inline obj_p(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max) {}
    inline obj_p(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Short* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline obj_p& operator = (const obj_p& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class obj_p_out;

  class obj_p_var {
  public:
    inline obj_p_var() : _pd_seq(0) {}
    inline obj_p_var(obj_p* _s) : _pd_seq(_s) {}
    inline obj_p_var(const obj_p_var& _s) {
      if( _s._pd_seq )  _pd_seq = new obj_p(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~obj_p_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline obj_p_var& operator = (obj_p* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline obj_p_var& operator = (const obj_p_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new obj_p;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Short& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline obj_p* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator obj_p& () const { return *_pd_seq; }
#else
    inline operator const obj_p& () const { return *_pd_seq; }
    inline operator obj_p& () { return *_pd_seq; }
#endif
      
    inline const obj_p& in() const { return *_pd_seq; }
    inline obj_p&       inout()    { return *_pd_seq; }
    inline obj_p*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline obj_p* _retn() { obj_p* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class obj_p_out;
    
  private:
    obj_p* _pd_seq;
  };

  class obj_p_out {
  public:
    inline obj_p_out(obj_p*& _s) : _data(_s) { _data = 0; }
    inline obj_p_out(obj_p_var& _s)
      : _data(_s._pd_seq) { _s = (obj_p*) 0; }
    inline obj_p_out(const obj_p_out& _s) : _data(_s._data) {}
    inline obj_p_out& operator = (const obj_p_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline obj_p_out& operator = (obj_p* _s) {
      _data = _s;
      return *this;
    }
    inline operator obj_p*&()  { return _data; }
    inline obj_p*& ptr()       { return _data; }
    inline obj_p* operator->() { return _data; }

    inline CORBA::Short& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    obj_p*& _data;

  private:
    obj_p_out();
    obj_p_out& operator=(const obj_p_var&);
  };


};

class _objref_VjObs :
  public virtual CORBA::Object, public virtual omniObjRef
{
public:
  void update();
  VjObs::scalar_p* update_scalar();
  VjObs::scalar_p* update_vector();
  VjObs::scalar_p* get_geo_name();
  VjObs::scalar_p* get_teacher_name();
  CORBA::Short get_sc_num();
  CORBA::Short get_geo_num();
  CORBA::Short get_teacher_num();
  char* get_perf();
  void SetClientInfoFlag(CORBA::Short value);
  void SetClientInfoData(const VjObs::obj_p& o);
  VjObs::obj_p* GetClientInfoData();
  CORBA::Short GetNumberOfSounds();
  VjObs::scalar_p* GetSoundNameArray();
  VjObs::scalar_p* get_dataset_names();
  VjObs::obj_p* get_dataset_types();
  VjObs::obj_p* get_num_scalars_per_dataset();
  VjObs::obj_p* get_num_vectors_per_dataset();
  void setNumDatasets(CORBA::Short value);
  CORBA::Short getNumDatasets();
  CORBA::Short getTotalNumberOfScalars();
  void setNumVectors(CORBA::Short value);
  CORBA::Short getNumVectors();
  void setNumGeoArrays(CORBA::Short value);
  CORBA::Short getNumGeoArrays();
  void setClients(CORBA::Long value);
  CORBA::Long getClients();
  void setIsoValue(CORBA::Long value);
  CORBA::Long getIsoValue();
  void setSc(CORBA::Long value);
  CORBA::Long getSc();
  void setMin(CORBA::Long value);
  CORBA::Long getMin();
  void setMax(CORBA::Long value);
  CORBA::Long getMax();
  void setId(CORBA::Long value);
  CORBA::Long getId();
  void setGeoState(CORBA::Long value);
  CORBA::Long getGeoState();
  void setPostdataState(CORBA::Short value);
  CORBA::Short getPostdataState();
  void setPreState(CORBA::Short value);
  CORBA::Short getPreState();
  void setTimesteps(CORBA::Short value);
  CORBA::Short getTimesteps();
  void setNumTeacherArrays(CORBA::Short value);
  CORBA::Short getNumTeacherArrays();
  void setTeacherState(CORBA::Short value);
  CORBA::Short getTeacherState();

  inline _objref_VjObs()  { _PR_setobj(0); }  // nil
  _objref_VjObs(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_VjObs();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_VjObs(const _objref_VjObs&);
  _objref_VjObs& operator = (const _objref_VjObs&);
  // not implemented
};

class _pof_VjObs : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_VjObs() : _OMNI_NS(proxyObjectFactory)(VjObs::_PD_repoId) {}
  virtual ~_pof_VjObs();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_VjObs :
  public virtual omniServant
{
public:
  virtual ~_impl_VjObs();

  virtual void update() = 0;
  virtual VjObs::scalar_p* update_scalar() = 0;
  virtual VjObs::scalar_p* update_vector() = 0;
  virtual VjObs::scalar_p* get_geo_name() = 0;
  virtual VjObs::scalar_p* get_teacher_name() = 0;
  virtual CORBA::Short get_sc_num() = 0;
  virtual CORBA::Short get_geo_num() = 0;
  virtual CORBA::Short get_teacher_num() = 0;
  virtual char* get_perf() = 0;
  virtual void SetClientInfoFlag(CORBA::Short value) = 0;
  virtual void SetClientInfoData(const VjObs::obj_p& o) = 0;
  virtual VjObs::obj_p* GetClientInfoData() = 0;
  virtual CORBA::Short GetNumberOfSounds() = 0;
  virtual VjObs::scalar_p* GetSoundNameArray() = 0;
  virtual VjObs::scalar_p* get_dataset_names() = 0;
  virtual VjObs::obj_p* get_dataset_types() = 0;
  virtual VjObs::obj_p* get_num_scalars_per_dataset() = 0;
  virtual VjObs::obj_p* get_num_vectors_per_dataset() = 0;
  virtual void setNumDatasets(CORBA::Short value) = 0;
  virtual CORBA::Short getNumDatasets() = 0;
  virtual CORBA::Short getTotalNumberOfScalars() = 0;
  virtual void setNumVectors(CORBA::Short value) = 0;
  virtual CORBA::Short getNumVectors() = 0;
  virtual void setNumGeoArrays(CORBA::Short value) = 0;
  virtual CORBA::Short getNumGeoArrays() = 0;
  virtual void setClients(CORBA::Long value) = 0;
  virtual CORBA::Long getClients() = 0;
  virtual void setIsoValue(CORBA::Long value) = 0;
  virtual CORBA::Long getIsoValue() = 0;
  virtual void setSc(CORBA::Long value) = 0;
  virtual CORBA::Long getSc() = 0;
  virtual void setMin(CORBA::Long value) = 0;
  virtual CORBA::Long getMin() = 0;
  virtual void setMax(CORBA::Long value) = 0;
  virtual CORBA::Long getMax() = 0;
  virtual void setId(CORBA::Long value) = 0;
  virtual CORBA::Long getId() = 0;
  virtual void setGeoState(CORBA::Long value) = 0;
  virtual CORBA::Long getGeoState() = 0;
  virtual void setPostdataState(CORBA::Short value) = 0;
  virtual CORBA::Short getPostdataState() = 0;
  virtual void setPreState(CORBA::Short value) = 0;
  virtual CORBA::Short getPreState() = 0;
  virtual void setTimesteps(CORBA::Short value) = 0;
  virtual CORBA::Short getTimesteps() = 0;
  virtual void setNumTeacherArrays(CORBA::Short value) = 0;
  virtual CORBA::Short getNumTeacherArrays() = 0;
  virtual void setTeacherState(CORBA::Short value) = 0;
  virtual CORBA::Short getTeacherState() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
};




class POA_VjObs :
  public virtual _impl_VjObs,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_VjObs();

  inline VjObs_ptr _this() {
    return (VjObs_ptr) _do_this(VjObs::_PD_repoId);
  }
};





#undef _core_attr
#undef _dyn_attr



inline void
VjObs::_marshalObjRef(::VjObs_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VjObs
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VjObs
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjObs
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjObs
#endif

#endif  // __VjObs_hh__

