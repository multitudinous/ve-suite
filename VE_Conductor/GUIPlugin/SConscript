##Builds GUIPluginLib
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR buildDir')

sources = Split("""
   FinancialDialog.cpp 
   ListTable.cpp 
   Plugin_base.cpp 
   GlobalParamDialog.cpp 
   Geometry.cpp 
   GeometryDialog.cpp 
   GeometryDataManager.cpp 
   PortDialog.cpp 
   ResultPanel.cpp 
   StringParse.cpp 
   SummaryResultDialog.cpp 
   CORBAServiceList.cxx
   OrbThread.cxx 
   TexTable.cpp 
   TextResultDialog.cpp 
   UIDialog.cpp 
   UI_i.cxx
   ParamsDlg.cpp
   QueryInputsDlg.cpp
   FindDialog.cpp
""")

headers = Split("""
   FinancialDialog.h 
   ListTable.h 
   Plugin_base.h 
   GlobalParamDialog.h 
   Geometry.h 
   GeometryDialog.h 
   GeometryDataManager.h 
   PortDialog.h 
   ResultPanel.h 
   StringParse.h 
   SummaryResultDialog.h 
   CORBAServiceList.h
   OrbThread.h 
   TexTable.h 
   TextResultDialog.h 
   UIDialog.h 
   UI_i.h
   ParamsDlg.h
   QueryInputsDlg.h
   FindDialog.h
""")

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_ConductorLib', 'VE_XMLLib', 'VE_ModelLib',
                   'VE_CADLib', 'VE_ShaderLib', 'VE_OpenModuleLib'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Conductor','Network'),
                        pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','XML','CAD'),
                        pj('#', buildDir, 'VE_Open','XML','Shader')])
lib_env.ParseConfig('wx-config --cxxflags --libs')
lib_env.ParseConfig('flagpoll TAO xerces ACE TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype \
                              TAO_CosNaming TAO_Svc_Utils TAO_IORTable TAO_Messaging \
                              TAO_PortableServer TAO_BiDirGIOP TAO_AnyTypeCode --libs --cflags')


if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('GUIPluginLib',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('GUIPluginLib', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Conductor', 'GUIPlugin'))
lib.build()
