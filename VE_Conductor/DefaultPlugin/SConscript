##Builds DefaultPlugin_UI_Dialog
import os, sys, string, smtplib
#from subprocess import *

pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR buildDir')

sources = Split("""
    DefaultPlugin.cxx
    DefaultPlugin_UI_Dialog.cxx
""")

headers = Split("""
    DefaultPlugin.h
    DefaultPlugin_UI_Dialog.h
""")

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_ConductorLib', 'VE_XMLLib', 'VE_ModelLib',
                   'VE_CADLib', 'VE_ShaderLib', 'GUIPluginLib',
                   'VE_OpenModuleLib'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Conductor','Network'),
                        pj('#', buildDir, 'VE_Conductor','GUIPlugin'),
                        pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','XML','CAD'),
                        pj('#', buildDir, 'VE_Open','XML','Shader')])

lib_env.ParseConfig( 'wx-config --cxxflags --libs' )
lib_env.ParseConfig('flagpoll TAO xerces --cflags --libs')

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('DefaultPlugin_UI_Dialog',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('DefaultPlugin_UI_Dialog', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Conductor', 'DefaultPlugin'))
lib.build()
