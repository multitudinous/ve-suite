/*
 *
 * Copyright (c) 2008 Blue Newt Software LLC and Skew Matrix Software LLC.
 * All rights reserved.
 *
 */

#include <osgBullet/MotionState.h>
#include <osg/MatrixTransform>
#include <osg/PositionAttitudeTransform>
#include <osgSim/DOFTransform>
#include <osg/notify>
#include <osg/io_utils>

using namespace osgBullet;

MotionState::MotionState( const btTransform & startTrans, const btTransform & centerOfMassOffset )
{
    _matrixTransform = NULL;
}

void MotionState::setWorldTransform( const btTransform & centerOfMassWorldTrans )
{
    btDefaultMotionState::setWorldTransform( centerOfMassWorldTrans );

    if( _matrixTransform == NULL )
        return;

    btQuaternion const & btRot = m_graphicsWorldTrans.getRotation();
    osg::Quat osgRot( btRot.getX(), btRot.getY(), btRot.getZ(), btRot.getW() );

    btVector3 const & btTrans = m_graphicsWorldTrans.getOrigin();
    osg::Vec3f osgTrans( btTrans.getX(), btTrans.getY(), btTrans.getZ() );
    osg::notify( osg::ALWAYS ) << osgTrans << std::endl;

    osg::Matrix mat;
    mat.setTrans( osgTrans );
    mat.setRotate( osgRot );

    _matrixTransform->setMatrix( mat );
}

DOFMotionState::DOFMotionState( const btTransform & startTrans, const btTransform & centerOfMassOffset )
{
    _dofTransform = NULL;
}

void DOFMotionState::setWorldTransform( const btTransform & centerOfMassWorldTrans )
{
    btDefaultMotionState::setWorldTransform( centerOfMassWorldTrans );

    if( _dofTransform == NULL )
        return;

    btQuaternion const & btRot = m_graphicsWorldTrans.getRotation();
    osg::Quat osgRot( btRot.getX(), btRot.getY(), btRot.getZ(), btRot.getW() );

    btVector3 const & btTrans = m_graphicsWorldTrans.getOrigin();
    osg::Vec3f osgTrans( btTrans.getX(), btTrans.getY(), btTrans.getZ() );

    osg::Matrix mat;
    mat.setTrans( osgTrans );
    mat.setRotate( osgRot );

    _dofTransform->setPutMatrix( mat );
}

PATMotionState::PATMotionState( const btTransform & startTrans, const btTransform & centerOfMassOffset )
{
    _patTransform = NULL;
}

void PATMotionState::setWorldTransform( const btTransform & centerOfMassWorldTrans )
{
    btDefaultMotionState::setWorldTransform( centerOfMassWorldTrans );

    if( _patTransform == NULL )
        return;

    btQuaternion const & btRot = m_graphicsWorldTrans.getRotation();
    osg::Quat osgRot( btRot.getX(), btRot.getY(), btRot.getZ(), btRot.getW() );

    btVector3 const & btTrans = m_graphicsWorldTrans.getOrigin();
    osg::Vec3f osgTrans( btTrans.getX(), btTrans.getY(), btTrans.getZ() );

    osg::Matrix mat;
    mat.setTrans( osgTrans );
    mat.setRotate( osgRot );

    //_patTransform->setPutMatrix( mat );
}

