###############################################################
##Builds bullet
#!python
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util
Import('baseEnv ves_pkg LIBDIR RootDir buildDir osg_options GetPlatform bulletBaseVar ApplyBulletVars')

openDir = os.path.abspath( pj(RootDir, 'external', bulletBaseVar) )
sources = sca_util.getSourcesRecursive( pj( openDir, 'src' ) )
headers = sca_util.getHeadersRecursive( pj( openDir, 'src' )  )
headers = map(lambda s: pj('src', s), headers)
sources = map(lambda s: pj('src', s), sources)

lib_env = ves_pkg.getEnv().Clone()
lib_env.Append( CPPPATH = [pj(openDir, 'src' ), 
    pj(openDir, 'src','BulletMultiThreaded','vectormath','scalar','cpp')] )

if GetPlatform() == 'linux':
    lib_env.Append( CCFLAGS=['-fPIC'])

ApplyBulletVars( lib_env, True )

#if baseEnv['StaticLibs'] == "yes":
lib = ves_pkg.createStaticLibrary('bullet', lib_env,
                                               installPrefix = LIBDIR)
#else:
#   lib = ves_pkg.createSharedLibrary('bullet', lib_env,
#                                      installPrefix = LIBDIR)
   
lib.addSources(sources)
#lib.addHeaders(headers, pj('..','include') )
lib.build()
###############################################################
### Build the BulletColladaConverter
#sourcesDB = sca_util.getSourcesRecursive( pj( openDir, 'Extras','BulletColladaConverter') )
#headersDB = sca_util.getHeadersRecursive( pj( openDir, 'Extras','BulletColladaConverter') )
#sourcesDB = map(lambda s: pj('Extras','BulletColladaConverter', s), sourcesDB)
#headersDB = map(lambda s: pj('Extras','BulletColladaConverter', s), headersDB)

#libDB_env = ves_pkg.getEnv().Clone()
#libDB_env.Append( CPPPATH = [pj(openDir, 'Extras' )] )
#libDB_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include')] )
#libDB_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include','1.4')] )
#libDB_env.Append( CPPPATH = [pj(openDir, 'src' )] )
#libDB_env.Append( LIBS = ['bullet','XML','COLLADA_DOM'] )
#libDB_env.Append( LIBPATH = [pj('#', buildDir,'external', bulletBaseVar)] )
#ApplyBulletVars( libDB_env, True )

#osg_options.apply( libDB_env )
#if GetPlatform() == 'linux':
#    libDB_env.Append( CCFLAGS=['-fPIC'])

#if baseEnv['StaticLibs'] == "yes":
#libDB = ves_pkg.createStaticLibrary('BulletColladaConverter', libDB_env,
#                                               installPrefix = LIBDIR )
#else:
#   libDB = ves_pkg.createSharedLibrary('BulletColladaConverter', libDB_env,
#                                     installPrefix = LIBDIR )
   
#libDB.addSources(sourcesDB)
#libDB.addHeaders(headersDB, pj('..','include') )
#libDB.build()
###############################################################
### Build the Convex Decomposition tools
sourcesDB = sca_util.getSourcesRecursive( pj( openDir, 'Extras','ConvexDecomposition') )
headersDB = sca_util.getHeadersRecursive( pj( openDir, 'Extras','ConvexDecomposition') )
sourcesDB = map(lambda s: pj('Extras','ConvexDecomposition', s), sourcesDB)
headersDB = map(lambda s: pj('Extras','ConvexDecomposition', s), headersDB)

libDB_env = ves_pkg.getEnv().Clone()
#libDB_env.Append( LIBS = ['bullet','XML','COLLADA_DOM'] )
#libDB_env.Append( LIBPATH = [pj('#', buildDir,'external', bulletBaseVar)] )
if GetPlatform() == 'linux':
    libDB_env.Append( CCFLAGS=['-fPIC'])

ApplyBulletVars( libDB_env, True )

#if baseEnv['StaticLibs'] == "yes":
libDB = ves_pkg.createStaticLibrary('ConvexDecomposition', libDB_env,
                                               installPrefix = LIBDIR )
#else:
#   libDB = ves_pkg.createSharedLibrary('ConvexDecomposition', libDB_env,
#                                     installPrefix = LIBDIR )
   
libDB.addSources(sourcesDB)
#libDB.addHeaders(headersDB, pj('..','include') )
libDB.build()

###############################################################
##Builds libCOLLADA_DOM
#sources = sca_util.getSourcesRecursive( pj( openDir, 'Extras','COLLADA_DOM','src' ) )
#headers = sca_util.getHeadersRecursive( pj( openDir, 'Extras','COLLADA_DOM','src' )  )
#headers = map(lambda s: pj('Extras','COLLADA_DOM','include', s), headers)
#sources = map(lambda s: pj('Extras','COLLADA_DOM','src', s), sources)

#lib_env = ves_pkg.getEnv().Clone()
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include' )] )
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include','1.4' )] )
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','LibXML','include' )] )
#lib_env.Append( LIBS = ['XML'] )
#lib_env.Append( LIBPATH = [pj('#', buildDir,'external', bulletBaseVar)] )
#if GetPlatform() == 'linux':
#    lib_env.Append( CCFLAGS=['-fPIC'])

#ApplyBulletVars( lib_env, True )

#if baseEnv['StaticLibs'] == "yes":
#lib = ves_pkg.createStaticLibrary('COLLADA_DOM', lib_env,
#                                               installPrefix = LIBDIR)
#else:
#   lib = ves_pkg.createSharedLibrary('COLLADA_DOM', lib_env,
#                                      installPrefix = LIBDIR)
   
#lib.addSources(sources)
#lib.addHeaders(headers, pj('..','include') )
#lib.build()
###############################################################
##Builds libXML
#sources = sca_util.getSourcesRecursive( pj( openDir, 'Extras','LibXML' ) )
#headers = sca_util.getHeadersRecursive( pj( openDir, 'Extras','LibXML','include' )  )
#headers = map(lambda s: pj('Extras','LibXML','include', s), headers)
#sources = map(lambda s: pj('Extras','LibXML', s), sources)

#lib_env = ves_pkg.getEnv().Clone()
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include' )] )
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','COLLADA_DOM','include','1.4' )] )
#lib_env.Append( CPPPATH = [pj(openDir, 'Extras','LibXML','include' )] )
#lib_env.Append( CPPDEFINES  = ['LIBXML_MODULES_ENABLED'] )
#if GetPlatform() == 'linux':
#    lib_env.Append( CCFLAGS=['-fPIC'])

#ApplyBulletVars( lib_env, True )

#if baseEnv['StaticLibs'] == "yes":
#lib = ves_pkg.createStaticLibrary('XML', lib_env,
#                                               installPrefix = LIBDIR)
#else:
#   lib = ves_pkg.createSharedLibrary('XML', lib_env,
#                                      installPrefix = LIBDIR)
   
#lib.addSources(sources)
#lib.addHeaders(headers, pj('..','include') )
#lib.build()
