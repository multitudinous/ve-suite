/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2003 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/
#ifndef OSG_FADE
#define OSG_FADE   1

#include <vector>
#include <map>
#include <osg/Group>
#include <osg/Material>

namespace osg {

class Fade: public Group
{
    public:
        Fade(); 

        Fade(const Fade &, const CopyOp & copyop=CopyOp::SHALLOW_COPY);

        META_Node(osg,Fade);

        typedef std::map<double, float> FadePointMap;

        void addFadePoint( double distance, float fadeValue );

        const FadePointMap &getFadePointMap() const { return _fadePoints; }

        virtual bool addChild( Node *child );

        virtual void traverse(NodeVisitor& nv);


    protected:
        virtual void _computeFade( float distanceFromEye );

    private:
        ref_ptr<StateSet> _stateSet;
        std::map<double, float> _fadePoints;


        struct MaterialPair {

            MaterialPair( Material *mat);
            void setTransparency( float scale );

            ref_ptr<Material> material;
            ref_ptr<Material> omaterial;
        };

        std::vector<MaterialPair> _materials;

        class FindMaterials : public NodeVisitor
        {
            public:
                FindMaterials(std::vector<MaterialPair> &materials);
                virtual void apply(Group& node);
                virtual void apply(Geode& geode);

            private:
                std::vector<MaterialPair> &_materials;
                void processStateSet( StateSet *sset );
        };
};

}
        

#endif
