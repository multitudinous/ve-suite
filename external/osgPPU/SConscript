##Builds osgPPU
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('baseEnv ves_pkg LIBDIR RootDir buildDir osg_options GetPlatform')
openDir = os.path.abspath( pj(RootDir, 'external', 'osgPPU') )
sources = sca_util.getSourcesRecursive( pj( openDir, 'src', 'osgPPU' ) )
headers = sca_util.getHeadersRecursive( pj( openDir, 'include','osgPPU')  )
headers = map(lambda s: pj('include','osgPPU', s), 
                headers)
sources = map(lambda s: pj('src', 'osgPPU', s), 
                sources)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append( CPPPATH = [pj(openDir, 'include' )] )
lib_env.Append( CPPDEFINES  = ['OSGPPU_LIBRARY','osgPPU_EXPORTS'] )

osg_options.apply( lib_env )

if GetPlatform() == 'darwin':
    lib_env.Append( LINKFLAGS  = ['-framework','OpenGL'] )

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('osgPPU', lib_env,
                                               installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('osgPPU', lib_env,
                                      installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers, '..')
lib.build()

### Build the osgdb plugin
sourcesDB = sca_util.getSourcesRecursive( pj( openDir, 'src','osgPlugins','osgPPU') )
sourcesDB = map(lambda s: pj('src','osgPlugins','osgPPU', s), sourcesDB)

libDB_env = ves_pkg.getEnv().Copy()
libDB_env.Append( CPPPATH = [pj(openDir, 'include' )] )
libDB_env.Append( CPPDEFINES  = ['osgdb_ppu_EXPORTS'] )
libDB_env.Append( LIBS = ['osgPPU'] )
libDB_env.Append( LIBPATH = [pj('#', buildDir,'external', 'osgPPU')] )
osg_options.apply( libDB_env )
if baseEnv['StaticLibs'] == "yes":
   libDB = ves_pkg.createStaticAndSharedLibrary('osgdb_osgPPU', libDB_env,
                                               installPrefix = pj(LIBDIR,'osgPlugins') )
else:
   libDB = ves_pkg.createSharedLibrary('osgdb_osgPPU', libDB_env,
                                      installPrefix = pj(LIBDIR,'osgPlugins') )
   
libDB.addSources(sourcesDB)
libDB.build()
