osgPPU::Processor {
  osgPPU::UnitBypass {
    UniqueID UnitBypass_0
    name "ColorBypass"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInResampleOut_1
      PPU UnitInResampleOut_2
      PPU UnitInOut_3
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_4
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
  }
  osgPPU::UnitInResampleOut {
    UniqueID UnitInResampleOut_1
    name "ResampleLight"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_5
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_6
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
    factorX 0.5
    factorY 0.5
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_5
    name "BlurHorizontalLight"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_7
    }

    osgPPU::ShaderAttribute {
      UniqueID ShaderAttribute_8
      name "BlurHorizontalShader"
      num_shaders 2
      Shader {
        UniqueID Shader_9
        type VERTEX
        code {
          ""
          "/*"
          " * Reimplement fixed function pipeline of OpenGL"
          " * So bypass all the data."
          " * Precompute some constants which are needed for the convolution computation"
          " */"
          ""
          "//! Sigma value for the gaussian kernel"
          "uniform float sigma;"
          ""
          "const float PI = 3.1415926535897;"
          ""
          "// Varyings"
          "varying float sigma2;"
          "varying float c;"
          ""
          "/**"
          " * Reimplement fixed pipeline"
          " **/"
          "void main(void)"
          "{"
          "	// bypass the texture coordinate data"
          "	gl_TexCoord[0] = gl_MultiTexCoord0;"
          "	"
          "	// compute position of the pixel "
          "	gl_Position = ftransform();"
          "	"
          "	// bypass color data"
          "	gl_FrontColor = gl_Color;"
          "	"
          "	// precompute constants"
          "	sigma2 = 2.0 * sigma * sigma;"
          "	c = sqrt((1.0 / (sigma2 * PI)));"
          "}"
          ""
        }
      }
      Shader {
        type FRAGMENT
        code {
          "/*"
          " * Apply convolution of variable size onto the pixels."
          " * The convolution is done in 1D"
          " */"
          ""
          "// -------------------------------------------------------"
          "// Texture units used for texturing"
          "// -------------------------------------------------------"
          "uniform sampler2D texUnit0;"
          ""
          "//! Size of the gaussian kernel (size = radius * 2)"
          "uniform float radius;"
          ""
          "//! Sigam value for the gaussian kernel"
          "uniform float sigma;"
          ""
          "// Varyings"
          "varying float sigma2;"
          "varying float c;"
          ""
          "// width of the input texture "
          "uniform float osgppu_ViewportWidth;"
          ""
          "// height of the input texture "
          "uniform float osgppu_ViewportHeight;"
          ""
          "/**"
          " **/"
          "void main(void)"
          "{"
          "	// store here resulting color"
          "	vec4 color;"
          "	float totalWeigth = 0.0;"
          "	float inputTexTexelWidth = 1.0 / osgppu_ViewportWidth;"
          "	"
          "	// convolve by applying nsamples-time the texture lookup"
          "	for (float i=-radius; i < radius; i += 1.0) "
          "	{"
          "		// compute weight for the pixel "
          "		float weight = c * exp((i*i) / (-sigma2));"
          "		totalWeigth += weight;"
          "		"
          "		// combine now the sum as all values multiplied by the weight"
          "		color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(i * inputTexTexelWidth, 0) ) * weight;"
          "	}"
          "	color /= totalWeigth;"
          "	"
          "	gl_FragColor = color;"
          "}"
        }
      }
      maximalSupportedTextureUnits 8
      RefUniformPair {
        Uniform {
          name "radius"
          type float 1 FloatArray 1
          {
            5 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "sigma"
          type float 1 FloatArray 1
          {
            1.5 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "texUnit0"
          type sampler2D 1 IntArray 1
          {
            0 
          }
        }
        StateAttribute ON
      }
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_10
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_7
    name "BlurVerticalLight"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_3
    }

    osgPPU::ShaderAttribute {
      UniqueID ShaderAttribute_11
      name "BlurVerticalShader"
      num_shaders 2
      Use Shader_9
      Shader {
        type FRAGMENT
        code {
          "/*"
          " * Apply convolution of variable size onto the pixels."
          " * The convolution is done in 1D"
          " */"
          ""
          "// -------------------------------------------------------"
          "// Texture units used for texturing"
          "// -------------------------------------------------------"
          "uniform sampler2D texUnit0;"
          ""
          "//! Size of the gaussian kernel (size = radius * 2)"
          "uniform float radius;"
          ""
          "//! Sigam value for the gaussian kernel"
          "uniform float sigma;"
          ""
          "// Varyings"
          "varying float sigma2;"
          "varying float c;"
          ""
          "// width of the input texture "
          "uniform float osgppu_ViewportWidth;"
          ""
          "// height of the input texture "
          "uniform float osgppu_ViewportHeight;"
          ""
          "/**"
          " **/"
          "void main(void)"
          "{"
          ""
          "	// store here resulting color"
          "	vec4 color;"
          "	float totalWeigth = 0.0;"
          "	float inputTexTexelWidth = 1.0 / osgppu_ViewportHeight;"
          ""
          "	// convolve by applying nsamples-time the texture lookup"
          "	for (float i=-radius; i < radius; i += 1.0) "
          "	{"
          "		// compute weight for the pixel "
          "		float weight = c * exp((i*i) / (-sigma2));"
          "		totalWeigth += weight;"
          "		"
          "		// combine now the sum as all values multiplied by the weight"
          "		color += texture2D(texUnit0, gl_TexCoord[0].xy +  vec2(0, i * inputTexTexelWidth) ) * weight;"
          "	}"
          "	color /= totalWeigth;"
          "	"
          "	gl_FragColor = color;"
          "}"
        }
      }
      maximalSupportedTextureUnits 8
      RefUniformPair {
        Uniform {
          name "radius"
          type float 1 FloatArray 1
          {
            5 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "sigma"
          type float 1 FloatArray 1
          {
            1.5 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "texUnit0"
          type sampler2D 1 IntArray 1
          {
            0 
          }
        }
        StateAttribute ON
      }
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_12
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_3
    name "DoF-Result"
    isActive 1
    inputTextureIndexForViewportReference 0

    InputToUniformMap {
      UnitBypass_0 texColorMap
      UnitDepthbufferBypass_13 texDepthMap
      UnitInOut_7 texBlurredColorMap
      UnitInOut_14 texStrongBlurredColorMap
    }

    PPUOutput {
      PPU UnitText_15
      PPU UnitOut_16
    }

    osgPPU::ShaderAttribute {
      name "DoFResultShader"
      num_shaders 1
      Shader {
        type FRAGMENT
        code {
          "/*"
          " * Create Depth-Of-Filed effect by combining the depth map within the image map."
          " */"
          ""
          "// -------------------------------------------------------"
          "// Texture units used for texturing"
          "// -------------------------------------------------------"
          "// Texture containing the scene (color map)"
          "uniform sampler2D texColorMap;"
          ""
          "// Colormap of the scene blurred"
          "uniform sampler2D texBlurredColorMap;"
          ""
          "// Colormap of the scene blurred"
          "uniform sampler2D texStrongBlurredColorMap;"
          ""
          "// Depth map containing depth values of the image map"
          "uniform sampler2D texDepthMap;"
          ""
          "// Focal length of the camear"
          "uniform float focalLength;"
          ""
          "// Focal range of the camera "
          "uniform float focalRange;"
          ""
          "// zNear and zFar values "
          "uniform float zNear;"
          "uniform float zFar;"
          ""
          "float convertZ( in float near, in float far, in float depthBufferValue )"
          "{"
          "        float clipZ = ( depthBufferValue - 0.5 ) * 2.0;"
          "        return -(2.0 * far * near) / ( clipZ * ( far - near ) - ( far + near ));"
          "}"
          ""
          "/**"
          " **/"
          "void main(void)"
          "{"
          "    vec2 inTex = gl_TexCoord[0];"
          "    "
          "    // compute distance to the viewer"
          "    float a = zFar / ( zFar - zNear );"
          "    float b = zFar * zNear / ( zNear - zFar );"
          "    "
          "    float depth = texture2D( texDepthMap, inTex );"
          "    float dist = b / ( depth - a );"
          "    "
          "    // get color map and blurred color map values "
          "    vec4 colorValue = texture2D (texColorMap, inTex).rgba;"
          "    vec4 blurredValue1 = texture2D ( texBlurredColorMap, inTex).rgba;"
          "    vec4 blurredValue2 = texture2D ( texStrongBlurredColorMap, inTex).rgba;"
          "    "
          "    // now compute the bluriness value "
          "    float blur = saturate(abs(dist - focalLength) / focalRange);"
          "    float factor1 = 1.0;"
          "    float factor2 = 0.0;"
          "    "
          "    // compute blend factors "
          "    if (blur > 0.5)"
          "        factor2 = (blur - 0.5) * 2.0;"
          "    else"
          "        factor1 = blur * 2.0;"
          "        "
          "    "
          "    // the resulting color value is the combination of blurred and non-blurred map "
          "    vec4 result = mix(colorValue, blurredValue1, factor1);"
          "    gl_FragColor = mix(result, blurredValue2, factor2);"
          "    "
          "}"
        }
      }
      maximalSupportedTextureUnits 8
      RefUniformPair {
        Uniform {
          name "focalLength"
          type float 1 FloatArray 1
          {
            15 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "focalRange"
          type float 1 FloatArray 1
          {
            13 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "zFar"
          type float 1 FloatArray 1
          {
            100 
          }
        }
        StateAttribute ON
      }
      RefUniformPair {
        Uniform {
          name "zNear"
          type float 1 FloatArray 1
          {
            0.1 
          }
        }
        StateAttribute ON
      }
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_17
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
  }
  osgPPU::UnitText {
    UniqueID UnitText_15
    name "FPSTextPPU"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_18
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
    size 44
    osgText::Text {
      StateSet {
        UniqueID StateSet_19
        rendering_hint TRANSPARENT_BIN
        renderBinMode INHERIT
      }
      supportsDisplayList FALSE
      useDisplayList FALSE
      useVertexBufferObjects FALSE
      fontResolution 32 32
      characterSize 32 1
      characterSizeMode SCREEN_COORDS
      alignment LEFT_BASE_LINE
      autoRotateToScreen TRUE
      layout LEFT_TO_RIGHT
      position 0.01 0.95 0
      drawMode 1
      text "Example DoF-pipeline from a .ppu file"
      color 1 1 1 1
      backdropType NONE
      backdropHorizontalOffset 0.07
      backdropVerticalOffset 0.07
      backdropColor 0 0 0 1
      backdropImplementation DEPTH_RANGE
      colorGradientMode SOLID
      colorGradientTopLeft 1 0 0 1
      colorGradientBottomLeft 0 1 0 1
      colorGradientBottomRight 0 0 1 1
      colorGradientTopRight 1 1 1 1
    }
  }
  osgPPU::UnitOut {
    UniqueID UnitOut_16
    name "PipelineResult"
    isActive 1
    inputTextureIndexForViewportReference -1

    PPUOutput {
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_20
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
  }
  osgPPU::UnitInResampleOut {
    UniqueID UnitInResampleOut_2
    name "ResampleStrong"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_21
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_22
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
    factorX 0.25
    factorY 0.25
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_21
    name "BlurHorizontalStrong"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_14
    }

    Use ShaderAttribute_8

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_23
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
  }
  osgPPU::UnitInOut {
    UniqueID UnitInOut_14
    name "BlurVerticalStrong"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_3
    }

    Use ShaderAttribute_11

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_24
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
    inputBypass -1
    outputInternalFormat 34842
    outputTextureType TEXTURE_2D
    outputFace 0
    outputDepth 1
  }
  osgPPU::UnitDepthbufferBypass {
    UniqueID UnitDepthbufferBypass_13
    name "DepthBypass"
    isActive 1
    inputTextureIndexForViewportReference 0

    PPUOutput {
      PPU UnitInOut_3
    }

    osgPPU::ColorAttribute {
      UniqueID ColorAttribute_25
      startTime 0
      endTime 0
      startColor 1 1 1 1
      endColor 1 1 1 1
    }
  }
  name Processor
  PPUOutput {
    PPU UnitBypass_0
    PPU UnitDepthbufferBypass_13
  }
}
