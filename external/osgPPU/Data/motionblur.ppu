osgPPU::Processor {
  osgPPU::UnitBypass {
    UniqueID UnitBypass_0
    name "CameraBypass"
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference -1
    outputInternalFormat GL_RGBA16F_ARB

    PPUOutput {
      PPU UnitInOut_2
    }
  }
  
  osgPPU::UnitInOut {
    UniqueID UnitInOut_2
    name "MotionBlur"
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    outputInternalFormat GL_RGBA16F_ARB

    InputToUniformMap {
      UnitBypass_0 Next
      UnitInOut_4 Prev
    }

    PPUOutput {
      PPU UnitInOut_4
    }

    Shader {
      RefUniformPair {
        Uniform {
          name "fMotionBlurFactor"
          type float 1 FloatArray 1
          {
            0.93548
          }
        }
        StateAttribute PROTECTED|OVERRIDE|ON
      }
      Program {
        num_shaders 1
        Shader {
          type FRAGMENT
          code {
            "// Texture containing the scene (color map)"
            "uniform sampler2D Next;"
            ""
            "// Colormap of the view before"
            "uniform sampler2D Prev;"
            ""
            "// Motion blur factor"
            "uniform float fMotionBlurFactor;"
            ""
            "void main(void)"
            "{"
            "	vec2 texCoords = gl_TexCoord[0].st;"
            ""
            "	// get color values"
            "	vec4 currentValue = texture2D (Next, texCoords).rgba;"
            "	vec4 lastValue = texture2D (Prev, texCoords).rgba;"
            "	"
            "	// the resulting color value is the combination of blurred and non-blurred map "
            "	gl_FragColor = mix(currentValue, lastValue, fMotionBlurFactor);"
            ""
            "}"
          }
        }
      }
    }
    inputBypass -1
  }
  
  osgPPU::UnitInOut {
    UniqueID UnitInOut_4
    name "ShowBypass"
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference 0
    outputInternalFormat GL_RGBA16F_ARB

    PPUOutput {
      PPU UnitInOut_2
      PPU UnitOut_1
    }
    InputToUniformMap {
      UnitInOut_2 tex
    }

    Shader {
      Program {
        num_shaders 1
        Shader {
          type FRAGMENT
          code {
            "// Simple bypass shader which do nothing then bypass data"
            "uniform sampler2D tex;"
            "void main(void)"
            "{"
            "   gl_FragColor = texture2D (tex, gl_TexCoord[0].st).rgba;"
            ""
            "}"
          }
        }
      }
    }

    inputBypass -1
  }


  osgPPU::UnitOut {
    UniqueID UnitOut_1
    name "PipelineResult"
    isActive 1
    isOffline 0
    inputTextureIndexForViewportReference -1
    outputInternalFormat GL_RGBA16F_ARB

    PPUOutput {
    }
  }

  name Processor
  PPUOutput {
    PPU UnitBypass_0
  }
}
