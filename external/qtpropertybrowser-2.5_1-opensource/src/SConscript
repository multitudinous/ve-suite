###############################################################
##Builds qtpropertybrowser
#!python
import os, sys, string, glob
pj = os.path.join
import SConsAddons.Util as sca_util
Import('baseEnv ves_pkg LIBDIR RootDir buildDir GetPlatform')

openDir = os.path.abspath( pj(RootDir, 'external', 'qtpropertybrowser-2.5_1-opensource','src') )
buildSrcDir = pj('#',buildDir,'external','qtpropertybrowser-2.5_1-opensource','src')

lib_env = ves_pkg.getEnv().Clone()

#moc files -- this project #includeS moc'ed files rather than compiling them into
#individual object files. Except for qtpropertybrowserutils_p.h which is an exception
#we deal with later
mocced = []
mocsources = [pj(buildSrcDir,'qtbuttonpropertybrowser.h'),
              pj(buildSrcDir,'qteditorfactory.h'),
              pj(buildSrcDir,'qtgroupboxpropertybrowser.h'),
              pj(buildSrcDir,'qtpropertybrowser.h'),
              pj(buildSrcDir,'qtpropertymanager.h'),
              pj(buildSrcDir,'qttreepropertybrowser.h'),
              pj(buildSrcDir,'qtvariantproperty.h')]

for x in mocsources:
    mocced += lib_env.qt_moc(x)


#cxx->moc files
mocsources = [pj(buildSrcDir,'qteditorfactory.cpp'),
              pj(buildSrcDir,'qtpropertymanager.cpp'),
              pj(buildSrcDir,'qttreepropertybrowser.cpp')]

for x in mocsources:
    mocced += lib_env.qt_cxxmoc(x)

rccsource = [pj(buildSrcDir,'qtpropertybrowser.qrc')]
cppSources = lib_env.qt_rcc(rccsource)

smocsource = [pj(buildSrcDir,'qtpropertybrowserutils_p.h')]
cppSources += lib_env.qt_moc(smocsource)

openDir2 = os.path.abspath( pj(RootDir,buildDir,'external','qtpropertybrowser-2.5_1-opensource','src') )
cppSources1 = map(lambda s: pj(openDir2, '%s' ) %(s), cppSources)
cppMocced = map(lambda s: pj(openDir2, '%s' ) %(s), mocced )

lib_env.Append( CPPPATH = [pj(openDir2)] )

#headers = cppMocced
#headers += sca_util.getHeadersRecursive( pj( openDir )  )
#sources = cppSources1
#sources += sca_util.getSourcesRecursive( pj( openDir ) )

headers_list = glob.glob(pj(RootDir, 'external', 'qtpropertybrowser-2.5_1-opensource','src','*.h'))
headers = map(lambda s: os.path.basename(s), headers_list)
#headers = map(lambda s: pj('src', s), headers)

sources_list = glob.glob(pj(RootDir, 'external', 'qtpropertybrowser-2.5_1-opensource','src','*.cpp'))
sources = map(lambda s: os.path.basename(s), sources_list)
#sources = map(lambda s: pj('src', s), sources)
sources += cppSources1

#headers = map(lambda s: pj('src', s), headers)
#sources = map(lambda s: pj('src', s), sources)

if GetPlatform() == 'linux':
    lib_env.Append( CCFLAGS=['-fPIC'])

if GetPlatform() != 'darwin':
    Import('qt_options')
    qt_options.apply(lib_env)
    lib_env.AppendUnique( CPPDEFINES = ['QT_ON'] )
    if GetPlatform() == 'win32':
        lib_env.AppendUnique( CPPDEFINES = [ 'QT_QTPROPERTYBROWSER_EXPORT' ] )
else:
    import qt46
    qt46.applyQtBuildFlags(lib_env)

#if baseEnv['StaticLibs'] == "yes":
#lib = ves_pkg.createStaticLibrary('QtSolutions_PropertyBrowser-2.5', lib_env,
#                                               installPrefix = LIBDIR)
#else:
lib = ves_pkg.createSharedLibrary('QtSolutions_PropertyBrowser-2.5', lib_env,
                                      installPrefix = LIBDIR)

lib.addHeaders(headers, pj('..','include','qtpropertybrowser-2.5_1-opensource') )   
lib.addSources(sources)

lib.build()
