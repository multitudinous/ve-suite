##Builds osgOQ
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('baseEnv ves_pkg LIBDIR RootDir buildDir osg_options GetPlatform')
openDir = os.path.abspath( pj(RootDir, 'external', 'osgOQ') )
sources = sca_util.getSourcesRecursive( pj( openDir, 'src', 'osgOQ' ) )
headers = sca_util.getHeadersRecursive( pj( openDir, 'include','osgOQ')  )
headers = map(lambda s: pj('include','osgOQ', s), 
                headers)
sources = map(lambda s: pj('src', 'osgOQ', s), 
                sources)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append( CPPPATH = [pj(openDir, 'include' )] )
lib_env.Append( CPPDEFINES  = ['OSGOQ_EXPORTS'] )

osg_options.apply( lib_env )

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('osgOQ', lib_env,
                                               installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('osgOQ', lib_env,
                                      installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers, '..')
lib.build()

### Build the osgdb plugin
sourcesDB = sca_util.getSourcesRecursive( pj( openDir, 'src','osgdb_osgOQ') )
sourcesDB = map(lambda s: pj('src', 'osgdb_osgOQ', s), sourcesDB)

libDB_env = ves_pkg.getEnv().Copy()
libDB_env.Append( CPPPATH = [pj(openDir, 'include' )] )
libDB_env.Append( CPPDEFINES  = ['OSGOQ_EXPORTS'] )
libDB_env.Append( LIBS = ['osgOQ'] )
libDB_env.Append( LIBPATH = [pj('#', buildDir,'external', 'osgOQ')] )
osg_options.apply( libDB_env )
if baseEnv['StaticLibs'] == "yes":
   libDB = ves_pkg.createStaticAndSharedLibrary('osgdb_osgOQ', libDB_env,
                                               installPrefix = pj(LIBDIR,'osgPlugins'))
else:
   libDB = ves_pkg.createSharedLibrary('osgdb_osgOQ', libDB_env,
                                      installPrefix = pj(LIBDIR,'osgPlugins'))
   
libDB.addSources(sourcesDB)
libDB.build()
