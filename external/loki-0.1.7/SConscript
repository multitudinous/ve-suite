##Builds loki
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util
GetPlatform = sca_util.GetPlatform

Import('baseEnv ves_pkg LIBDIR RootDir buildDir lokiBaseVar')
openDir = os.path.abspath( pj(RootDir, 'external', lokiBaseVar) )
sources = sca_util.getSourcesRecursive( pj( openDir, 'src') )
headers = sca_util.getHeadersRecursive( pj( openDir, 'include')  )
headers = map(lambda s: pj('include', s), 
                headers)
sources = map(lambda s: pj('src', s), 
                sources)

lib_env = ves_pkg.getEnv().Clone()

lib_env.Append( CPPDEFINES = ['LOKI_OBJECT_LEVEL_THREADING','LOKI_ENABLE_FUNCTION'] )
if GetPlatform() == "win32":
   lib_env.Append( CPPDEFINES = ['LOKI_MAKE_DLL'] )
   lib_env.Append( CPPDEFINES = ['_WINDLL'] )
   ##lib_env.Append( CPPDEFINES = ['_DEBUG'] )
   lib_env.Append( CPPDEFINES = ['UNICODE'] )
   lib_env.Append( CPPDEFINES = ['LOKI_FUNCTOR_IS_NOT_A_SMALLOBJECT'] )

lib_env.Append( CPPPATH = [pj(openDir, 'include' )] )

lib_env[ 'LIBS' ] = ['']

if baseEnv['StaticLibs'] == "yes":
   lib = ves_pkg.createStaticAndSharedLibrary('loki.0.1.7',
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createSharedLibrary('loki.0.1.7', lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers, '..')
lib.build()
