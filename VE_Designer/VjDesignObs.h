// This file is generated by omniidl (C++ backend)- omniORB_4_0. Do not edit.
#ifndef __VjDesignObs_hh__
#define __VjDesignObs_hh__

#ifndef USE_omniORB_logStream
#define USE_omniORB_logStream
#endif

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
#endif





#ifdef USE_stub_in_nt_dll
#ifndef USE_core_stub_in_nt_dll
#define USE_core_stub_in_nt_dll
#endif
#ifndef USE_dyn_stub_in_nt_dll
#define USE_dyn_stub_in_nt_dll
#endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





#ifndef __VjDesignObs__
#define __VjDesignObs__

class VjDesignObs;
class _objref_VjDesignObs;
class _impl_VjDesignObs;

typedef _objref_VjDesignObs* VjDesignObs_ptr;
typedef VjDesignObs_ptr VjDesignObsRef;

class VjDesignObs_Helper {
public:
  typedef VjDesignObs_ptr _ptr_type;

  static _ptr_type _nil();
  static _CORBA_Boolean is_nil(_ptr_type);
  static void release(_ptr_type);
  static void duplicate(_ptr_type);
  static void marshalObjRef(_ptr_type, cdrStream&);
  static _ptr_type unmarshalObjRef(cdrStream&);
};

typedef _CORBA_ObjRef_Var<_objref_VjDesignObs, VjDesignObs_Helper> VjDesignObs_var;
typedef _CORBA_ObjRef_OUT_arg<_objref_VjDesignObs,VjDesignObs_Helper > VjDesignObs_out;

#endif

class VjDesignObs {
public:
  // Declarations for this interface type.
  typedef VjDesignObs_ptr _ptr_type;
  typedef VjDesignObs_var _var_type;

  static _ptr_type _duplicate(_ptr_type);
  static _ptr_type _narrow(CORBA::Object_ptr);
  static _ptr_type _unchecked_narrow(CORBA::Object_ptr);
  static _ptr_type _nil();

  static inline void _marshalObjRef(_ptr_type, cdrStream&);

  static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
    omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
    if (o)
      return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
    else
      return _nil();
  }

  static _core_attr const char* _PD_repoId;

  // Other IDL defined within this scope.
  class design_params_var;

  class design_params : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 >  {
  public:
    typedef design_params_var _var_type;
    inline design_params() {}
    inline design_params(const design_params& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_s) {}

    inline design_params(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_max) {}
    inline design_params(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Double* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > (_max, _len, _val, _rel) {}

  

    inline design_params& operator = (const design_params& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Double, 8, 8 > ::operator=(_s);
      return *this;
    }
  };

  class design_params_out;

  class design_params_var {
  public:
    inline design_params_var() : _pd_seq(0) {}
    inline design_params_var(design_params* _s) : _pd_seq(_s) {}
    inline design_params_var(const design_params_var& _s) {
      if( _s._pd_seq )  _pd_seq = new design_params(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~design_params_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline design_params_var& operator = (design_params* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline design_params_var& operator = (const design_params_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new design_params;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Double& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline design_params* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator design_params& () const { return *_pd_seq; }
#else
    inline operator const design_params& () const { return *_pd_seq; }
    inline operator design_params& () { return *_pd_seq; }
#endif
      
    inline const design_params& in() const { return *_pd_seq; }
    inline design_params&       inout()    { return *_pd_seq; }
    inline design_params*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline design_params* _retn() { design_params* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class design_params_out;
    
  private:
    design_params* _pd_seq;
  };

  class design_params_out {
  public:
    inline design_params_out(design_params*& _s) : _data(_s) { _data = 0; }
    inline design_params_out(design_params_var& _s)
      : _data(_s._pd_seq) { _s = (design_params*) 0; }
    inline design_params_out(const design_params_out& _s) : _data(_s._data) {}
    inline design_params_out& operator = (const design_params_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline design_params_out& operator = (design_params* _s) {
      _data = _s;
      return *this;
    }
    inline operator design_params*&()  { return _data; }
    inline design_params*& ptr()       { return _data; }
    inline design_params* operator->() { return _data; }

    inline CORBA::Double& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    design_params*& _data;

  private:
    design_params_out();
    design_params_out& operator=(const design_params_var&);
  };

  class active_flag_var;

  class active_flag : public _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 >  {
  public:
    typedef active_flag_var _var_type;
    inline active_flag() {}
    inline active_flag(const active_flag& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_s) {}

    inline active_flag(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max) {}
    inline active_flag(_CORBA_ULong _max, _CORBA_ULong _len, CORBA::Short* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline active_flag& operator = (const active_flag& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< CORBA::Short, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class active_flag_out;

  class active_flag_var {
  public:
    inline active_flag_var() : _pd_seq(0) {}
    inline active_flag_var(active_flag* _s) : _pd_seq(_s) {}
    inline active_flag_var(const active_flag_var& _s) {
      if( _s._pd_seq )  _pd_seq = new active_flag(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~active_flag_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline active_flag_var& operator = (active_flag* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline active_flag_var& operator = (const active_flag_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new active_flag;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline CORBA::Short& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline active_flag* operator -> () { return _pd_seq; }
#if defined(__GNUG__)
    inline operator active_flag& () const { return *_pd_seq; }
#else
    inline operator const active_flag& () const { return *_pd_seq; }
    inline operator active_flag& () { return *_pd_seq; }
#endif
      
    inline const active_flag& in() const { return *_pd_seq; }
    inline active_flag&       inout()    { return *_pd_seq; }
    inline active_flag*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline active_flag* _retn() { active_flag* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class active_flag_out;
    
  private:
    active_flag* _pd_seq;
  };

  class active_flag_out {
  public:
    inline active_flag_out(active_flag*& _s) : _data(_s) { _data = 0; }
    inline active_flag_out(active_flag_var& _s)
      : _data(_s._pd_seq) { _s = (active_flag*) 0; }
    inline active_flag_out(const active_flag_out& _s) : _data(_s._data) {}
    inline active_flag_out& operator = (const active_flag_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline active_flag_out& operator = (active_flag* _s) {
      _data = _s;
      return *this;
    }
    inline operator active_flag*&()  { return _data; }
    inline active_flag*& ptr()       { return _data; }
    inline active_flag* operator->() { return _data; }

    inline CORBA::Short& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    active_flag*& _data;

  private:
    active_flag_out();
    active_flag_out& operator=(const active_flag_var&);
  };


};

class _objref_VjDesignObs :
  public virtual CORBA::Object, public virtual omniObjRef
{
public:
  void update();
  void setClientInfoFlag(CORBA::Short value);
  CORBA::Short getClientInfoFlag();
  void setInteractiveState_UI(CORBA::Short value);
  CORBA::Short getInteractiveState_UI();
  void setInteractiveState_cfd(CORBA::Short value);
  CORBA::Short getInteractiveState_cfd();
  void setInteractiveGA(CORBA::Short value);
  CORBA::Short getInteractiveGA();
  void setDesignParams(const VjDesignObs::design_params& value);
  void setActiveDesignParams(const VjDesignObs::active_flag& value);
  void setVRserver_name(const char* value);
  char* getVRserver_name();
  void setMode_oldModel(CORBA::Short value);
  CORBA::Short getMode_oldModel();
  void setTrans_oldModel(const VjDesignObs::design_params& value);
  void setRot_oldModel(const VjDesignObs::design_params& value);
  void setNewVtkFileName(const char* value);
  char* getNewVtkFileName();
  void setCheckedGene(CORBA::Short value);
  CORBA::Short getCheckedGene();
  void setCrossoverRate(CORBA::Double value);
  CORBA::Double getCrossoverRate();
  void setMutationRate(CORBA::Double value);
  CORBA::Double getMutationRate();

  inline _objref_VjDesignObs()  { _PR_setobj(0); }  // nil
  _objref_VjDesignObs(omniIOR*, omniIdentity*);

protected:
  virtual ~_objref_VjDesignObs();

  
private:
  virtual void* _ptrToObjRef(const char*);

  _objref_VjDesignObs(const _objref_VjDesignObs&);
  _objref_VjDesignObs& operator = (const _objref_VjDesignObs&);
  // not implemented
};

class _pof_VjDesignObs : public _OMNI_NS(proxyObjectFactory) {
public:
  inline _pof_VjDesignObs() : _OMNI_NS(proxyObjectFactory)(VjDesignObs::_PD_repoId) {}
  virtual ~_pof_VjDesignObs();

  virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
  virtual _CORBA_Boolean is_a(const char*) const;
};

class _impl_VjDesignObs :
  public virtual omniServant
{
public:
  virtual ~_impl_VjDesignObs();

  virtual void update() = 0;
  virtual void setClientInfoFlag(CORBA::Short value) = 0;
  virtual CORBA::Short getClientInfoFlag() = 0;
  virtual void setInteractiveState_UI(CORBA::Short value) = 0;
  virtual CORBA::Short getInteractiveState_UI() = 0;
  virtual void setInteractiveState_cfd(CORBA::Short value) = 0;
  virtual CORBA::Short getInteractiveState_cfd() = 0;
  virtual void setInteractiveGA(CORBA::Short value) = 0;
  virtual CORBA::Short getInteractiveGA() = 0;
  virtual void setDesignParams(const VjDesignObs::design_params& value) = 0;
  virtual void setActiveDesignParams(const VjDesignObs::active_flag& value) = 0;
  virtual void setVRserver_name(const char* value) = 0;
  virtual char* getVRserver_name() = 0;
  virtual void setMode_oldModel(CORBA::Short value) = 0;
  virtual CORBA::Short getMode_oldModel() = 0;
  virtual void setTrans_oldModel(const VjDesignObs::design_params& value) = 0;
  virtual void setRot_oldModel(const VjDesignObs::design_params& value) = 0;
  virtual void setNewVtkFileName(const char* value) = 0;
  virtual char* getNewVtkFileName() = 0;
  virtual void setCheckedGene(CORBA::Short value) = 0;
  virtual CORBA::Short getCheckedGene() = 0;
  virtual void setCrossoverRate(CORBA::Double value) = 0;
  virtual CORBA::Double getCrossoverRate() = 0;
  virtual void setMutationRate(CORBA::Double value) = 0;
  virtual CORBA::Double getMutationRate() = 0;
  
public:  // Really protected, workaround for xlC
  virtual _CORBA_Boolean _dispatch(omniCallHandle&);

private:
  virtual void* _ptrToInterface(const char*);
  virtual const char* _mostDerivedRepoId();
};




class POA_VjDesignObs :
  public virtual _impl_VjDesignObs,
  public virtual PortableServer::ServantBase
{
public:
  virtual ~POA_VjDesignObs();

  inline VjDesignObs_ptr _this() {
    return (VjDesignObs_ptr) _do_this(VjDesignObs::_PD_repoId);
  }
};





#undef _core_attr
#undef _dyn_attr



inline void
VjDesignObs::_marshalObjRef(::VjDesignObs_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_VjDesignObs
#endif

#endif  // __VjDesignObs_hh__

