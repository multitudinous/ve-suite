// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from 
// .\be\be_codegen.cpp:1063

#include "AspenUnit_i.h"
#include "StringTokenizer.h"
#include "VE_Open/XML/Model/Network.h"
#include "VE_Open/XML/Model/Link.h"
#include "VE_Open/XML/Model/Model.h"
#include "VE_Open/XML/DataValuePair.h"
#include "VE_Open/XML/XMLReaderWriter.h"
#include "VE_Open/XML/Model/Point.h"
#include "VE_Open/XML/Model/Port.h"
#include "VE_Open/XML/Command.h"
// Implementation skeleton constructor
Body_Unit_i::Body_Unit_i (Body::Executive_ptr exec, std::string name)
  : executive_(Body::Executive::_duplicate(exec))
{
  UnitName_=name;
  return_state = 0;
}

// Implementation skeleton destructor
Body_Unit_i::~Body_Unit_i (void)
{
}

void Body_Unit_i::StartCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
}

void Body_Unit_i::StopCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(id_,msg.c_str());

}

void Body_Unit_i::PauseCalc (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(id_,msg.c_str());
}

void Body_Unit_i::Resume (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	std::string msg;
    msg = UnitName_+" : Instant calculation, already finished\n";
    executive_->SetModuleMessage(id_,msg.c_str());
}

char * Body_Unit_i::GetStatusMessage (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	bool rv;
	VE_XML::Command returnState;

	returnState.SetCommandName("statusmessage");
	VE_XML::DataValuePair data("RETURN_STATE");
	data.SetDataType("UNSIGNED INT");
	data.SetDataValue(return_state);
	returnState.AddDataValuePair(&data);
	std::vector< std::pair< VE_XML::XMLObject*, std::string > > nodes;

	nodes.push_back( 
                  std::pair< VE_XML::XMLObject*, std::string >( &returnState, "Command" ) 
                     );
	VE_XML::XMLReaderWriter commandWriter;
	std::string status="returnString";
	commandWriter.UseStandaloneDOMDocumentManager();
	commandWriter.WriteXMLDocument( nodes, status, "vecommand" );
    return CORBA::string_dup(status.c_str());
}

char * Body_Unit_i::GetUserData (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
}

void Body_Unit_i::SetParams (
    const char * param
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
   unsigned int i;
   VE_XML::XMLReaderWriter networkWriter;
   networkWriter.UseStandaloneDOMDocumentManager();
   networkWriter.ReadFromString();
   networkWriter.ReadXMLData( param, "Command", "vecommand" );
   std::vector< VE_XML::XMLObject* > objectVector = networkWriter.GetLoadedXMLObjects();

   if ( !objectVector.empty() )
   {
	   VE_XML::Command* params = dynamic_cast< VE_XML::Command* >( objectVector.at( 0 ) );
	   unsigned int num = params->GetNumberOfDataValuePairs();
	   for (i=0; i<num; i++)
	   {
	   VE_XML::DataValuePair* curPair= params->GetDataValuePair(i);
	   //now is the aspen specific 
	   CString nodepath = curPair->GetDataName().c_str();
	   CString nodevalue = curPair->GetDataString().c_str();
	   }
   }
}

void Body_Unit_i::SetID (
    ::CORBA::Long id
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	 id_=id;
	 std::cout<<UnitName_<<" :SetID called"<<std::endl;
}

::CORBA::Long Body_Unit_i::GetID (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
	std::cout<<UnitName_<<" :GetID called"<<std::endl;
    return id_;
}

void Body_Unit_i::SetName (
    const char * name
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
  // Add your implementation here
	UnitName_ = std::string(name);
    std::cout<<UnitName_<<" :SetName called"<<std::endl;
}

char * Body_Unit_i::GetName (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
    std::cout<<UnitName_<<" :GetName called"<<std::endl;
    return CORBA::string_dup(UnitName_.c_str());
}

char * Body_Unit_i::Query (
    
  )
  ACE_THROW_SPEC ((
    ::CORBA::SystemException,
    ::Error::EUnknown
  ))
{
	bool firsttime=true;

	std::string filename="Hyper.bkp";
	if (firsttime)
	{
		bkp.openFile(filename.c_str());
		firsttime=false;
	}
	return CORBA::string_dup(bkp.CreateNetwork().c_str());
	
}
