##Builds DefaultGraphicalPlugin<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR execOsgPatTag buildDir vtk_options osg_options xerces_options')

sources = Split("""
    DefaultGraphicalPlugin.cxx
""")

headers = Split("""
    DefaultGraphicalPlugin.h
""")

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_SceneGraphLib%s' %(execOsgPatTag),
                   'VE_XplorerLib%s' %(execOsgPatTag),
                   'GraphicalPlugin%s' %(execOsgPatTag),
                   'VE_TextureBasedLib%s' %(execOsgPatTag),
                   'VE_UtilLib', 'VE_ModelLib', 'VE_XMLLib', 'VE_CADLib'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Xplorer','SceneGraph'),
                        pj('#', buildDir, 'VE_Xplorer','XplorerHandlers'),
                        pj('#', buildDir, 'VE_Xplorer','Utilities'),
                        pj('#', buildDir, 'VE_Xplorer','TextureBased'),
                        pj('#', buildDir, 'VE_Xplorer','GraphicalPlugin'),
                        pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','XML','CAD'),
                        pj('#', buildDir, 'VE_Open','XML','Shader')])
lib_env.ParseConfig('flagpoll Boost.Filesystem --libs --cflags')
lib_env.ParseConfig('flagpoll vrjuggler --libs --cflags')
vtk_options.apply( lib_env )
osg_options.apply( lib_env )
xerces_options.apply( lib_env )

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('DefaultGraphicalPlugin%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('DefaultGraphicalPlugin%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'DefaultGraphicalPlugin'))
lib.build()
