##Builds VE_XplorerNetworkLib<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR execOsgPatTag buildDir osg_options vtk_options xerces_options')

sources = Split("""
   cfdExecutive.cxx
   cfdVEAvailModules.cxx
   cfdVEPluginLoader.cxx
   VE_i.cxx
   DeleteObjectFromNetworkEventHandler.cxx
   SwitchXplorerViewEventHandler.cxx
   ReloadPluginsEventHandler.cxx
   NetworkSystemView.cxx
   temp/StringTokenizer.cxx
   temp/bkpparser.cxx
   ../DefaultGraphicalPlugin/DefaultGraphicalPlugin.cxx
""")

headers = Split("""
   cfdExecutive.h
   cfdVEAvailModules.h
   cfdVEPluginLoader.h
   VE_i.h
   DeleteObjectFromNetworkEventHandler.h
   SwitchXplorerViewEventHandler.h
   ReloadPluginsEventHandler.h
   NetworkSystemView.h
   temp/StringTokenizer.h
   temp/bkpparser.h
""")
##   ../DefaultGraphicalPlugin/DefaultGraphicalPlugin.h

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = ['VE_XML',
                   'VE_SceneGraph%s' %(execOsgPatTag),
                   'VE_UtilLib',
                   'VE_TextureBasedLib%s' %(execOsgPatTag),
                   'VE_OpenModuleLib',
                   'VE_XplorerLib%s' %(execOsgPatTag),
                   'GraphicalPlugin%s' %(execOsgPatTag)])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Xplorer','SceneGraph'),
                        pj('#', buildDir, 'VE_Xplorer','XplorerHandlers'),
                        pj('#', buildDir, 'VE_Xplorer','Utilities'),
                        pj('#', buildDir, 'VE_Xplorer','TextureBased'),
                        pj('#', buildDir, 'VE_Xplorer','GraphicalPlugin'),
                        pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML')])

lib_env.ParseConfig('flagpoll TAO \
                          ACE TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype \
                          TAO_CosNaming TAO_Svc_Utils TAO_IORTable TAO_Messaging \
                          TAO_PortableServer TAO_BiDirGIOP TAO_AnyTypeCode \
                          --libs --cflags')
lib_env.ParseConfig('flagpoll vrjuggler --atleast-version=%s --libs --cflags'%lib_env['VRJugglerVersion'])
lib_env.ParseConfig('flagpoll Boost.Filesystem --atleast-version=%s --libs --cflags'%lib_env['BoostVersion'])

vtk_options.apply( lib_env )
osg_options.apply( lib_env )
xerces_options.apply( lib_env )
lib_env.Append(CPPPATH = [pj('#','external','osgOQ','include')])
lib_env.Append(LIBS = ['osgOQ'])
lib_env.Append(LIBPATH = [pj('#',buildDir,'external','osgOQ')])
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_XplorerNetworkLib%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_XplorerNetworkLib%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'XplorerNetwork'))
lib.build()
