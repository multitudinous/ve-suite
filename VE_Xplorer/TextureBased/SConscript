##Builds VE_TextureBasedLib<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv libPath ves_pkg LIBDIR execOsgPatTag')

sources = Split("""
   cfd3DTextureCullCallback.cxx
   cfdAdvectionSubGraph.cxx
   cfdCopyTo3DTextureStage.cxx
   cfdOSGAdvectionShaderManager.cxx
   cfdOSGPingPongTexture3d.cxx
   cfdOSGShaderManager.cxx
   cfdOSGTransferShaderManager.cxx
   cfdPBufferManager.cxx
   cfdPBufferQuad.cxx
   cfdScalarShaderManager.cxx
   cfdScalarVolumeVisHandler.cxx
   cfdSimpleTextureCallback.cxx
   cfdTextureDataSet.cxx
   cfdTextureManager.cxx
   cfdTextureMatrixCallback.cxx
   cfdUpdateableOSGNoiseTexture3d.cxx
   cfdUpdateableOSGTexture1d.cxx
   cfdUpdateParameterCallback.cxx
   cfdUpdateTextureCallback.cxx
   cfdVectorVolumeVisHandler.cxx
   cfdVolumeBillboard.cxx
   cfdVolumeCenterCallback.cxx
   cfdVolumeVisNodeHandler.cxx
   cfdVolumeVisualization.cxx
""")

headers = Split("""
   cfd3DTextureCullCallback.h
   cfdAdvectionSubGraph.h
   cfdCopyTo3DTextureStage.h
   cfdOSGAdvectionShaderManager.h
   cfdOSGPingPongTexture3d.h
   cfdOSGShaderManager.h
   cfdOSGTransferShaderManager.h
   cfdPBufferManager.h
   cfdPBufferQuad.h
   cfdScalarShaderManager.h
   cfdScalarVolumeVisHandler.h
   cfdSimpleTextureCallback.h
   cfdTextureDataSet.h
   cfdTextureManager.h
   cfdTextureMatrixCallback.h
   cfdUpdateableOSGNoiseTexture3d.h
   cfdUpdateableOSGTexture1d.h
   cfdUpdateParameterCallback.h
   cfdUpdateTextureCallback.h
   cfdVectorVolumeVisHandler.h
   cfdVolumeBillboard.h
   cfdVolumeCenterCallback.h
   cfdVolumeVisNodeHandler.h
   cfdVolumeVisualization.h
""")

##srcs = map(lambda s: pj('#', 'VE_Xplorer', 'TextureBased', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = 'VE_UtilLib')
lib_env.ParseConfig('flagpoll vtk osg vrjuggler Boost.Filesystem --libs --cflags')
##env.ParseConfig('wx-config --cxxflags --libs')
##For non-64-bit systems: (64-bits need 'lib64')
##env.Append(LIBPATH = [pj('usr', 'X11R6', 'lib')])
##env.Append(LIBS = ['X11', 'GL'])

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_TextureBasedLib%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_TextureBasedLib%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'TextureBased'))
lib.build()
