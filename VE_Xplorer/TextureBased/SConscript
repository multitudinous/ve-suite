##Builds VE_TextureBasedLib<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR execOsgPatTag buildDir osg_options vtk_options')

sources = Split("""
   cfd3DTextureCullCallback.cxx
   cfdAdvectionSubGraph.cxx
   cfdCopyTo3DTextureStage.cxx
   cfdOSGAdvectionShaderManager.cxx
   cfdOSGPingPongTexture3d.cxx
   cfdOSGShaderManager.cxx
   cfdOSGTransferShaderManager.cxx
   cfdPBufferManager.cxx
   cfdPBufferQuad.cxx
   cfdScalarShaderManager.cxx
   cfdScalarVolumeVisHandler.cxx
   cfdSimpleTextureCallback.cxx
   cfdTextureDataSet.cxx
   cfdTextureManager.cxx
   cfdTextureMatrixCallback.cxx
   cfdUpdateableOSGNoiseTexture3d.cxx
   cfdUpdateableOSGTexture1d.cxx
   cfdUpdateParameterCallback.cxx
   cfdUpdateTextureCallback.cxx
   cfdVectorVolumeVisHandler.cxx
   cfdVolumeVisNodeHandler.cxx
   cfdVolumeVisualization.cxx
   GreyScaleShaderManager.cxx
   TBVolumeSlices.cxx
   LuminanceTransferFunction.cxx
   PreIntegrationTexture.cxx
   NoiseTexture2D.cxx
   RedYellowGreenCyanBlueTransferFunction.cxx
   TransferFunction.cxx
""")

headers = Split("""
   cfd3DTextureCullCallback.h
   cfdAdvectionSubGraph.h
   cfdCopyTo3DTextureStage.h
   cfdOSGAdvectionShaderManager.h
   cfdOSGPingPongTexture3d.h
   cfdOSGShaderManager.h
   cfdOSGTransferShaderManager.h
   cfdPBufferManager.h
   cfdPBufferQuad.h
   cfdScalarShaderManager.h
   cfdScalarVolumeVisHandler.h
   cfdSimpleTextureCallback.h
   cfdTextureDataSet.h
   cfdTextureManager.h
   cfdTextureMatrixCallback.h
   cfdUpdateableOSGNoiseTexture3d.h
   cfdUpdateableOSGTexture1d.h
   cfdUpdateParameterCallback.h
   cfdUpdateTextureCallback.h
   cfdVectorVolumeVisHandler.h
   cfdVolumeVisNodeHandler.h
   cfdVolumeVisualization.h
   GreyScaleShaderManager.h
   TBVolumeSlices.h
   volumeRenderBasicShader.h
   volumeRenderPhongShader.h
   bboxEdgeConstants.h
   RedYellowGreenCyanBlueTransferFunction.h
   TransferFunction.h
   PreIntegrationTexture.h
   NoiseTexture2D.h
   LuminanceTransferFunction.h
""")

##srcs = map(lambda s: pj('#', 'VE_Xplorer', 'TextureBased', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(LIBS = 'VE_UtilLib')
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Xplorer','Utilities')])
lib_env.ParseConfig('flagpoll Boost.Filesystem --atleast-version=%s --libs --cflags'%lib_env['BoostVersion'])
lib_env.Append(LIBS = ['GLU','GL'])
lib_env.ParseConfig('flagpoll vrjuggler --get-extra_libs --libs --cflags --atleast-version=%s'%lib_env['VRJugglerVersion'])
osg_options.apply( lib_env )
vtk_options.apply( lib_env )
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_TextureBasedLib%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_TextureBasedLib%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'TextureBased'))
lib.build()
