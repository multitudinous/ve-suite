##Builds VE_Xplorer<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR GetPlatform execOsgPatTag buildDir osg_options vtk_options xerces_options opal_options ode_options')
print "build diri %s ", buildDir
srcs = Split("""
   cfdApp.cxx
   cfdAppWrapper.cxx
   cfdVEXplorer.cxx
   cfdVjObsWrapper.cxx
   VjObs_i.cxx 
""")

env = ves_pkg.getEnv().Copy()
env.Append(
            LIBS = ['VE_XMLLib', 'VE_CADLib', 'VE_ModelLib', 'VE_ShaderLib',
                   'VE_SceneGraph_UtilitiesLib', 
                   'VE_SceneGraphLib%s' %(execOsgPatTag),
                   'VE_UtilLib',
                   'VE_TextureBasedLib%s' %(execOsgPatTag),
                   'VE_OpenModuleLib',
                   'VE_XplorerLib%s' %(execOsgPatTag),
                   'VE_XplorerNetworkLib%s' %(execOsgPatTag),
                   'GraphicalPlugin%s' %(execOsgPatTag)])
if not buildDir == "":
   env.Append(LIBPATH = [pj('#', buildDir, 'VE_Xplorer','SceneGraph'),
                        pj('#', buildDir, 'VE_Xplorer','XplorerHandlers'),
                        pj('#', buildDir, 'VE_Xplorer','Utilities'),
                        pj('#', buildDir, 'VE_Xplorer','SceneGraph','Utilities'),
                        pj('#', buildDir, 'VE_Xplorer','TextureBased'),
                        pj('#', buildDir, 'VE_Xplorer','GraphicalPlugin'),
                        pj('#', buildDir, 'VE_Xplorer','XplorerNetwork'),
                        pj('#', buildDir, 'VE_Open','skel'),
                        pj('#', buildDir, 'VE_Open','XML'),
                        pj('#', buildDir, 'VE_Open','XML','Model'),
                        pj('#', buildDir, 'VE_Open','XML','Shader'),
                        pj('#', buildDir, 'VE_Open','XML','CAD')])
vtk_options.apply( env )
osg_options.apply( env )
xerces_options.apply( env )
env.ParseConfig('flagpoll Boost.Filesystem --libs --cflags')
env.ParseConfig('flagpoll TAO \
                          ACE TAO_IORInterceptor TAO_ObjRefTemplate TAO_Valuetype \
                          TAO_CosNaming TAO_Svc_Utils TAO_IORTable TAO_Messaging \
                          TAO_PortableServer TAO_BiDirGIOP TAO_AnyTypeCode \
                          --libs --cflags')
env.ParseConfig('flagpoll vrjuggler --get-vrj-ogl-libs --libs --cflags')
ode_options.apply( env )
opal_options.apply( env )
   
prog = ves_pkg.createProgram('project%s' %(execOsgPatTag), env, 'bin')
prog.addSources( srcs )
prog.build()

