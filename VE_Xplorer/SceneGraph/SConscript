##Builds VE_SceneGraphLib<tag>
import os, sys, string
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR execOsgPatTag osg_options vtk_options')

sources = Split("""
    cfdClone.cxx
    cfdDCS.cxx
    cfdFILE.cxx
    cfdFileInfo.cxx
    cfdGeode.cxx
    cfdGroup.cxx
    cfdNode.cxx
    cfdNodeTraverser.cxx
    cfdPfSceneManagement.cxx
    cfdRawNodeTraverser.cxx
    cfdSceneNode.cxx
    cfdSequence.cxx
    cfdSwitch.cxx
    cfdTempAnimation.cxx
    vtkActorToOSG.cpp
    vtkActorToPF.cxx
    Triangles.cxx
    Text.cxx
    ModelOccluder.cxx
""")

headers = Split("""
    cfdClone.h
    cfdDCS.h
    cfdFILE.h
    cfdFileInfo.h
    cfdGeode.h
    cfdGroup.h
    cfdNode.h
    cfdNodeTraverser.h
    cfdPfSceneManagement.h
    cfdRawNodeTraverser.h
    cfdSceneNode.h
    cfdSequence.h
    cfdSwitch.h
    cfdTempAnimation.h
    vtkActorToOSG.h
    vtkActorToPF.h
    Triangles.h
    Text.h
    ModelOccluder.h
""")

##srcs = map(lambda s: pj('#', 'VE_Xplorer', 'SceneGraph', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
##env.Append(CPPPATH = [os.getcwd()])
lib_env.ParseConfig('flagpoll gmtl vrjuggler --libs --cflags')
vtk_options.apply( lib_env )
osg_options.apply( lib_env )
if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_SceneGraphLib%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_SceneGraphLib%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'SceneGraph'))
lib.build()
