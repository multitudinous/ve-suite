##Builds VE_SceneGraphLib<tag>
import os, sys, string
import SConsAddons.Util as sca_util
pj = os.path.join

Import('baseEnv ves_pkg LIBDIR execOsgPatTag osg_options vtk_options RootDir buildDir xerces_options')
openDir = os.path.abspath( pj(RootDir, 'VE_Xplorer', 'SceneGraph') )
sources = sca_util.getSourcesRecursive( openDir )
headers = sca_util.getHeadersRecursive( openDir )

##srcs = map(lambda s: pj('#', 'VE_Xplorer', 'SceneGraph', s), srcs)

lib_env = ves_pkg.getEnv().Copy()
lib_env.Append(CPPPATH = [pj('#','external','osgOQ','include')])
lib_env.ParseConfig('flagpoll bullet --libs --cflags')
lib_env.ParseConfig('flagpoll gmtl --libs --cflags')
lib_env.ParseConfig('flagpoll vpr --atleast-version=%s gadgeteer --libs --cflags'%lib_env['VPRVersion'])
lib_env.ParseConfig('flagpoll vrjuggler --atleast-version=%s --get-extra_libs'%lib_env['VRJugglerVersion'])
lib_env.Append(LIBS = ['GLU','GL'])

lib_env.Append(LIBS = ['VE_XML','osgOQ'])
lib_env.Append(LIBPATH = [pj('#', buildDir, 'VE_Open','XML'),pj('#',buildDir,'external','osgOQ')])
vtk_options.apply( lib_env )
osg_options.apply( lib_env )
xerces_options.apply( lib_env )
#lib_env.Append( CPPFLAGS = ['-ffriend-injection'] )

if baseEnv['StaticOnly'] == "no":
   lib = ves_pkg.createStaticAndSharedLibrary('VE_SceneGraph%s' %(execOsgPatTag),
                                                        lib_env,
                                                        installPrefix = LIBDIR)
else:
   lib = ves_pkg.createStaticLibrary('VE_SceneGraph%s' %(execOsgPatTag), lib_env,
                                               installPrefix = LIBDIR)
   
lib.addSources(sources)
lib.addHeaders(headers,  pj( 'VE_Xplorer', 'SceneGraph'))
lib.build()
