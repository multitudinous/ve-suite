<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
	<title>VE-Suite - Developer Information</title>
	<link href="style.css" rel="stylesheet" type="text/css">
</head>
<body>

<table width="826" border="0" cellspacing="" cellpadding="0">
  <tr>
  	<td width="826" colspan="2">
	
		<table width="826" border="0" cellspacing="0" cellpadding="0">
		  <tr>
			<td width="551"><img src="graphics/header.gif" width="576" height="114"></td>
			<td width="225" valign="top" align="right"><b>&nbsp;<br><a href="http://www.vrac.iastate.edu">Virtual Reality Applications Center</a><br><a href="http://www.vrac.iastate.edu/~kmbryden">Dr. Kenneth Mark Bryden</a></b></td>
		  </tr>
		</table>
	
	</td>
  </tr>
  <tr>
    <td width="181">&nbsp;</td>
    <td width="645">&nbsp;</td>
  </tr>
  <tr>
    <td width="826" colspan="2">
	
		<table width="826" border="0" cellspacing="0" cellpadding="5">
		  <tr>
		    <td width="181">&nbsp;</td>
		    <td width="645"><h1>Developer Information </h1></td>
		  </tr>
		  <tr>
		    <td width="181" valign="top" align="left">

				<table width="100%" border="0" cellspacing="0" cellpadding="3">
				  <tr>
				    <td><a href="homepage.htm"><b>Homepage</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="download.htm"><b>Download</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="installation.htm"><b>Installation</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="guide.htm"><b>User's Guide</b></a></td>
				  </tr>
				  <!--
				  <tr>
				    <td><a href="documentation.htm"><b>Documentation</b></a></td>
				  </tr>
				  -->
				  <tr>
				    <td><a href="gallery.htm"><b>Application Gallery</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="research.htm"><b>Research</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="collaborators.htm"><b>Collaborators</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="developer.htm"><b>Developer Information</b></a></td>
				  </tr>
				  <tr>
				    <td><a href="contact.htm"><b>Contact</b></a></td>
				  </tr>
				</table>

			</td>
		    <td width="645" align="left" valign="top">
			
				<h3>VE-Suite Code Guidelines </h3>
				<p>Basic quidelines are needed so that your code looks properly formatted in someone else's editor and is easy to follow. We modelled these guidelines after those of two open-source projects that we use heavily, <a href="http://www.vtk.org/contribute.php">VTK</a> and <a href="http://www.vrjuggler.org/twiki_public/bin/view/Juggler/VrJugglerCppCodingStandard">VRJuggler</a>.</p>
				
				<p><h2>Class Structure</h2></p>
				<blockquote>
				  <p>We only put one public class per file.</p>
				  <p>Every class name, macro, etc. starts with either "<span class="style9">cfd</span>" or "<span class="style9">CFD</span>" to avoid name clashes with other libraries. Classes should all start with "<span class="style9">cfd</span>" and macros or constants can start with either.</p>
				  <p>Class names and file names are the same (e.g., cfdContours class is declared in cfdContours.h and implemented in cfdContours.cpp). This makes it easier to find the correct file for a specific class.</p>
                  <p>We try to keep all instance variables protected. The user and application developer should access instance variables through Set/Get methods.</p>
                  <p>We <b>always</b> initialize member variables in the constructor. Too many problems are eventually traced back to a pointer or variable left uninitialized.</p>
                  <p>Classes should implement a destructor, copy constructor, and equals operator.</p>
				</blockquote>

				<p><h2>Names</h2></p>
				<blockquote>
                  <p>Make names clear. Try to spell out a name and not use abbreviations. This leads to longer names but it makes using the software easier because you know that the <span class="style9">SetRasterFontRange</span> method will always be called that, not <span class="style9">SetRFRange</span> or <span class="style9">SetRFontRange</span> or <span class="style9">SetRFR</span>. When the name includes a natural abbreviation such as <span class="style9">OpenGL</span>, we keep the abbreviation and capitalize the abbreviated letters.</p>
                  <p>We only use alphanumeric characters in names, [a-zA-z0-9]. We do not use underscores ('_'), so names like <span class="style9">exterior_Surface</span> or <span class="style9">_exteriorSurface</span> are not welcome.</p>
                  <p>We use capitalization to indicate words within a name. For example, a class could be called <span class="style9">cfdVectorTopologyFilter</span>.</p>
                  <p>Use "<span class="style9">this</span>" inside of methods even though C++ doesn't require you to. This really seems to make the code more readable because it disambiguates between instance variables and local or global variables. It also disambiguates between member functions and other functions.</p>
				</blockquote>
				
				<p><h2>Class Names</h2></p>
				<blockquote>
                  <p>Classes names are nouns and usually start with &ldquo;<span class="style9">cfd</span>&rdquo;.</p>
				</blockquote>
			  
				<p><h2>Variable Names</h2></p>
				<blockquote>
                  <p>Variable names are nouns and should begin with a lower case character.</p>
				</blockquote>
			  
				<p><h2>Function Names</h2></p>
				<blockquote>
                  <p>Function names are verbs (e.g., <span class="style9">SetRasterFontRange</span>) and start with an upper case letter.</p>
				</blockquote>
				
				<p><h2>Functions and Function Arguments</h2></p>
				<blockquote>
                  <p>Use const on any member function that does not change any data. It enforces the purpose of a function and allows for better compiler optimizations.</p>
				</blockquote>
			  
				<p><h2>C++ style variable usage</h2></p>
				<blockquote>
                  <p>Declare variables where they're first used. C++ lifted this restriction from C for a reason. It makes code more modular and easier to understand, modify, and debug.</p>
				</blockquote>
				
				<p><h2>Braces</h2></p>
				<blockquote>
                  <p>Place brace under and inline with keywords: </p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; if ( condition ) &nbsp;&nbsp;&nbsp; while ( condition )</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
                  <p>Justification</p>
				  <p>If you use an editor that supports brace matching (such as vi or vim), then it is easy to hop around long blocks.</p>
                  <p>If you want to comment out the conditional clause, it only takes one &ldquo;//&rdquo;</p>
                  <p>Use braces for all if, while and do statements even if there is only a single statement within the braces. It ensures that when someone adds a line of code later there are already braces and they don't forget. It provides a more consistent look. It doesn't affect execution speed. It's easy to do. It will keep you out of trouble when using vrjDebug print statements.</p>
			  	</blockquote>
			  
				<p><h2>Header Files</h2></p>
				<blockquote>
                  <p>Header files are for declarations only. It is difficult to read code and find code if source is in the declarations.</p>
                  <p>The header file of the class should include only the superclass header file. If you need any other includes, include comment at each one describing why it should be included.</p>
                  <p>Use forward class declarations to eliminate the other includes that you are tempted to insert.</p>
                  <p>Header files should use guards to prevent multiple inclusion. These guards should be defined in the style <span class="style9">FILENAME_H</span>, which is the filename written in all upper case with punctuation such as dots ('.') replaced by underscores ('_')</p>
                  <p>&nbsp;<span class="style9">&nbsp;&nbsp; #ifndef CFDHEADER_H</span></p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; #define CFDHEADER_H</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; ...</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; #endif // CFDHEADER_H</p>
                  <p>Comment the end of every <span class="style9">#endif</span>, as shown above. Nested <span class="style9">#ifdef's</span> can be difficult to follow.</p>
                  <p>A new line after the last endif if is required by some compilers.</p>
			  	</blockquote>
				
				<p><h2>Text Formatting</h2></p>
				<blockquote>
                  <p>Limit lines to 80 characters. That allows you to open and see multiple files on a single display and you can better compare two files in xdiff or tkdiff. Set your editor to default to an 80-character wide screen.</p>
                  <p>Three (3) space indentation &ndash; Set your editor to insert three spaces every time you hit the tab key. True tabs (&ldquo;\t&rdquo;) are pretty much just for Makefiles.</p>
                  <p>Insert whitespace for readability. This means that one blank line should occur between function definitions or between different blocks of code.</p>
			  	</blockquote>
				
				<p><h2>Namespaces</h2></p>
				<blockquote>
                  <p>Don't place the <span class="style9">"using namespace"</span> directive at global scope in a header file. This can cause lots of invisible conflicts that are hard to track. Keep <span class="style9">&ldquo;using&rdquo;</span> statements to implementation files (if at all).</p>
                  <p>For standard namespace keywords (cout, cin, cerr, endl, vector, string), You must do <span class="style9">&ldquo;std::cout&rdquo;</span>, etc.</p>
			  	</blockquote>
				
				<p><h2>Comments</h2></p>
				<blockquote>
                  <p>Comments must tell &ldquo;why&rdquo;, not &ldquo;what is happening&rdquo;. At every point where you had a choice of what to do, place a comment describing which choice you made and why.</p>
			  	</blockquote>
				
				<p><h2>Parens () with Key Words and Functions Policy</h2></p>
				<blockquote>
                  <p>Do not put parens next to keywords. Put a space between keywords and parens. </p>
                  <p>Do not use parens in return statements when it's not necessary.</p>
                  <p>Do put parens next to function names.</p>
                  <p>Justification: Keywords are not functions. By putting parens next to keywords keywords and function names are made to look alike.</p>
                  <p>Example:</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; if ( condition ) &nbsp;&nbsp;&nbsp; while ( condition )</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; { &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ... &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; } &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; strcpy( s, s1 ); &nbsp;&nbsp;&nbsp; return 1;</p>
			  	</blockquote>
				
				<p><h2>Array Indexing</h2></p>
				<blockquote>
                  <p>Single-character variable names can easily be mistaken for numbers (&ldquo;i&rdquo;s can sometimes look a lot like ones). Make the array index stand out with whitespace:</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; array[ i ] = 0.0;</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; array[ 1 ] = 0.0;</p>
                  <p class="style9">&nbsp;&nbsp;&nbsp; array[ 2 ] = 0.0;</p>
			  	</blockquote>
				
				<p><h2>Submit clean code</h2></p>
				<blockquote>
                  <p>Make sure your code compiles without any warnings with -Wall and -O2</p>
				</blockquote>

			    <p>&nbsp;</p>
				<p>Printable Version</p>
			
			</td>
		  </tr>
		</table>
	
	</td>
  </tr>
</table>

</body>
</html>
