import os 
import sys
import string
pj = os.path.join
Import("baseEnv buildDir RootDir vrjuggler_options tao_options xerces_options")
Import("wxwidgets_options")

env = baseEnv.Copy()

# Make an action for generating the test files.
cxx_test_flags = '--error-printer --have-eh --abort-on-fail'
cxx_test = Action('python %s %s -o $TARGET $SOURCES' % (
                  pj(RootDir, 'external', 'cxxtest-3.10.1', 'cxxtestgen.py'),
                  cxx_test_flags) )

CxxTestBuilder = Builder(action=cxx_test)
env.AppendUnique( BUILDERS = {'CxxTest':CxxTestBuilder},
                  CPPPATH = [pj('#', 'external', 'cxxtest-3.10.1'),
                             pj('#', 'external', 'loki-0.1.6', 'include'),
                             pj('#', 'src'),
                             '#'],
                  LIBPATH = [pj('#', buildDir, 'src', 'ves', 'open')],
                  LIBS = ['sqlite3', 'ves_open_module'],
                  CPPDEFINES = ['LOKI_ENABLE_FUNCTION',
                                'LOKI_FUNCTOR_IS_NOT_A_SMALLOBJECT'])

tao_options.apply(env)
xerces_options.apply(env)
wxwidgets_options.apply(env)
# Provide a list of headers that have to be run through CxxTest to create
# the source files.
test_hdrs = Split("""
   CircularQueueTest.h
   JuliusNetworkClientTest.h
   JuliusXMLParserTest.h
   SpeechNavigatorTest.h
""")
# FIXME:  These files were commented out since they no longer build.
"""
   DatabaseTest.h
   ScalarDataTest.h
   SQLiteDriverTest.h
   TextureDataTest.h
   TextureDataManagerTest.h
   VariantTest.h
   VectorDataTest.h
"""
env.CxxTest('TestRunner.cpp', test_hdrs)

srcs = Split("""
   TestRunner.cpp
""")

orig_srcs = Split("""
   JuliusNetworkClient.cxx
   JuliusXMLParser.cxx
   SpeechNavigator.cxx
""")

orig_srcs = map(lambda s: pj('#', 'src', 'apps', 'voice', s), orig_srcs)
srcs.extend(orig_srcs)
   
loki_srcs = Split("""
   SmallObj.cpp
   Singleton.cpp
   SmartPtr.cpp
""")
loki_srcs = map(lambda s: pj('#', 'external', 'loki-0.1.6', 'src', s), 
                loki_srcs)
srcs.extend(loki_srcs)


env.Program('TestRunner', srcs)


SConscript( dirs = ['vtk'] )
