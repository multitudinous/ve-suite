##Builds idl skeleton files for veopen
import os, sys, string
pj = os.path.join
import SConsAddons.Util as sca_util

Import('baseEnv buildDir GetPlatform RootDir ves_pkg')

env = baseEnv.Clone()

# Find tao_idl exectuable
sys.stdout.write("Searching for uic...\n")
taoidl_cmd = WhereIs('uic')

if None == taoidl_cmd:
    sys.stdout.write("Could not find uic. Please make sure uic is in your PATH.\n")
    sys.exit(0)
else:
    sys.stdout.write("Found uic %s\n" % taoidl_cmd )

# Find tao_idl exectuable
sys.stdout.write("Searching for moc...\n")
taoidl_cmd = WhereIs('moc')

if None == taoidl_cmd:
    sys.stdout.write("Could not find moc. Please make sure moc is in your PATH.\n")
    sys.exit(0)
else:
    sys.stdout.write("Found moc %s\n" % taoidl_cmd )

def qtTargetBuilder( target, source, env ):
    #print target.path
    #print source.abspath
    targets = []
    #print os.path.dirname( source )
    #print os.path.basename( source )
    #print os.path.split( source )
    # need to ensure sources is a list or is made into a list
    for targets in target:
        print targets
    for sources in source: 
        print sources
    #    basename = os.path.splitext(os.path.basename(sources))[0]
    #    basedir = os.path.dirname( sources )
        #targets.append( pj( basedir, prefix + basename + suffix ) )
    return (target + targets, source )
    #return targets

uic ='uic'
# Setup uic
uicCmd = '%s ${SOURCES} -o ${TARGET}' %(uic) 
bld = Builder(action = uicCmd, prefix = "ui_", suffix = ".h", single_source = True )
env.Append(BUILDERS = {'qt_uic': bld})

moc ='moc'
# setup moc
mocCmd = '%s ${SOURCES} -o ${TARGET}' %(moc) 
bld = Builder(action = mocCmd, prefix = "moc_", suffix = ".cxx", single_source = True)
env.Append(BUILDERS = {'qt_moc': bld})

##########################

source = [pj('#',buildDir,'test','qt','BasicQtOffscreenRender','mydialog.ui')]
cppSources = env.qt_uic(source)

# first file
#source = [pj('#',buildDir,'test','qt','BasicQtOffscreenRender','mglwidget.h')]
#cppSources += env.qt_moc(source)

# second file
source = [pj('#',buildDir,'test','qt','BasicQtOffscreenRender','mydialog.h')]
cppSources += env.qt_moc(source)

openDir = os.path.abspath( pj(RootDir,buildDir,'test','qt','BasicQtOffscreenRender') )
cppSources1 = map(lambda s: pj(openDir, '%s' ) %(s), cppSources)

sources2 = sca_util.getSourcesRecursive( pj(RootDir,'test','qt','BasicQtOffscreenRender') )
sources2+=cppSources1

lib_env2 = ves_pkg.getEnv().Clone()
if GetPlatform() == 'linux':
    lib_env2.Append( CXXFLAGS=['-fPIC'])

lib_env2.AppendUnique( CPPPATH = [pj(openDir)] )

if GetPlatform() == 'win32':
   lib_env2['no_import_lib'] = 1
   lib_env2['WINDOWS_INSERT_MANIFEST'] = False
#   lib_env2.AppendUnique( LIBS = ['opengl'])
elif GetPlatform() == 'darwin':
   lib_env2.Append( LINKFLAGS = ['-framework','QtCore', '-framework','QtGui','-framework','QtOpenGL','-framework','OpenGL'])
   lib_env2.AppendUnique( CXXFLAGS =['-F/Library/Frameworks/QtOpenGL.framework','-F/Library/Frameworks/QtCore.framework','-F/Library/Frameworks/QtGui.framework'] )
else:
    lib_env2.AppendUnique( LIBS= ['QtCore','QtGui','QtOpenGL'] )

qtprog = ves_pkg.createProgram('BasicQtOffscreenRender' + lib_env2["PROGSUFFIX"], lib_env2, 'bin')
qtprog.addSources(sources2)
qtprog.build()

